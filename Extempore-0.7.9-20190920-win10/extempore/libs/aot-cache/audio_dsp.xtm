(sys:load "libs/core/rational.xtm" 'quiet)
(sys:load "libs/core/audiobuffer.xtm" 'quiet)
(sys:load-preload-check 'audio_dsp)
(define *xtmlib-audio_dsp-loaded* #t)
(define *xtmlib-audio_dsp-loaded-timer* (clock:clock))
(set! *impc:aot:prev-compiler-message-level* *impc:compiler:message:level*)
(set! *impc:compiler:message:level* 'low)

(print "Loading ")
(print-with-colors 'blue 'default #t (print 'xtmaudio_dsp))
(print " library... ")
(llvm:compile-ir (sys:slurp-file "libs/aot-cache/xtmaudio_dsp.ll"));; flush the JIT-compilation queue, so we only get this file's code in the module
(impc:compiler:flush-jit-compilation-queue)
(register-lib-func xtmaudio_dsp print_audio_state_adhoc_W2kzMl0 [i32]* 0 "" '(let ((print_audio_state_adhoc_1 (lambda () (printf "    FRAMES: %lld\n" FRAMES) (printf " OUT CHANS: %lld\n" CHANNELS) (printf "  IN CHANS: %lld\n" IN_CHANNELS) (printf "SAMPLERATE: %f\n" (ftod (convert SAMPLERATE)))))) print_audio_state_adhoc_1))
(bind-poly print_audio_state print_audio_state_adhoc_W2kzMl0 "")
(bind-lib xtmaudio_dsp midi2frq [float,float]*)
(bind-lib xtmaudio_dsp midi2frq_scheme [i8*,i8*,i8*]*)
(mk-ff "midi2frq" (llvm:get-function-pointer "midi2frq_scheme"))
(bind-lib xtmaudio_dsp frq2midi [float,float]*)
(bind-lib xtmaudio_dsp frq2midi_scheme [i8*,i8*,i8*]*)
(mk-ff "frq2midi" (llvm:get-function-pointer "frq2midi_scheme"))
(bind-lib xtmaudio_dsp bpm2hz [float,float]*)
(bind-lib xtmaudio_dsp bpm2hz_scheme [i8*,i8*,i8*]*)
(mk-ff "bpm2hz" (llvm:get-function-pointer "bpm2hz_scheme"))
(bind-lib xtmaudio_dsp hz2bpm [float,float]*)
(bind-lib xtmaudio_dsp hz2bpm_scheme [i8*,i8*,i8*]*)
(mk-ff "hz2bpm" (llvm:get-function-pointer "hz2bpm_scheme"))
(bind-lib xtmaudio_dsp amp2db [float,float]*)
(bind-lib xtmaudio_dsp amp2db_scheme [i8*,i8*,i8*]*)
(mk-ff "amp2db" (llvm:get-function-pointer "amp2db_scheme"))
(bind-lib xtmaudio_dsp db2amp [float,float]*)
(bind-lib xtmaudio_dsp db2amp_scheme [i8*,i8*,i8*]*)
(mk-ff "db2amp" (llvm:get-function-pointer "db2amp_scheme"))
(bind-lib xtmaudio_dsp calc_vsum [float,float*,i64]*)
(bind-lib xtmaudio_dsp calc_vsum_scheme [i8*,i8*,i8*]*)
(mk-ff "calc_vsum" (llvm:get-function-pointer "calc_vsum_scheme"))
(bind-lib xtmaudio_dsp calc_vmean [float,float*,i64]*)
(bind-lib xtmaudio_dsp calc_vmean_scheme [i8*,i8*,i8*]*)
(mk-ff "calc_vmean" (llvm:get-function-pointer "calc_vmean_scheme"))
(bind-lib xtmaudio_dsp rms_c [[float,float]*]*)
(bind-lib xtmaudio_dsp rms_c_scheme [i8*,i8*,i8*]*)
(mk-ff "rms_c" (llvm:get-function-pointer "rms_c_scheme"))
(bind-lib xtmaudio_dsp rms_st_c [[float,i64,float]*]*)
(bind-lib xtmaudio_dsp rms_st_c_scheme [i8*,i8*,i8*]*)
(mk-ff "rms_st_c" (llvm:get-function-pointer "rms_st_c_scheme"))
(bind-lib xtmaudio_dsp gainf [float,i64,i64,float]*)
(bind-lib xtmaudio_dsp gainf_scheme [i8*,i8*,i8*]*)
(mk-ff "gainf" (llvm:get-function-pointer "gainf_scheme"))
(bind-lib xtmaudio_dsp panner [float,i64,float]*)
(bind-lib xtmaudio_dsp panner_scheme [i8*,i8*,i8*]*)
(mk-ff "panner" (llvm:get-function-pointer "panner_scheme"))
(register-lib-func xtmaudio_dsp hann_adhoc_W2Zsb2F0LGk2NCxpNjQsaTY0XQ [float,i64,i64,i64]* 0 "" '(let ((hann_adhoc_14 (lambda (time:i64 width:i64 repeat:i64) (if (or (< width 1) (> (% time (* width repeat)) width)) 0.00000000000000000000 (* 0.50000000000000000000 (- 1.0000000000000000000 (cos (* STWOPI (/ (convert time) (convert width)))))))))) hann_adhoc_14))
(bind-poly hann hann_adhoc_W2Zsb2F0LGk2NCxpNjQsaTY0XQ "")
(register-lib-func xtmaudio_dsp hann_adhoc_W2Zsb2F0LGk2NCxpNjRd [float,i64,i64]* 0 "" '(let ((hann_adhoc_15 (lambda (time:i64 width:i64) (hann:[float,i64,i64,i64]* time width 10000000000)))) hann_adhoc_15))
(bind-poly hann hann_adhoc_W2Zsb2F0LGk2NCxpNjRd "")
(bind-lib xtmaudio_dsp impulse [float,i64,i64]*)
(bind-lib xtmaudio_dsp impulse_scheme [i8*,i8*,i8*]*)
(mk-ff "impulse" (llvm:get-function-pointer "impulse_scheme"))
(register-lib-func xtmaudio_dsp dsp_randn_adhoc_W2Zsb2F0XQ [float]* 0 "" '(let ((dsp_randn_adhoc_17 (let ((phase:i64 0)) (lambda () (let ((u1:SAMPLE (random)) (u2:SAMPLE (random)) (v1 (- (* 2.0000000000000000000 u1) 1.0000000000000000000)) (v2 (- (* 2.0000000000000000000 u2) 1.0000000000000000000)) (s (+ (* v1 v1) (* v2 v2)))) (if (= phase 0) (if (or (> s 1.0000000000000000000) (= s 0.00000000000000000000) (= s 1.0000000000000000000)) (dsp_randn_adhoc_17) (* v1 (sqrt (/ (* -2.0000000000000000000 (log s)) s)))) (begin (set! phase (- 1 phase)) (* v2 (sqrt (/ (* -2.0000000000000000000 (log s)) s)))))))))) dsp_randn_adhoc_17))
(bind-poly dsp_randn dsp_randn_adhoc_W2Zsb2F0XQ "")
(register-lib-func xtmaudio_dsp parabolicSineHP_adhoc_W2Zsb2F0LGZsb2F0XQ [float,float]* 0 "" '(let ((parabolicSineHP_adhoc_18 (let ((B (/ 4.0000000000000000000 SPI)) (C (/ -4.0000000000000000000 (* SPI SPI))) (P 0.22500000000000000555) (y 0.00000000000000000000)) (lambda (x) (set! y (+ (* B x) (* C x (fabs x)))) (+ (* P (- (* y (fabs y)) y)) y))))) parabolicSineHP_adhoc_18))
(bind-poly parabolicSineHP parabolicSineHP_adhoc_W2Zsb2F0LGZsb2F0XQ "")
(register-lib-func xtmaudio_dsp parabolicSineLP_adhoc_W2Zsb2F0LGZsb2F0XQ [float,float]* 0 "" '(let ((parabolicSineLP_adhoc_19 (let ((B (/ 4.0000000000000000000 SPI)) (C (/ -4.0000000000000000000 (* SPI SPI))) (P 0.22500000000000000555)) (lambda (x) (+ (* B x) (* C x) (fabs x)))))) parabolicSineLP_adhoc_19))
(bind-poly parabolicSineLP parabolicSineLP_adhoc_W2Zsb2F0LGZsb2F0XQ "")
(bind-lib xtmaudio_dsp fasttan [float,float]*)
(bind-lib xtmaudio_dsp fasttan_scheme [i8*,i8*,i8*]*)
(mk-ff "fasttan" (llvm:get-function-pointer "fasttan_scheme"))
(bind-lib xtmaudio_dsp fasttanh [double,double]*)
(bind-lib xtmaudio_dsp fasttanh_scheme [i8*,i8*,i8*]*)
(mk-ff "fasttanh" (llvm:get-function-pointer "fasttanh_scheme"))
(register-lib-func xtmaudio_dsp fastsin_adhoc_W2Zsb2F0LGZsb2F0XQ [float,float]* 0 "" '(let ((fastsin_adhoc_22 (let ((p 0.22500000000000000555) (b (/ 4.0000000000000000000 SPI)) (c (/ -4.0000000000000000000 (* SPI SPI)))) (lambda (x) (let ((y (+ (* b x) (* c x (fabs x))))) (+ (* p (- (* y (fabs y)) y)) y)))))) fastsin_adhoc_22))
(bind-poly fastsin fastsin_adhoc_W2Zsb2F0LGZsb2F0XQ "")
(register-lib-func xtmaudio_dsp integrator_c_adhoc_W2RvdWJsZSxkb3VibGVd [double,double]* 0 "" '(let ((integrator_c_adhoc_23 (let ((old 0.00000000000000000000) (leak 0.98999999999999999112)) (lambda (x) (set! old (+ (* leak old) x)) old)))) integrator_c_adhoc_23))
(bind-poly integrator_c integrator_c_adhoc_W2RvdWJsZSxkb3VibGVd "")
(bind-lib xtmaudio_dsp osc_c [[float,float,float]*,float]*)
(bind-lib xtmaudio_dsp osc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "osc_c" (llvm:get-function-pointer "osc_c_scheme"))
(bind-lib xtmaudio_dsp osc_mc_c [[float,i64,float,float]*,float]*)
(bind-lib xtmaudio_dsp osc_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "osc_mc_c" (llvm:get-function-pointer "osc_mc_c_scheme"))
(register-lib-func xtmaudio_dsp saw_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0LGkxXQ [[float,float,float]*,float,i1]* 0 "" '(let ((saw_c_adhoc_26 (lambda (mod inverted:i1) (let ((inc:float 0.00000000000000000000) (absinc 0.0:f) (out 0.00000000000000000000) (rising (if inverted #t #f)) (inv (if inverted -1.0000000000000000000 1.0000000000000000000))) (lambda (amp:float frq:float) (set! inc (/ frq SRs)) (if (and (> inc 0.00000000000000000000) (>= mod 1.0000000000000000000)) (set! mod (- mod 1.0000000000000000000))) (if (and (< inc 0.00000000000000000000) (<= mod 0.00000000000000000000)) (set! mod (+ mod 1.0000000000000000000))) (set! out (* inv (- (* mod 2.0000000000000000000) 1.0000000000000000000))) (set! mod (+ mod inc)) (* amp out)))))) saw_c_adhoc_26))
(bind-poly saw_c saw_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0LGkxXQ "")
(register-lib-func xtmaudio_dsp saw_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0XQ [[float,float,float]*,float]* 0 "" '(let ((saw_c_adhoc_27 (lambda (mod) (saw_c:[[float,float,float]*,float,i1]* mod #f)))) saw_c_adhoc_27))
(bind-poly saw_c saw_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0XQ "")
(register-lib-func xtmaudio_dsp saw_mc_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXQsZmxvYXRdKixmbG9hdCxpMV0 [[float,i64,float,float]*,float,i1]* 0 "" '(let ((saw_mc_c_adhoc_28 (lambda (mod inverted) (let ((osc (saw_c mod inverted)) (out 0.00000000000000000000)) (lambda (chan amp frq) (if (= chan 0) (set! out (osc amp frq))) out))))) saw_mc_c_adhoc_28))
(bind-poly saw_mc_c saw_mc_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXQsZmxvYXRdKixmbG9hdCxpMV0 "")
(register-lib-func xtmaudio_dsp saw_mc_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXQsZmxvYXRdKixmbG9hdF0 [[float,i64,float,float]*,float]* 0 "" '(let ((saw_mc_c_adhoc_29 (lambda (mod) (saw_mc_c:[[float,i64,float,float]*,float,i1]* mod #f)))) saw_mc_c_adhoc_29))
(bind-poly saw_mc_c saw_mc_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXQsZmxvYXRdKixmbG9hdF0 "")
(bind-lib xtmaudio_dsp pulse_c [[float,float,float,float]*,float]*)
(bind-lib xtmaudio_dsp pulse_c_scheme [i8*,i8*,i8*]*)
(mk-ff "pulse_c" (llvm:get-function-pointer "pulse_c_scheme"))
(bind-lib xtmaudio_dsp pulse_mc_c [[float,i64,float,float,float]*,float]*)
(bind-lib xtmaudio_dsp pulse_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "pulse_mc_c" (llvm:get-function-pointer "pulse_mc_c_scheme"))
(bind-lib xtmaudio_dsp tri_c [[float,float,float]*,float]*)
(bind-lib xtmaudio_dsp tri_c_scheme [i8*,i8*,i8*]*)
(mk-ff "tri_c" (llvm:get-function-pointer "tri_c_scheme"))
(bind-lib xtmaudio_dsp tri_mc_c [[float,i64,float,float]*,float]*)
(bind-lib xtmaudio_dsp tri_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "tri_mc_c" (llvm:get-function-pointer "tri_mc_c_scheme"))
(bind-lib xtmaudio_dsp poly_blep [float,float,float,float,i1]*)
(bind-lib xtmaudio_dsp poly_blep_scheme [i8*,i8*,i8*]*)
(mk-ff "poly_blep" (llvm:get-function-pointer "poly_blep_scheme"))
(register-lib-val xtmaudio_dsp BLEPTable |4096,double|* "")
(call-as-xtlang (set! BLEPTable (halloc (* 4096 8))) void)
(register-lib-val xtmaudio_dsp fBLEPTable |4096,float|* "")
(call-as-xtlang (set! fBLEPTable (halloc (* 4096 4))) void)
(register-lib-val xtmaudio_dsp BLEPTable_8_BLKHAR |4096,double|* "")
(call-as-xtlang (set! BLEPTable_8_BLKHAR (halloc (* 4096 8))) void)
(register-lib-val xtmaudio_dsp fBLEPTable_8_BLKHAR |4096,float|* "")
(call-as-xtlang (set! fBLEPTable_8_BLKHAR (halloc (* 4096 4))) void)
(bind-lib xtmaudio_dsp load_blep_tables_from_blob [void,i8*]*)
(bind-lib xtmaudio_dsp load_blep_tables_from_blob_scheme [i8*,i8*,i8*]*)
(mk-ff "load_blep_tables_from_blob" (llvm:get-function-pointer "load_blep_tables_from_blob_scheme"))
($ (load_blep_tables_from_blob "libs/core/bleptables.dump"))
(bind-lib xtmaudio_dsp LinTerp [float,float,float,float,float,float]*)
(bind-lib xtmaudio_dsp LinTerp_scheme [i8*,i8*,i8*]*)
(mk-ff "LinTerp" (llvm:get-function-pointer "LinTerp_scheme"))
(bind-lib xtmaudio_dsp blep_n [float,float*,float,float,float,float,i1,float,i1]*)
(bind-lib xtmaudio_dsp blep_n_scheme [i8*,i8*,i8*]*)
(mk-ff "blep_n" (llvm:get-function-pointer "blep_n_scheme"))
(register-lib-func xtmaudio_dsp blsaw_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0LGkxLGkxXQ [[float,float,float]*,float,i1,i1]* 0 "" '(let ((blsaw_c_adhoc_38 (lambda (mod inverted:i1 highcpu:i1) (let ((inc 0.00000000000000000000) (absinc 0.0:f) (out 0.00000000000000000000) (blep 0.00000000000000000000) (t 0.00000000000000000000) (rising (if inverted #t #f)) (inv (if inverted -1.0000000000000000000 1.0000000000000000000))) (lambda (amp:float frq:float) (set! inc (/ frq SRs)) (if (and (> inc 0.00000000000000000000) (>= mod 1.0000000000000000000)) (set! mod (- mod 1.0000000000000000000))) (if (and (< inc 0.00000000000000000000) (<= mod 0.00000000000000000000)) (set! mod (+ mod 1.0000000000000000000))) (set! blep (if highcpu (blep_n (cast fBLEPTable_8_BLKHAR SAMPLE*) 4096.0000000000000000 mod (fabs inc) 1.0000000000000000000 rising 4.0000000000000000000 #f) (poly_blep mod (fabs inc) 1.0000000000000000000 rising))) (set! out (* inv (- (* mod 2.0000000000000000000) 1.0000000000000000000))) (set! mod (+ mod inc)) (* amp (+ out blep))))))) blsaw_c_adhoc_38))
(bind-poly blsaw_c blsaw_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0LGkxLGkxXQ "")
(register-lib-func xtmaudio_dsp blsaw_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0LGkxXQ [[float,float,float]*,float,i1]* 0 "" '(let ((blsaw_c_adhoc_39 (lambda (mod inverted) (blsaw_c:[[float,float,float]*,float,i1,i1]* mod inverted #f)))) blsaw_c_adhoc_39))
(bind-poly blsaw_c blsaw_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0LGkxXQ "")
(register-lib-func xtmaudio_dsp blsaw_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0XQ [[float,float,float]*,float]* 0 "" '(let ((blsaw_c_adhoc_40 (lambda (mod) (blsaw_c:[[float,float,float]*,float,i1,i1]* mod #f #f)))) blsaw_c_adhoc_40))
(bind-poly blsaw_c blsaw_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0XQ "")
(register-lib-func xtmaudio_dsp blsaw_mc_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXQsZmxvYXRdKixmbG9hdCxpMSxpMV0 [[float,i64,float,float]*,float,i1,i1]* 0 "" '(let ((blsaw_mc_c_adhoc_41 (lambda (mod inverted highcpu) (let ((osc (blsaw_c mod inverted highcpu)) (out 0.00000000000000000000)) (lambda (chan amp frq) (if (= chan 0) (set! out (osc amp frq))) out))))) blsaw_mc_c_adhoc_41))
(bind-poly blsaw_mc_c blsaw_mc_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXQsZmxvYXRdKixmbG9hdCxpMSxpMV0 "")
(register-lib-func xtmaudio_dsp blsaw_mc_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXQsZmxvYXRdKixmbG9hdCxpMV0 [[float,i64,float,float]*,float,i1]* 0 "" '(let ((blsaw_mc_c_adhoc_42 (lambda (mod inverted) (blsaw_mc_c:[[float,i64,float,float]*,float,i1,i1]* mod inverted #f)))) blsaw_mc_c_adhoc_42))
(bind-poly blsaw_mc_c blsaw_mc_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXQsZmxvYXRdKixmbG9hdCxpMV0 "")
(register-lib-func xtmaudio_dsp blsaw_mc_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXQsZmxvYXRdKixmbG9hdF0 [[float,i64,float,float]*,float]* 0 "" '(let ((blsaw_mc_c_adhoc_43 (lambda (mod) (blsaw_mc_c:[[float,i64,float,float]*,float,i1,i1]* mod #f #f)))) blsaw_mc_c_adhoc_43))
(bind-poly blsaw_mc_c blsaw_mc_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXQsZmxvYXRdKixmbG9hdF0 "")
(register-lib-func xtmaudio_dsp blpulse2_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0XQ [[float,float,float,float]*,float]* 0 "" '(let ((blpulse2_c_adhoc_44 (lambda (mod:float) (let ((out 0.00000000000000000000) (inc 0.00000000000000000000) (mod2:float 0.00000000000000000000) (blep 0.0:f) (absinc 0.00000000000000000000) (t 0.00000000000000000000) (saw1 0.00000000000000000000) (saw2 0.00000000000000000000) (dcorr 0.00000000000000000000)) (lambda (amp:float frq:float pw:float) (set! pw (clamp (fabs pw) 0.050000000000000002776 0.94999999999999995559)) (set! inc (/ frq SRs)) (if (and (> inc 0.00000000000000000000) (>= mod 1.0000000000000000000)) (set! mod (- mod 1.0000000000000000000))) (if (and (< inc 0.00000000000000000000) (<= mod 0.00000000000000000000)) (set! mod (+ mod 1.0000000000000000000))) (set! blep (poly_blep mod (fabs inc) 1.0000000000000000000 #f)) (set! saw1 (+ blep (- (* mod 2.0000000000000000000) 1.0000000000000000000))) (if (> inc 0.00000000000000000000) (set! mod2 (+ mod pw)) (set! mod2 (- mod pw))) (if (and (> inc 0.00000000000000000000) (>= mod2 1.0000000000000000000)) (set! mod2 (- mod2 1.0000000000000000000))) (if (and (< inc 0.00000000000000000000) (<= mod2 0.00000000000000000000)) (set! mod2 (+ mod2 1.0000000000000000000))) (set! blep (poly_blep mod2 (fabs inc) 1.0000000000000000000 #f)) (set! saw2 (+ blep (- (* mod2 2.0000000000000000000) 1.0000000000000000000))) (set! out (- (* 0.50000000000000000000 saw1) (* 0.50000000000000000000 saw2))) (set! dcorr (/ 1.0000000000000000000 pw)) (if (< pw 0.50000000000000000000) (set! dcorr (/ 1.0000000000000000000 (- 1.0000000000000000000 pw)))) (set! out (* out dcorr)) (set! mod (+ mod inc)) (* amp out)))))) blpulse2_c_adhoc_44))
(bind-poly blpulse2_c blpulse2_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0XQ "")
(register-lib-func xtmaudio_dsp blpulse_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0LGkxXQ [[float,float,float,float]*,float,i1]* 0 "" '(let ((blpulse_c_adhoc_45 (lambda (mod:float highcpu:i1) (let ((out 0.00000000000000000000) (inc 0.00000000000000000000) (mod2:float 0.00000000000000000000) (blep 0.0:f) (absinc 0.00000000000000000000) (t 0.00000000000000000000) (saw1 0.00000000000000000000) (saw2 0.00000000000000000000) (dcorr 0.00000000000000000000)) (lambda (amp:float frq:float pw:float) (set! pw (clamp (fabs pw) 0.050000000000000002776 0.94999999999999995559)) (set! inc (/ frq SRs)) (if (and (> inc 0.00000000000000000000) (>= mod 1.0000000000000000000)) (set! mod (- mod 1.0000000000000000000))) (if (and (< inc 0.00000000000000000000) (<= mod 0.00000000000000000000)) (set! mod (+ mod 1.0000000000000000000))) (set! blep (if highcpu (blep_n (cast fBLEPTable_8_BLKHAR SAMPLE*) 4096.0000000000000000 mod (fabs inc) 1.0000000000000000000 #f 4.0000000000000000000 #f) (poly_blep mod (fabs inc) 1.0000000000000000000 #f))) (set! saw1 (+ blep (- (* mod 2.0000000000000000000) 1.0000000000000000000))) (if (> inc 0.00000000000000000000) (set! mod2 (+ mod pw)) (set! mod2 (- mod pw))) (if (and (> inc 0.00000000000000000000) (>= mod2 1.0000000000000000000)) (set! mod2 (- mod2 1.0000000000000000000))) (if (and (< inc 0.00000000000000000000) (<= mod2 0.00000000000000000000)) (set! mod2 (+ mod2 1.0000000000000000000))) (set! blep (if highcpu (blep_n (cast fBLEPTable_8_BLKHAR SAMPLE*) 4096.0000000000000000 mod2 (fabs inc) 1.0000000000000000000 #f 4.0000000000000000000 #f) (poly_blep mod2 (fabs inc) 1.0000000000000000000 #f))) (set! saw2 (+ blep (- (* mod2 2.0000000000000000000) 1.0000000000000000000))) (set! out (- (* 0.50000000000000000000 saw1) (* 0.50000000000000000000 saw2))) (set! dcorr (/ 1.0000000000000000000 pw)) (if (< pw 0.50000000000000000000) (set! dcorr (/ 1.0000000000000000000 (- 1.0000000000000000000 pw)))) (set! out (* out dcorr)) (set! mod (+ mod inc)) (* amp out)))))) blpulse_c_adhoc_45))
(bind-poly blpulse_c blpulse_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0LGkxXQ "")
(register-lib-func xtmaudio_dsp blpulse_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0XQ [[float,float,float,float]*,float]* 0 "" '(let ((blpulse_c_adhoc_46 (lambda (mod) (blpulse_c:[[float,float,float,float]*,float,i1]* mod #f)))) blpulse_c_adhoc_46))
(bind-poly blpulse_c blpulse_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0XQ "")
(bind-lib xtmaudio_dsp bltri_c [[float,float,float]*,float]*)
(bind-lib xtmaudio_dsp bltri_c_scheme [i8*,i8*,i8*]*)
(mk-ff "bltri_c" (llvm:get-function-pointer "bltri_c_scheme"))
(bind-lib xtmaudio_dsp sin_c [[float,float,float]*,float]*)
(bind-lib xtmaudio_dsp sin_c_scheme [i8*,i8*,i8*]*)
(mk-ff "sin_c" (llvm:get-function-pointer "sin_c_scheme"))
(bind-lib xtmaudio_dsp white_c [[float]*]*)
(bind-lib xtmaudio_dsp white_c_scheme [i8*,i8*,i8*]*)
(mk-ff "white_c" (llvm:get-function-pointer "white_c_scheme"))
(bind-lib xtmaudio_dsp pink_c [[float]*]*)
(bind-lib xtmaudio_dsp pink_c_scheme [i8*,i8*,i8*]*)
(mk-ff "pink_c" (llvm:get-function-pointer "pink_c_scheme"))
(bind-lib xtmaudio_dsp lpf_1p_c [[float,float,float]*]*)
(bind-lib xtmaudio_dsp lpf_1p_c_scheme [i8*,i8*,i8*]*)
(mk-ff "lpf_1p_c" (llvm:get-function-pointer "lpf_1p_c_scheme"))
(register-lib-val xtmaudio_dsp LPF1 i32 "")
(register-lib-val xtmaudio_dsp LPF2 i32 "")
(register-lib-val xtmaudio_dsp LPF4 i32 "")
(register-lib-val xtmaudio_dsp HPF1 i32 "")
(register-lib-val xtmaudio_dsp HPF2 i32 "")
(register-lib-val xtmaudio_dsp HPF4 i32 "")
(register-lib-val xtmaudio_dsp BPF1 i32 "")
(register-lib-val xtmaudio_dsp BPF2 i32 "")
(register-lib-val xtmaudio_dsp BPF4 i32 "")
(bind-lib xtmaudio_dsp va_onepole [[float,float,float]*,i32]*)
(bind-lib xtmaudio_dsp va_onepole_scheme [i8*,i8*,i8*]*)
(mk-ff "va_onepole" (llvm:get-function-pointer "va_onepole_scheme"))
(bind-lib xtmaudio_dsp moog_ladder [[float,float,float,float]*,i32]*)
(bind-lib xtmaudio_dsp moog_ladder_scheme [i8*,i8*,i8*]*)
(mk-ff "moog_ladder" (llvm:get-function-pointer "moog_ladder_scheme"))
(bind-lib xtmaudio_dsp svf_c [[|6,float|*,float,float,float,|6,float|*]*]*)
(bind-lib xtmaudio_dsp svf_c_scheme [i8*,i8*,i8*]*)
(mk-ff "svf_c" (llvm:get-function-pointer "svf_c_scheme"))
(bind-lib xtmaudio_dsp svf_mc_c [[|6,float|*,i64,float,float,float,|6,float|*]*,i64]*)
(bind-lib xtmaudio_dsp svf_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "svf_mc_c" (llvm:get-function-pointer "svf_mc_c_scheme"))
(bind-lib xtmaudio_dsp lpf_c [[float,float,float,float]*]*)
(bind-lib xtmaudio_dsp lpf_c_scheme [i8*,i8*,i8*]*)
(mk-ff "lpf_c" (llvm:get-function-pointer "lpf_c_scheme"))
(bind-lib xtmaudio_dsp lpf_mc_c [[float,i64,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp lpf_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "lpf_mc_c" (llvm:get-function-pointer "lpf_mc_c_scheme"))
(bind-lib xtmaudio_dsp lpf2_c [[float,float,float,float]*]*)
(bind-lib xtmaudio_dsp lpf2_c_scheme [i8*,i8*,i8*]*)
(mk-ff "lpf2_c" (llvm:get-function-pointer "lpf2_c_scheme"))
(bind-lib xtmaudio_dsp lpf2_mc_c [[float,i64,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp lpf2_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "lpf2_mc_c" (llvm:get-function-pointer "lpf2_mc_c_scheme"))
(bind-lib xtmaudio_dsp bpf_c [[float,float,float,float]*]*)
(bind-lib xtmaudio_dsp bpf_c_scheme [i8*,i8*,i8*]*)
(mk-ff "bpf_c" (llvm:get-function-pointer "bpf_c_scheme"))
(bind-lib xtmaudio_dsp bpf_mc_c [[float,i64,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp bpf_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "bpf_mc_c" (llvm:get-function-pointer "bpf_mc_c_scheme"))
(bind-lib xtmaudio_dsp hpf_c [[float,float,float,float]*]*)
(bind-lib xtmaudio_dsp hpf_c_scheme [i8*,i8*,i8*]*)
(mk-ff "hpf_c" (llvm:get-function-pointer "hpf_c_scheme"))
(bind-lib xtmaudio_dsp hpf_mc_c [[float,i64,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp hpf_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "hpf_mc_c" (llvm:get-function-pointer "hpf_mc_c_scheme"))
(bind-lib xtmaudio_dsp apf_c [[float,float,float,float]*]*)
(bind-lib xtmaudio_dsp apf_c_scheme [i8*,i8*,i8*]*)
(mk-ff "apf_c" (llvm:get-function-pointer "apf_c_scheme"))
(bind-lib xtmaudio_dsp notch_c [[float,float,float,float]*]*)
(bind-lib xtmaudio_dsp notch_c_scheme [i8*,i8*,i8*]*)
(mk-ff "notch_c" (llvm:get-function-pointer "notch_c_scheme"))
(bind-lib xtmaudio_dsp notch_mc_c [[float,i64,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp notch_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "notch_mc_c" (llvm:get-function-pointer "notch_mc_c_scheme"))
(bind-lib xtmaudio_dsp peak_c [[float,float,float,float]*]*)
(bind-lib xtmaudio_dsp peak_c_scheme [i8*,i8*,i8*]*)
(mk-ff "peak_c" (llvm:get-function-pointer "peak_c_scheme"))
(bind-lib xtmaudio_dsp peak_mc_c [[float,i64,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp peak_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "peak_mc_c" (llvm:get-function-pointer "peak_mc_c_scheme"))
(bind-lib xtmaudio_dsp bell_c [[float,float,float,float,float]*]*)
(bind-lib xtmaudio_dsp bell_c_scheme [i8*,i8*,i8*]*)
(mk-ff "bell_c" (llvm:get-function-pointer "bell_c_scheme"))
(bind-lib xtmaudio_dsp bell_mc_c [[float,i64,float,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp bell_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "bell_mc_c" (llvm:get-function-pointer "bell_mc_c_scheme"))
(bind-lib xtmaudio_dsp lshelf_c [[float,float,float,float,float]*]*)
(bind-lib xtmaudio_dsp lshelf_c_scheme [i8*,i8*,i8*]*)
(mk-ff "lshelf_c" (llvm:get-function-pointer "lshelf_c_scheme"))
(bind-lib xtmaudio_dsp lshelf_mc_c [[float,i64,float,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp lshelf_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "lshelf_mc_c" (llvm:get-function-pointer "lshelf_mc_c_scheme"))
(bind-lib xtmaudio_dsp hshelf_c [[float,float,float,float,float]*]*)
(bind-lib xtmaudio_dsp hshelf_c_scheme [i8*,i8*,i8*]*)
(mk-ff "hshelf_c" (llvm:get-function-pointer "hshelf_c_scheme"))
(bind-lib xtmaudio_dsp hshelf_mc_c [[float,i64,float,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp hshelf_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "hshelf_mc_c" (llvm:get-function-pointer "hshelf_mc_c_scheme"))
(bind-lib xtmaudio_dsp parametricEQ [[float,float,i64]*]*)
(bind-lib xtmaudio_dsp parametricEQ_scheme [i8*,i8*,i8*]*)
(mk-ff "parametricEQ" (llvm:get-function-pointer "parametricEQ_scheme"))
(bind-lib xtmaudio_dsp busEQ [[float,float,i64]*]*)
(bind-lib xtmaudio_dsp busEQ_scheme [i8*,i8*,i8*]*)
(mk-ff "busEQ" (llvm:get-function-pointer "busEQ_scheme"))
(register-lib-func xtmaudio_dsp set_peq_lmid_adhoc_W2Zsb2F0LGk4KixmbG9hdCxmbG9hdCxmbG9hdF0 [float,i8*,float,float,float]* 0 "" '(let ((set_peq_lmid_adhoc_77 (lambda (peq:i8* cutoff:float gain:float Q:float) (cset! (cast peq [void]*) lmidG gain float) (cset! (cast peq [void]*) lmidF cutoff float) (cset! (cast peq [void]*) lmidQ Q float)))) set_peq_lmid_adhoc_77))
(bind-poly set_peq_lmid set_peq_lmid_adhoc_W2Zsb2F0LGk4KixmbG9hdCxmbG9hdCxmbG9hdF0 "")
(register-lib-func xtmaudio_dsp set_peq_hmid_adhoc_W2Zsb2F0LGk4KixmbG9hdCxmbG9hdCxmbG9hdF0 [float,i8*,float,float,float]* 0 "" '(let ((set_peq_hmid_adhoc_78 (lambda (peq:i8* cutoff:float gain:float Q:float) (cset! (cast peq [void]*) hmidG gain float) (cset! (cast peq [void]*) hmidF cutoff float) (cset! (cast peq [void]*) hmidQ Q float)))) set_peq_hmid_adhoc_78))
(bind-poly set_peq_hmid set_peq_hmid_adhoc_W2Zsb2F0LGk4KixmbG9hdCxmbG9hdCxmbG9hdF0 "")
(register-lib-func xtmaudio_dsp set_peq_hshelf_adhoc_W2Zsb2F0LGk4KixmbG9hdCxmbG9hdCxmbG9hdF0 [float,i8*,float,float,float]* 0 "" '(let ((set_peq_hshelf_adhoc_79 (lambda (peq:i8* cutoff:float gain:float Q:float) (cset! (cast peq [void]*) hshelfG gain float) (cset! (cast peq [void]*) hshelfF cutoff float) (cset! (cast peq [void]*) hshelfQ Q float)))) set_peq_hshelf_adhoc_79))
(bind-poly set_peq_hshelf set_peq_hshelf_adhoc_W2Zsb2F0LGk4KixmbG9hdCxmbG9hdCxmbG9hdF0 "")
(register-lib-func xtmaudio_dsp set_peq_lshelf_adhoc_W2Zsb2F0LGk4KixmbG9hdCxmbG9hdCxmbG9hdF0 [float,i8*,float,float,float]* 0 "" '(let ((set_peq_lshelf_adhoc_80 (lambda (peq:i8* cutoff:float gain:float Q:float) (cset! (cast peq [void]*) lshelfG gain float) (cset! (cast peq [void]*) lshelfF cutoff float) (cset! (cast peq [void]*) lshelfQ Q float)))) set_peq_lshelf_adhoc_80))
(bind-poly set_peq_lshelf set_peq_lshelf_adhoc_W2Zsb2F0LGk4KixmbG9hdCxmbG9hdCxmbG9hdF0 "")
(bind-lib xtmaudio_dsp skf_c [[float,float,float,float]*]*)
(bind-lib xtmaudio_dsp skf_c_scheme [i8*,i8*,i8*]*)
(mk-ff "skf_c" (llvm:get-function-pointer "skf_c_scheme"))
(bind-lib xtmaudio_dsp skf_mc_c [[float,i64,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp skf_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "skf_mc_c" (llvm:get-function-pointer "skf_mc_c_scheme"))
(bind-lib xtmaudio_dsp fade_c [[float,float,float,float]*]*)
(bind-lib xtmaudio_dsp fade_c_scheme [i8*,i8*,i8*]*)
(mk-ff "fade_c" (llvm:get-function-pointer "fade_c_scheme"))
(bind-lib xtmaudio_dsp fade_mc_c [[float,i64,float,float,float]*]*)
(bind-lib xtmaudio_dsp fade_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "fade_mc_c" (llvm:get-function-pointer "fade_mc_c_scheme"))
(bind-lib xtmaudio_dsp delay_c [[float,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp delay_c_scheme [i8*,i8*,i8*]*)
(mk-ff "delay_c" (llvm:get-function-pointer "delay_c_scheme"))
(bind-lib xtmaudio_dsp delay_mc_c [[float,i64,float,float,float]*,i64,i64]*)
(bind-lib xtmaudio_dsp delay_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "delay_mc_c" (llvm:get-function-pointer "delay_mc_c_scheme"))
(bind-lib xtmaudio_dsp delay_st_c [[float,i64,float,float,float]*,i64,i64]*)
(bind-lib xtmaudio_dsp delay_st_c_scheme [i8*,i8*,i8*]*)
(mk-ff "delay_st_c" (llvm:get-function-pointer "delay_st_c_scheme"))
(bind-lib xtmaudio_dsp delay_apf_c [[float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp delay_apf_c_scheme [i8*,i8*,i8*]*)
(mk-ff "delay_apf_c" (llvm:get-function-pointer "delay_apf_c_scheme"))
(bind-lib xtmaudio_dsp comb_c [[float,float,float,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp comb_c_scheme [i8*,i8*,i8*]*)
(mk-ff "comb_c" (llvm:get-function-pointer "comb_c_scheme"))
(bind-lib xtmaudio_dsp comb_mc_c [[float,i64,float,float,float,float,float]*,i64,i64]*)
(bind-lib xtmaudio_dsp comb_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "comb_mc_c" (llvm:get-function-pointer "comb_mc_c_scheme"))
(bind-lib xtmaudio_dsp comb_apf_c [[float,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp comb_apf_c_scheme [i8*,i8*,i8*]*)
(mk-ff "comb_apf_c" (llvm:get-function-pointer "comb_apf_c_scheme"))
(bind-lib xtmaudio_dsp flanger_c [[float,float,float,float,float,float,float,float]*]*)
(bind-lib xtmaudio_dsp flanger_c_scheme [i8*,i8*,i8*]*)
(mk-ff "flanger_c" (llvm:get-function-pointer "flanger_c_scheme"))
(bind-lib xtmaudio_dsp flanger_st_c [[float,i64,float,float,float,float,float,float,float]*]*)
(bind-lib xtmaudio_dsp flanger_st_c_scheme [i8*,i8*,i8*]*)
(mk-ff "flanger_st_c" (llvm:get-function-pointer "flanger_st_c_scheme"))
(bind-lib xtmaudio_dsp chorus_c [[float,float,float,float,float]*,float]*)
(bind-lib xtmaudio_dsp chorus_c_scheme [i8*,i8*,i8*]*)
(mk-ff "chorus_c" (llvm:get-function-pointer "chorus_c_scheme"))
(bind-lib xtmaudio_dsp chorus_mc_c [[float,i64,float,float,float,float]*,i64,float]*)
(bind-lib xtmaudio_dsp chorus_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "chorus_mc_c" (llvm:get-function-pointer "chorus_mc_c_scheme"))
(bind-lib xtmaudio_dsp tap_delay_c [[float,float]*,i64,i64]*)
(bind-lib xtmaudio_dsp tap_delay_c_scheme [i8*,i8*,i8*]*)
(mk-ff "tap_delay_c" (llvm:get-function-pointer "tap_delay_c_scheme"))
(bind-lib xtmaudio_dsp tap_delay_mc_c [[float,i64,float]*,i64,i64,i64]*)
(bind-lib xtmaudio_dsp tap_delay_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "tap_delay_mc_c" (llvm:get-function-pointer "tap_delay_mc_c_scheme"))
(register-lib-func xtmaudio_dsp comb_fb_from_rtsixty_adhoc_W2Zsb2F0LGZsb2F0LGZsb2F0XQ [float,float,float]* 0 "" '(let ((comb_fb_from_rtsixty_adhoc_98 (let ((fexponent 0.00000000000000000000) (rt 0.00000000000000000000)) (lambda (rt60 delay) (set! fexponent (* -3.0000000000000000000 delay (/ 1.0000000000000000000 SRs))) (set! rt (* rt60 0.0010000000000000000208)) (pow 10.000000000000000000 (/ fexponent rt)))))) comb_fb_from_rtsixty_adhoc_98))
(bind-poly comb_fb_from_rtsixty comb_fb_from_rtsixty_adhoc_W2Zsb2F0LGZsb2F0LGZsb2F0XQ "")
(bind-lib xtmaudio_dsp reverb_c [[float,i64,float,float,float,float,float]*]*)
(bind-lib xtmaudio_dsp reverb_c_scheme [i8*,i8*,i8*]*)
(mk-ff "reverb_c" (llvm:get-function-pointer "reverb_c_scheme"))
(bind-lib xtmaudio_dsp reverb_st_c [[float,i64,float,float,float,float,float]*]*)
(bind-lib xtmaudio_dsp reverb_st_c_scheme [i8*,i8*,i8*]*)
(mk-ff "reverb_st_c" (llvm:get-function-pointer "reverb_st_c_scheme"))
(bind-lib xtmaudio_dsp crusher_c [[float,float,float]*]*)
(bind-lib xtmaudio_dsp crusher_c_scheme [i8*,i8*,i8*]*)
(mk-ff "crusher_c" (llvm:get-function-pointer "crusher_c_scheme"))
(bind-lib xtmaudio_dsp hold3_c [[float,float,float]*]*)
(bind-lib xtmaudio_dsp hold3_c_scheme [i8*,i8*,i8*]*)
(mk-ff "hold3_c" (llvm:get-function-pointer "hold3_c_scheme"))
(bind-lib xtmaudio_dsp hold_mc_c [[float,i64,float,float]*,i64]*)
(bind-lib xtmaudio_dsp hold_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "hold_mc_c" (llvm:get-function-pointer "hold_mc_c_scheme"))
(bind-lib xtmaudio_dsp crush [float,float,float]*)
(bind-lib xtmaudio_dsp crush_scheme [i8*,i8*,i8*]*)
(mk-ff "crush" (llvm:get-function-pointer "crush_scheme"))
(bind-lib xtmaudio_dsp distort_c [[float,float]*,float]*)
(bind-lib xtmaudio_dsp distort_c_scheme [i8*,i8*,i8*]*)
(mk-ff "distort_c" (llvm:get-function-pointer "distort_c_scheme"))
(bind-lib xtmaudio_dsp panner_c [[float,i64,float,float]*,float]*)
(bind-lib xtmaudio_dsp panner_c_scheme [i8*,i8*,i8*]*)
(mk-ff "panner_c" (llvm:get-function-pointer "panner_c_scheme"))
(bind-lib xtmaudio_dsp mix2 [float,i64,float,float,float]*)
(bind-lib xtmaudio_dsp mix2_scheme [i8*,i8*,i8*]*)
(mk-ff "mix2" (llvm:get-function-pointer "mix2_scheme"))
(bind-lib xtmaudio_dsp mix2_c [[float,i64,float,float,float]*]*)
(bind-lib xtmaudio_dsp mix2_c_scheme [i8*,i8*,i8*]*)
(mk-ff "mix2_c" (llvm:get-function-pointer "mix2_c_scheme"))
(bind-lib xtmaudio_dsp mix4 [float,i64,float,float,float,float,float]*)
(bind-lib xtmaudio_dsp mix4_scheme [i8*,i8*,i8*]*)
(mk-ff "mix4" (llvm:get-function-pointer "mix4_scheme"))
(bind-lib xtmaudio_dsp mix4_c [[float,i64,float,float,float,float,float]*]*)
(bind-lib xtmaudio_dsp mix4_c_scheme [i8*,i8*,i8*]*)
(mk-ff "mix4_c" (llvm:get-function-pointer "mix4_c_scheme"))
(bind-lib xtmaudio_dsp mix8 [float,i64,float,float,float,float,float,float,float,float,float]*)
(bind-lib xtmaudio_dsp mix8_scheme [i8*,i8*,i8*]*)
(mk-ff "mix8" (llvm:get-function-pointer "mix8_scheme"))
(bind-lib xtmaudio_dsp mixer_c [[float,float*,i64,float]*,i64]*)
(bind-lib xtmaudio_dsp mixer_c_scheme [i8*,i8*,i8*]*)
(mk-ff "mixer_c" (llvm:get-function-pointer "mixer_c_scheme"))
(bind-lib xtmaudio_dsp hermite_interp [float,float,float,float,float,float]*)
(bind-lib xtmaudio_dsp hermite_interp_scheme [i8*,i8*,i8*]*)
(mk-ff "hermite_interp" (llvm:get-function-pointer "hermite_interp_scheme"))
(bind-lib xtmaudio_dsp granulator_c [[float,i64,i64,float]*,i64]*)
(bind-lib xtmaudio_dsp granulator_c_scheme [i8*,i8*,i8*]*)
(mk-ff "granulator_c" (llvm:get-function-pointer "granulator_c_scheme"))
(bind-lib xtmaudio_dsp granulator_hermite_c [[float,i64,i64,float]*,i64]*)
(bind-lib xtmaudio_dsp granulator_hermite_c_scheme [i8*,i8*,i8*]*)
(mk-ff "granulator_hermite_c" (llvm:get-function-pointer "granulator_hermite_c_scheme"))
(bind-lib xtmaudio_dsp lpfbq_c [[float,float,float,float]*]*)
(bind-lib xtmaudio_dsp lpfbq_c_scheme [i8*,i8*,i8*]*)
(mk-ff "lpfbq_c" (llvm:get-function-pointer "lpfbq_c_scheme"))
(bind-lib xtmaudio_dsp lpfbq_mc_c [[float,i64,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp lpfbq_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "lpfbq_mc_c" (llvm:get-function-pointer "lpfbq_mc_c_scheme"))
(bind-lib xtmaudio_dsp hpfbq_c [[float,float,float,float]*]*)
(bind-lib xtmaudio_dsp hpfbq_c_scheme [i8*,i8*,i8*]*)
(mk-ff "hpfbq_c" (llvm:get-function-pointer "hpfbq_c_scheme"))
(bind-lib xtmaudio_dsp hpfbq_mc_c [[float,i64,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp hpfbq_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "hpfbq_mc_c" (llvm:get-function-pointer "hpfbq_mc_c_scheme"))
(bind-lib xtmaudio_dsp bpfbq_c [[float,float,float,float]*]*)
(bind-lib xtmaudio_dsp bpfbq_c_scheme [i8*,i8*,i8*]*)
(mk-ff "bpfbq_c" (llvm:get-function-pointer "bpfbq_c_scheme"))
(bind-lib xtmaudio_dsp bpfbq_mc_c [[float,i64,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp bpfbq_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "bpfbq_mc_c" (llvm:get-function-pointer "bpfbq_mc_c_scheme"))
(bind-lib xtmaudio_dsp notchbq_c [[float,float,float,float]*]*)
(bind-lib xtmaudio_dsp notchbq_c_scheme [i8*,i8*,i8*]*)
(mk-ff "notchbq_c" (llvm:get-function-pointer "notchbq_c_scheme"))
(bind-lib xtmaudio_dsp notchbq_mc_c [[float,i64,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp notchbq_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "notchbq_mc_c" (llvm:get-function-pointer "notchbq_mc_c_scheme"))
(bind-lib xtmaudio_dsp hilbert_c [[float,float]*,i64]*)
(bind-lib xtmaudio_dsp hilbert_c_scheme [i8*,i8*,i8*]*)
(mk-ff "hilbert_c" (llvm:get-function-pointer "hilbert_c_scheme"))
(bind-lib xtmaudio_dsp hilb_env_follow_c [[float,float]*,i64]*)
(bind-lib xtmaudio_dsp hilb_env_follow_c_scheme [i8*,i8*,i8*]*)
(mk-ff "hilb_env_follow_c" (llvm:get-function-pointer "hilb_env_follow_c_scheme"))
(bind-lib xtmaudio_dsp env_follow_c [[float,float]*,float]*)
(bind-lib xtmaudio_dsp env_follow_c_scheme [i8*,i8*,i8*]*)
(mk-ff "env_follow_c" (llvm:get-function-pointer "env_follow_c_scheme"))
(bind-lib xtmaudio_dsp atkrel_env_follow_c [[float,float]*,float,float]*)
(bind-lib xtmaudio_dsp atkrel_env_follow_c_scheme [i8*,i8*,i8*]*)
(mk-ff "atkrel_env_follow_c" (llvm:get-function-pointer "atkrel_env_follow_c_scheme"))
(bind-lib xtmaudio_dsp vcf_old_c [[float,float,float,float]*]*)
(bind-lib xtmaudio_dsp vcf_old_c_scheme [i8*,i8*,i8*]*)
(mk-ff "vcf_old_c" (llvm:get-function-pointer "vcf_old_c_scheme"))
(bind-lib xtmaudio_dsp vcf1_c [[float,float,float,float]*]*)
(bind-lib xtmaudio_dsp vcf1_c_scheme [i8*,i8*,i8*]*)
(mk-ff "vcf1_c" (llvm:get-function-pointer "vcf1_c_scheme"))
(bind-lib xtmaudio_dsp vcf_c [[float,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp vcf_c_scheme [i8*,i8*,i8*]*)
(mk-ff "vcf_c" (llvm:get-function-pointer "vcf_c_scheme"))
(bind-lib xtmaudio_dsp vcf3_c [[float,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp vcf3_c_scheme [i8*,i8*,i8*]*)
(mk-ff "vcf3_c" (llvm:get-function-pointer "vcf3_c_scheme"))
(bind-lib xtmaudio_dsp vcf_mc_c [[float,i64,float,float,float]*,i64,i64]*)
(bind-lib xtmaudio_dsp vcf_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "vcf_mc_c" (llvm:get-function-pointer "vcf_mc_c_scheme"))
(bind-lib xtmaudio_dsp overdrive_c [[float,float,float]*]*)
(bind-lib xtmaudio_dsp overdrive_c_scheme [i8*,i8*,i8*]*)
(mk-ff "overdrive_c" (llvm:get-function-pointer "overdrive_c_scheme"))
(bind-lib xtmaudio_dsp saturation_c [[float,float,float,float]*]*)
(bind-lib xtmaudio_dsp saturation_c_scheme [i8*,i8*,i8*]*)
(mk-ff "saturation_c" (llvm:get-function-pointer "saturation_c_scheme"))
(bind-lib xtmaudio_dsp ringmod_c [[float,float,float,float]*]*)
(bind-lib xtmaudio_dsp ringmod_c_scheme [i8*,i8*,i8*]*)
(mk-ff "ringmod_c" (llvm:get-function-pointer "ringmod_c_scheme"))
(bind-lib xtmaudio_dsp hann_c [[float,i64]*]*)
(bind-lib xtmaudio_dsp hann_c_scheme [i8*,i8*,i8*]*)
(mk-ff "hann_c" (llvm:get-function-pointer "hann_c_scheme"))
(bind-lib xtmaudio_dsp hann_mc_c [[float,i64,i64]*]*)
(bind-lib xtmaudio_dsp hann_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "hann_mc_c" (llvm:get-function-pointer "hann_mc_c_scheme"))
(bind-lib xtmaudio_dsp hann_t_c [[float,i64,i64]*,i64]*)
(bind-lib xtmaudio_dsp hann_t_c_scheme [i8*,i8*,i8*]*)
(mk-ff "hann_t_c" (llvm:get-function-pointer "hann_t_c_scheme"))
(bind-lib xtmaudio_dsp hann_t_mc_c [[float,i64,i64,i64]*,i64]*)
(bind-lib xtmaudio_dsp hann_t_mc_c_scheme [i8*,i8*,i8*]*)
(mk-ff "hann_t_mc_c" (llvm:get-function-pointer "hann_t_mc_c_scheme"))
(bind-lib xtmaudio_dsp hann_e_c [[float,i64,i64,i64]*]*)
(bind-lib xtmaudio_dsp hann_e_c_scheme [i8*,i8*,i8*]*)
(mk-ff "hann_e_c" (llvm:get-function-pointer "hann_e_c_scheme"))
(register-lib-func xtmaudio_dsp linear_c_adhoc_W1tmbG9hdCxmbG9hdF0qLGZsb2F0LGZsb2F0LGZsb2F0XQ [[float,float]*,float,float,float]* 0 "" '(let ((linear_c_adhoc_141 (let ((time 0.00000000000000000000)) (lambda (start:SAMPLE end:SAMPLE dur:SAMPLE) (let* ((m (/ (- end start) dur)) (c (- end (* m dur)))) (lambda (incr) (set! time (+ time incr)) (+ (* m time) c))))))) linear_c_adhoc_141))
(bind-poly linear_c linear_c_adhoc_W1tmbG9hdCxmbG9hdF0qLGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmaudio_dsp linear_mc_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXRdKixmbG9hdCxmbG9hdCxmbG9hdF0 [[float,i64,float]*,float,float,float]* 0 "" '(let ((linear_mc_c_adhoc_142 (let ((time 0.00000000000000000000)) (lambda (start:SAMPLE end:SAMPLE dur:SAMPLE) (let* ((m (/ (- end start) dur)) (c (- end (* m dur)))) (lambda (chan incr) (if (= chan 0) (set! time (+ time incr))) (+ (* m time) c))))))) linear_mc_c_adhoc_142))
(bind-poly linear_mc_c linear_mc_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXRdKixmbG9hdCxmbG9hdCxmbG9hdF0 "")
(bind-lib xtmaudio_dsp line_c [[float,float]*,float,float,float,float]*)
(bind-lib xtmaudio_dsp line_c_scheme [i8*,i8*,i8*]*)
(mk-ff "line_c" (llvm:get-function-pointer "line_c_scheme"))
(bind-lib xtmaudio_dsp envelope_segments [[float,float]**,float*,i64]*)
(bind-lib xtmaudio_dsp envelope_segments_scheme [i8*,i8*,i8*]*)
(mk-ff "envelope_segments" (llvm:get-function-pointer "envelope_segments_scheme"))
(bind-lib xtmaudio_dsp envelope_c [[float,float]*,float*,i64]*)
(bind-lib xtmaudio_dsp envelope_c_scheme [i8*,i8*,i8*]*)
(mk-ff "envelope_c" (llvm:get-function-pointer "envelope_c_scheme"))
(bind-lib xtmaudio_dsp pan_c [[float,i64,float,float,float]*,i64]*)
(bind-lib xtmaudio_dsp pan_c_scheme [i8*,i8*,i8*]*)
(mk-ff "pan_c" (llvm:get-function-pointer "pan_c_scheme"))
(register-lib-func xtmaudio_dsp explin_adhoc_W2Zsb2F0LGZsb2F0LGZsb2F0XQ [float,float,float]* 0 "" '(let ((explin_adhoc_147 (let ((time 0.0:f) (Ef (dtof E)) (scale (/ 1.0000000000000000000 (- Ef 1.0000000000000000000)))) (lambda (t:float x:float) (if (< x 0.00000000000000000000) (set! x (+ 1.0000000000000000000 x)) (if (< (fabs x) 0.00010000000000000000479) (set! x 1.0000000000000000000) (set! x (/ 1.0000000000000000000 (- 1.0000000000000000000 x))))) (set! time (+ 1.0000000000000000000 (* t (- Ef 1.0000000000000000000)))) (* (+ -1.0000000000000000000 (exp (pow (log time) x))) scale))))) explin_adhoc_147))
(bind-poly explin explin_adhoc_W2Zsb2F0LGZsb2F0LGZsb2F0XQ "")
(bind-lib xtmaudio_dsp ad_c [[float,i64,float,float,float,float,float]*]*)
(bind-lib xtmaudio_dsp ad_c_scheme [i8*,i8*,i8*]*)
(mk-ff "ad_c" (llvm:get-function-pointer "ad_c_scheme"))
(bind-lib xtmaudio_dsp adsr_c [[float,i64,float,float,float,float,float]*]*)
(bind-lib xtmaudio_dsp adsr_c_scheme [i8*,i8*,i8*]*)
(mk-ff "adsr_c" (llvm:get-function-pointer "adsr_c_scheme"))
(bind-lib xtmaudio_dsp dadsr_c [[float,i64,float,float,float,float,float,float]*]*)
(bind-lib xtmaudio_dsp dadsr_c_scheme [i8*,i8*,i8*]*)
(mk-ff "dadsr_c" (llvm:get-function-pointer "dadsr_c_scheme"))
(bind-lib xtmaudio_dsp retrigger_adsr [void,[float,i64,float,float,float,float,float]*]*)
(bind-lib xtmaudio_dsp retrigger_adsr_scheme [i8*,i8*,i8*]*)
(mk-ff "retrigger_adsr" (llvm:get-function-pointer "retrigger_adsr_scheme"))
(bind-lib xtmaudio_dsp retrigger_dadsr [void,[float,i64,float,float,float,float,float,float]*]*)
(bind-lib xtmaudio_dsp retrigger_dadsr_scheme [i8*,i8*,i8*]*)
(mk-ff "retrigger_dadsr" (llvm:get-function-pointer "retrigger_dadsr_scheme"))
(bind-lib xtmaudio_dsp adsr_ratio_c [[float,i64,float,float,float,float,float,float,float]*]*)
(bind-lib xtmaudio_dsp adsr_ratio_c_scheme [i8*,i8*,i8*]*)
(mk-ff "adsr_ratio_c" (llvm:get-function-pointer "adsr_ratio_c_scheme"))
(bind-lib xtmaudio_dsp adsr_accum_c [[float,i64,i64]*,i64,i64,i64,i64,i64,float,float]*)
(bind-lib xtmaudio_dsp adsr_accum_c_scheme [i8*,i8*,i8*]*)
(mk-ff "adsr_accum_c" (llvm:get-function-pointer "adsr_accum_c_scheme"))
(bind-lib xtmaudio_dsp ahdsr_accum_c [[float,i64,i64]*,i64,i64,i64,i64,i64,i64,float,float]*)
(bind-lib xtmaudio_dsp ahdsr_accum_c_scheme [i8*,i8*,i8*]*)
(mk-ff "ahdsr_accum_c" (llvm:get-function-pointer "ahdsr_accum_c_scheme"))
(bind-lib xtmaudio_dsp recorder [[float,float]*,AudioBuffer*]*)
(bind-lib xtmaudio_dsp recorder_scheme [i8*,i8*,i8*]*)
(mk-ff "recorder" (llvm:get-function-pointer "recorder_scheme"))
(print-with-colors 'green 'default #t (print "done"))(print " in" (- (clock:clock) *xtmlib-audio_dsp-loaded-timer*) "seconds\n")
(define *xtmlib-audio_dsp-loaded-timer* (clock:clock))
(set! *impc:compiler:message:level* *impc:aot:prev-compiler-message-level*)
