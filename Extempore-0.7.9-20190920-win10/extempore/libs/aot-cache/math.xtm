(sys:load "libs/base/base.xtm" 'quiet)
(sys:load-preload-check 'math)
(define *xtmlib-math-loaded* #t)
(define *xtmlib-math-loaded-timer* (clock:clock))
(set! *impc:aot:prev-compiler-message-level* *impc:compiler:message:level*)
(set! *impc:compiler:message:level* 'low)

(print "Loading ")
(print-with-colors 'blue 'default #t (print 'xtmmath))
(print " library... ")
(llvm:compile-ir (sys:slurp-file "libs/aot-cache/xtmmath.ll"));; flush the JIT-compilation queue, so we only get this file's code in the module
(impc:compiler:flush-jit-compilation-queue)
(register-lib-func xtmmath vsum_adhoc_W2kzMixpMzIqLGk2NF0 [i32,i32*,i64]* 0 "" '(let ((vsum_adhoc_1 (lambda (buf:i32* len:i64) (let ((tot:i32 0) (i 0)) (if (> len 3) (let ((chunks (/ len 4)) (vbuf:/4,i32/* (cast buf)) (vtot:/4,i32/* (salloc))) (vfill! vtot 0 0 0 0) (let ((totref (pref vtot 0))) (dotimes (i chunks) (set! totref (+ totref (pref-ptr vbuf i)))) (set! tot (+ (vref totref 0) (vref totref 1) (vref totref 2) (vref totref 3)))) (set! len (& len 3)) (set! buf (pref-ptr buf (* i 4))))) (dotimes (i len) (set! tot (+ tot (pref buf i)))) tot)))) vsum_adhoc_1))
(bind-poly vsum vsum_adhoc_W2kzMixpMzIqLGk2NF0 "")
(register-lib-func xtmmath vsum_adhoc_W2k2NCxpNjQqLGk2NF0 [i64,i64*,i64]* 0 "" '(let ((vsum_adhoc_2 (lambda (buf:i64* len:i64) (let ((tot 0) (i 0)) (if (> len 1) (let ((chunks (/ len 2)) (vbuf:/2,i64/* (cast buf)) (vtot:/2,i64/* (salloc))) (vfill! vtot 0 0) (let ((totref (pref vtot 0))) (dotimes (i chunks) (set! totref (+ totref (pref-ptr vbuf i)))) (set! tot (+ (vref totref 0) (vref totref 1)))) (set! len (& len 1)) (set! buf (pref-ptr buf (* i 2))))) (dotimes (i len) (set! tot (+ tot (pref buf i)))) tot)))) vsum_adhoc_2))
(bind-poly vsum vsum_adhoc_W2k2NCxpNjQqLGk2NF0 "")
(register-lib-func xtmmath vsum_adhoc_W2Zsb2F0LGZsb2F0KixpNjRd [float,float*,i64]* 0 "" '(let ((vsum_adhoc_3 (lambda (buf:float* len:i64) (let ((tot:float 0.00000000000000000000) (i 0)) (if (> len 3) (let ((chunks (/ len 4)) (vbuf:/4,float/* (cast buf)) (vtot:/4,float/* (salloc))) (vfill! vtot 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000) (let ((totref (pref vtot 0))) (dotimes (i chunks) (set! totref (+ totref (pref-ptr vbuf i)))) (set! tot (+ (vref totref 0) (vref totref 1) (vref totref 2) (vref totref 3)))) (set! len (& len 3)) (set! buf (pref-ptr buf (* i 4))))) (dotimes (i len) (set! tot (+ tot (pref buf i)))) tot)))) vsum_adhoc_3))
(bind-poly vsum vsum_adhoc_W2Zsb2F0LGZsb2F0KixpNjRd "")
(register-lib-func xtmmath vsum_adhoc_W2RvdWJsZSxkb3VibGUqLGk2NF0 [double,double*,i64]* 0 "" '(let ((vsum_adhoc_4 (lambda (buf:double* len:i64) (let ((tot:double 0.00000000000000000000) (i 0)) (if (> len 1) (let ((chunks (/ len 2)) (vbuf:/2,double/* (cast buf)) (vtot:/2,double/* (salloc))) (vfill! vtot 0.00000000000000000000 0.00000000000000000000) (let ((totref (pref vtot 0))) (dotimes (i chunks) (set! totref (+ totref (pref-ptr vbuf i)))) (set! tot (+ (vref totref 0) (vref totref 1)))) (set! len (& len 1)) (set! buf (pref-ptr buf (* i 2))))) (dotimes (i len) (set! tot (+ tot (pref buf i)))) tot)))) vsum_adhoc_4))
(bind-poly vsum vsum_adhoc_W2RvdWJsZSxkb3VibGUqLGk2NF0 "")
(register-lib-func xtmmath vmean_adhoc_W2RvdWJsZSxpMzIqLGk2NF0 [double,i32*,i64]* 0 "" '(let ((vmean_adhoc_5 (lambda (buf:i32* len:i64) (/ (i32tod (vsum buf len)) (convert len))))) vmean_adhoc_5))
(bind-poly vmean vmean_adhoc_W2RvdWJsZSxpMzIqLGk2NF0 "")
(register-lib-func xtmmath vmean_adhoc_W2RvdWJsZSxpNjQqLGk2NF0 [double,i64*,i64]* 0 "" '(let ((vmean_adhoc_6 (lambda (buf:i64* len:i64) (/ (i64tod (vsum buf len)) (convert len))))) vmean_adhoc_6))
(bind-poly vmean vmean_adhoc_W2RvdWJsZSxpNjQqLGk2NF0 "")
(register-lib-func xtmmath vmean_adhoc_W2Zsb2F0LGZsb2F0KixpNjRd [float,float*,i64]* 0 "" '(let ((vmean_adhoc_7 (lambda (buf:float* len:i64) (/ (vsum buf len) (convert len))))) vmean_adhoc_7))
(bind-poly vmean vmean_adhoc_W2Zsb2F0LGZsb2F0KixpNjRd "")
(register-lib-func xtmmath vmean_adhoc_W2RvdWJsZSxkb3VibGUqLGk2NF0 [double,double*,i64]* 0 "" '(let ((vmean_adhoc_8 (lambda (buf:double* len:i64) (/ (vsum buf len) (convert len))))) vmean_adhoc_8))
(bind-poly vmean vmean_adhoc_W2RvdWJsZSxkb3VibGUqLGk2NF0 "")
(register-lib-func xtmmath vmin_adhoc_W2kzMixpMzIqLGk2NF0 [i32,i32*,i64]* 0 "" '(let ((vmin_adhoc_9 (lambda (buf:i32* len:i64) (let ((min_val (pref buf 0)) (i 0)) (dotimes (i len) (if (< (pref buf i) min_val) (set! min_val (pref buf i)))) min_val)))) vmin_adhoc_9))
(bind-poly vmin vmin_adhoc_W2kzMixpMzIqLGk2NF0 "")
(register-lib-func xtmmath vmin_adhoc_W2k2NCxpNjQqLGk2NF0 [i64,i64*,i64]* 0 "" '(let ((vmin_adhoc_10 (lambda (buf:i64* len:i64) (let ((min_val (pref buf 0)) (i 0)) (dotimes (i len) (if (< (pref buf i) min_val) (set! min_val (pref buf i)))) min_val)))) vmin_adhoc_10))
(bind-poly vmin vmin_adhoc_W2k2NCxpNjQqLGk2NF0 "")
(register-lib-func xtmmath vmin_adhoc_W2Zsb2F0LGZsb2F0KixpNjRd [float,float*,i64]* 0 "" '(let ((vmin_adhoc_11 (lambda (buf:float* len:i64) (let ((min_val (pref buf 0)) (i 0)) (dotimes (i len) (if (< (pref buf i) min_val) (set! min_val (pref buf i)))) min_val)))) vmin_adhoc_11))
(bind-poly vmin vmin_adhoc_W2Zsb2F0LGZsb2F0KixpNjRd "")
(register-lib-func xtmmath vmin_adhoc_W2RvdWJsZSxkb3VibGUqLGk2NF0 [double,double*,i64]* 0 "" '(let ((vmin_adhoc_12 (lambda (buf:double* len:i64) (let ((min_val (pref buf 0)) (i 0)) (dotimes (i len) (if (< (pref buf i) min_val) (set! min_val (pref buf i)))) min_val)))) vmin_adhoc_12))
(bind-poly vmin vmin_adhoc_W2RvdWJsZSxkb3VibGUqLGk2NF0 "")
(register-lib-func xtmmath vmax_adhoc_W2kzMixpMzIqLGk2NF0 [i32,i32*,i64]* 0 "" '(let ((vmax_adhoc_13 (lambda (buf:i32* len:i64) (let ((max_val (pref buf 0)) (i 0)) (dotimes (i len) (if (> (pref buf i) max_val) (set! max_val (pref buf i)))) max_val)))) vmax_adhoc_13))
(bind-poly vmax vmax_adhoc_W2kzMixpMzIqLGk2NF0 "")
(register-lib-func xtmmath vmax_adhoc_W2k2NCxpNjQqLGk2NF0 [i64,i64*,i64]* 0 "" '(let ((vmax_adhoc_14 (lambda (buf:i64* len:i64) (let ((max_val (pref buf 0)) (i 0)) (dotimes (i len) (if (> (pref buf i) max_val) (set! max_val (pref buf i)))) max_val)))) vmax_adhoc_14))
(bind-poly vmax vmax_adhoc_W2k2NCxpNjQqLGk2NF0 "")
(register-lib-func xtmmath vmax_adhoc_W2Zsb2F0LGZsb2F0KixpNjRd [float,float*,i64]* 0 "" '(let ((vmax_adhoc_15 (lambda (buf:float* len:i64) (let ((max_val (pref buf 0)) (i 0)) (dotimes (i len) (if (> (pref buf i) max_val) (set! max_val (pref buf i)))) max_val)))) vmax_adhoc_15))
(bind-poly vmax vmax_adhoc_W2Zsb2F0LGZsb2F0KixpNjRd "")
(register-lib-func xtmmath vmax_adhoc_W2RvdWJsZSxkb3VibGUqLGk2NF0 [double,double*,i64]* 0 "" '(let ((vmax_adhoc_16 (lambda (buf:double* len:i64) (let ((max_val (pref buf 0)) (i 0)) (dotimes (i len) (if (> (pref buf i) max_val) (set! max_val (pref buf i)))) max_val)))) vmax_adhoc_16))
(bind-poly vmax vmax_adhoc_W2RvdWJsZSxkb3VibGUqLGk2NF0 "")
(register-lib-func xtmmath vprint_adhoc_W3ZvaWQsaTMyKixpNjQsaTY0XQ [void,i32*,i64,i64]* 0 "print a packed i32* buffer" '(let ((vprint_adhoc_17 (lambda (buf:i32* len ncols) (doloop (i len) (printf "buf[%. 3lld] = %. 6d " i (pref buf i)) (if (= (% i ncols) (- ncols 1)) (println))) (println)))) vprint_adhoc_17))
(bind-poly vprint vprint_adhoc_W3ZvaWQsaTMyKixpNjQsaTY0XQ "")
(register-lib-func xtmmath vprint_adhoc_W3ZvaWQsaTMyKixpNjRd [void,i32*,i64]* 0 "print a packed i32* buffer" '(let ((vprint_adhoc_18 (lambda (buf len) (vprint:[void,i32*,i64,i64]* buf len 1)))) vprint_adhoc_18))
(bind-poly vprint vprint_adhoc_W3ZvaWQsaTMyKixpNjRd "")
(register-lib-func xtmmath vprint_adhoc_W3ZvaWQsaTY0KixpNjQsaTY0XQ [void,i64*,i64,i64]* 0 "print a packed i64* buffer" '(let ((vprint_adhoc_19 (lambda (buf:i64* len ncols) (doloop (i len) (printf "buf[%. 3lld] = %. 6lld " i (pref buf i)) (if (= (% i ncols) (- ncols 1)) (println))) (println)))) vprint_adhoc_19))
(bind-poly vprint vprint_adhoc_W3ZvaWQsaTY0KixpNjQsaTY0XQ "")
(register-lib-func xtmmath vprint_adhoc_W3ZvaWQsaTY0KixpNjRd [void,i64*,i64]* 0 "print a packed i64* buffer" '(let ((vprint_adhoc_20 (lambda (buf len) (vprint:[void,i64*,i64,i64]* buf len 1)))) vprint_adhoc_20))
(bind-poly vprint vprint_adhoc_W3ZvaWQsaTY0KixpNjRd "")
(register-lib-func xtmmath vprint_adhoc_W3ZvaWQsZmxvYXQqLGk2NCxpNjRd [void,float*,i64,i64]* 0 "print a packed float* buffer" '(let ((vprint_adhoc_21 (lambda (buf:float* len ncols) (doloop (i len) (printf "buf[%. 3lld] = %.4f " i (convert (pref buf i) double)) (if (= (% i ncols) (- ncols 1)) (println))) (println)))) vprint_adhoc_21))
(bind-poly vprint vprint_adhoc_W3ZvaWQsZmxvYXQqLGk2NCxpNjRd "")
(register-lib-func xtmmath vprint_adhoc_W3ZvaWQsZmxvYXQqLGk2NF0 [void,float*,i64]* 0 "print a packed float* buffer" '(let ((vprint_adhoc_22 (lambda (buf len) (vprint:[void,float*,i64,i64]* buf len 1)))) vprint_adhoc_22))
(bind-poly vprint vprint_adhoc_W3ZvaWQsZmxvYXQqLGk2NF0 "")
(register-lib-func xtmmath vprint_adhoc_W3ZvaWQsZG91YmxlKixpNjQsaTY0XQ [void,double*,i64,i64]* 0 "print a packed double* buffer" '(let ((vprint_adhoc_23 (lambda (buf:double* len ncols) (doloop (i len) (printf "buf[%. 3lld] = %.4f " i (pref buf i)) (if (= (% i ncols) (- ncols 1)) (println))) (println)))) vprint_adhoc_23))
(bind-poly vprint vprint_adhoc_W3ZvaWQsZG91YmxlKixpNjQsaTY0XQ "")
(register-lib-func xtmmath vprint_adhoc_W3ZvaWQsZG91YmxlKixpNjRd [void,double*,i64]* 0 "print a packed double* buffer" '(let ((vprint_adhoc_24 (lambda (buf len) (vprint:[void,double*,i64,i64]* buf len 1)))) vprint_adhoc_24))
(bind-poly vprint vprint_adhoc_W3ZvaWQsZG91YmxlKixpNjRd "")
(register-lib-func xtmmath vcopy_unpack_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixpNjQsaTY0LGk2NF0 [void,float*,float*,i64,i64,i64]* 0 "take a packed float* buffer and copy it into a sparse representation" '(let ((vcopy_unpack_adhoc_25 (lambda (src:float* dest:float* stride neighbors srclen) (doloop (i srclen) (doloop (j neighbors) (pset! dest (+ (* stride i) j) (pref src (+ (* neighbors i) j)))))))) vcopy_unpack_adhoc_25))
(bind-poly vcopy_unpack vcopy_unpack_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixpNjQsaTY0LGk2NF0 "")
(register-lib-func xtmmath vcopy_unpack_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUqLGk2NCxpNjQsaTY0XQ [void,double*,double*,i64,i64,i64]* 0 "take a packed double* buffer and copy it into a sparse representation" '(let ((vcopy_unpack_adhoc_26 (lambda (src:double* dest:double* stride neighbors srclen) (doloop (i srclen) (doloop (j neighbors) (pset! dest (+ (* stride i) j) (pref src (+ (* neighbors i) j)))))))) vcopy_unpack_adhoc_26))
(bind-poly vcopy_unpack vcopy_unpack_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUqLGk2NCxpNjQsaTY0XQ "")
(register-lib-func xtmmath vcopy_pack_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixpNjQsaTY0LGk2NF0 [void,float*,float*,i64,i64,i64]* 0 "take a sparse float* buffer and copy it into a packed representation" '(let ((vcopy_pack_adhoc_27 (lambda (src:float* dest:float* stride neighbors srclen) (doloop (i srclen) (doloop (j neighbors) (pset! dest (+ (* neighbors i) j) (pref src (+ (* stride i) j)))))))) vcopy_pack_adhoc_27))
(bind-poly vcopy_pack vcopy_pack_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixpNjQsaTY0LGk2NF0 "")
(register-lib-func xtmmath vcopy_pack_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUqLGk2NCxpNjQsaTY0XQ [void,double*,double*,i64,i64,i64]* 0 "take a sparse double* buffer and copy it into a packed representation" '(let ((vcopy_pack_adhoc_28 (lambda (src:double* dest:double* stride neighbors srclen) (doloop (i srclen) (doloop (j neighbors) (pset! dest (+ (* neighbors i) j) (pref src (+ (* stride i) j)))))))) vcopy_pack_adhoc_28))
(bind-poly vcopy_pack vcopy_pack_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUqLGk2NCxpNjQsaTY0XQ "")
(register-lib-func xtmmath vcopy_adhoc_W3ZvaWQsZG91YmxlKixpNjQsZG91YmxlKl0 [void,double*,i64,double*]* 0 "" '(let ((vcopy_adhoc_29 (lambda (src:double* len:i64 dest:double*) (doloop (i len) (pset! dest i (pref src i))) void))) vcopy_adhoc_29))
(bind-poly vcopy vcopy_adhoc_W3ZvaWQsZG91YmxlKixpNjQsZG91YmxlKl0 "")
(register-lib-func xtmmath vcopy_adhoc_W3ZvaWQsZmxvYXQqLGk2NCxmbG9hdCpd [void,float*,i64,float*]* 0 "" '(let ((vcopy_adhoc_30 (lambda (src:float* len:i64 dest:float*) (doloop (i len) (pset! dest i (pref src i))) void))) vcopy_adhoc_30))
(bind-poly vcopy vcopy_adhoc_W3ZvaWQsZmxvYXQqLGk2NCxmbG9hdCpd "")
(register-lib-func xtmmath vcopy_adhoc_W3ZvaWQsaTY0KixpNjQsaTY0Kl0 [void,i64*,i64,i64*]* 0 "" '(let ((vcopy_adhoc_31 (lambda (src:i64* len:i64 dest:i64*) (doloop (i len) (pset! dest i (pref src i))) void))) vcopy_adhoc_31))
(bind-poly vcopy vcopy_adhoc_W3ZvaWQsaTY0KixpNjQsaTY0Kl0 "")
(register-lib-func xtmmath vcopy_adhoc_W3ZvaWQsaTMyKixpNjQsaTMyKl0 [void,i32*,i64,i32*]* 0 "" '(let ((vcopy_adhoc_32 (lambda (src:i32* len:i64 dest:i32*) (doloop (i len) (pset! dest i (pref src i))) void))) vcopy_adhoc_32))
(bind-poly vcopy vcopy_adhoc_W3ZvaWQsaTMyKixpNjQsaTMyKl0 "")
(register-lib-func xtmmath vnormalise_adhoc_W3ZvaWQsZmxvYXQqLGk2NCxmbG9hdCpd [void,float*,i64,float*]* 0 "" '(let ((vnormalise_adhoc_33 (lambda (v1:float* len:i64 result:float*) (let ((mag 0.00000000000000000000) (i 0)) (dotimes (i len) (set! mag (+ mag (* (pref v1 i) (pref v1 i))))) (set! mag (sqrt mag)) (dotimes (i len) (pset! result i (/ (pref v1 i) mag))) void)))) vnormalise_adhoc_33))
(bind-poly vnormalise vnormalise_adhoc_W3ZvaWQsZmxvYXQqLGk2NCxmbG9hdCpd "")
(register-lib-func xtmmath vnormalise_adhoc_W3ZvaWQsZG91YmxlKixpNjQsZG91YmxlKl0 [void,double*,i64,double*]* 0 "" '(let ((vnormalise_adhoc_34 (lambda (v1:double* len:i64 result:double*) (let ((mag 0.00000000000000000000) (i 0)) (dotimes (i len) (set! mag (+ mag (* (pref v1 i) (pref v1 i))))) (set! mag (sqrt mag)) (dotimes (i len) (pset! result i (/ (pref v1 i) mag))) void)))) vnormalise_adhoc_34))
(bind-poly vnormalise vnormalise_adhoc_W3ZvaWQsZG91YmxlKixpNjQsZG91YmxlKl0 "")
(register-lib-func xtmmath vvdot_adhoc_W2Zsb2F0LGZsb2F0KixmbG9hdCosaTY0XQ [float,float*,float*,i64]* 0 "" '(let ((vvdot_adhoc_35 (let ((i 0)) (lambda (v1:float* v2:float* len:i64) (let ((res 0.00000000000000000000)) (dotimes (i len) (set! res (+ res (* (pref v1 i) (pref v2 i))))) res))))) vvdot_adhoc_35))
(bind-poly vvdot vvdot_adhoc_W2Zsb2F0LGZsb2F0KixmbG9hdCosaTY0XQ "")
(register-lib-func xtmmath vvdot_adhoc_W2RvdWJsZSxkb3VibGUqLGRvdWJsZSosaTY0XQ [double,double*,double*,i64]* 0 "" '(let ((vvdot_adhoc_36 (let ((i 0)) (lambda (v1:double* v2:double* len:i64) (let ((res 0.00000000000000000000)) (dotimes (i len) (set! res (+ res (* (pref v1 i) (pref v2 i))))) res))))) vvdot_adhoc_36))
(bind-poly vvdot vvdot_adhoc_W2RvdWJsZSxkb3VibGUqLGRvdWJsZSosaTY0XQ "")
(register-lib-func xtmmath vvcross_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixmbG9hdCpd [void,float*,float*,float*]* 0 "" '(let ((vvcross_adhoc_37 (let ((i 0)) (lambda (v1:float* v2:float* result:float*) (pfill! result (- (* (pref v1 1) (pref v2 2)) (* (pref v2 1) (pref v1 2))) (- (* (pref v2 0) (pref v1 2)) (* (pref v1 0) (pref v2 2))) (- (* (pref v1 0) (pref v2 1)) (* (pref v2 0) (pref v1 1)))) void)))) vvcross_adhoc_37))
(bind-poly vvcross vvcross_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixmbG9hdCpd "")
(register-lib-func xtmmath vvcross_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUqLGRvdWJsZSpd [void,double*,double*,double*]* 0 "" '(let ((vvcross_adhoc_38 (let ((i 0)) (lambda (v1:double* v2:double* result:double*) (pfill! result (- (* (pref v1 1) (pref v2 2)) (* (pref v2 1) (pref v1 2))) (- (* (pref v2 0) (pref v1 2)) (* (pref v1 0) (pref v2 2))) (- (* (pref v1 0) (pref v2 1)) (* (pref v2 0) (pref v1 1)))) void)))) vvcross_adhoc_38))
(bind-poly vvcross vvcross_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUqLGRvdWJsZSpd "")
(register-lib-func xtmmath vsmul_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGk2NCxmbG9hdCpd [void,float*,float,i64,float*]* 0 "" '(let ((vsmul_adhoc_39 (lambda (v1:float* s:float len:i64 result:float*) (let ((i 0)) (dotimes (i len) (pset! result i (* s (pref v1 i)))) void)))) vsmul_adhoc_39))
(bind-poly vsmul vsmul_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGk2NCxmbG9hdCpd "")
(register-lib-func xtmmath vsmul_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUsaTY0LGRvdWJsZSpd [void,double*,double,i64,double*]* 0 "" '(let ((vsmul_adhoc_40 (lambda (v1:double* s:double len:i64 result:double*) (let ((i 0)) (dotimes (i len) (pset! result i (* s (pref v1 i)))) void)))) vsmul_adhoc_40))
(bind-poly vsmul vsmul_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUsaTY0LGRvdWJsZSpd "")
(register-lib-func xtmmath vsdiv_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGk2NCxmbG9hdCpd [void,float*,float,i64,float*]* 0 "" '(let ((vsdiv_adhoc_41 (lambda (v1:float* s:float len:i64 result:float*) (let ((i 0)) (dotimes (i len) (pset! result i (/ (pref v1 i) s))) void)))) vsdiv_adhoc_41))
(bind-poly vsdiv vsdiv_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGk2NCxmbG9hdCpd "")
(register-lib-func xtmmath vsdiv_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUsaTY0LGRvdWJsZSpd [void,double*,double,i64,double*]* 0 "" '(let ((vsdiv_adhoc_42 (lambda (v1:double* s:double len:i64 result:double*) (let ((i 0)) (dotimes (i len) (pset! result i (/ (pref v1 i) s))) void)))) vsdiv_adhoc_42))
(bind-poly vsdiv vsdiv_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUsaTY0LGRvdWJsZSpd "")
(register-lib-func xtmmath vvsum_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixpNjQsZmxvYXQqXQ [void,float*,float*,i64,float*]* 0 "" '(let ((vvsum_adhoc_43 (let ((i 0)) (lambda (v1:float* v2:float* len:i64 result:float*) (dotimes (i len) (pset! result i (+ (pref v1 i) (pref v2 i)))) void)))) vvsum_adhoc_43))
(bind-poly vvsum vvsum_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixpNjQsZmxvYXQqXQ "")
(register-lib-func xtmmath vvsum_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUqLGk2NCxkb3VibGUqXQ [void,double*,double*,i64,double*]* 0 "" '(let ((vvsum_adhoc_44 (let ((i 0)) (lambda (v1:double* v2:double* len:i64 result:double*) (dotimes (i len) (pset! result i (+ (pref v1 i) (pref v2 i)))) void)))) vvsum_adhoc_44))
(bind-poly vvsum vvsum_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUqLGk2NCxkb3VibGUqXQ "")
(register-lib-func xtmmath vvsub_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixpNjQsZmxvYXQqXQ [void,float*,float*,i64,float*]* 0 "" '(let ((vvsub_adhoc_45 (let ((i 0)) (lambda (v1:float* v2:float* len:i64 result:float*) (dotimes (i len) (pset! result i (- (pref v1 i) (pref v2 i)))) void)))) vvsub_adhoc_45))
(bind-poly vvsub vvsub_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixpNjQsZmxvYXQqXQ "")
(register-lib-func xtmmath vvsub_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUqLGk2NCxkb3VibGUqXQ [void,double*,double*,i64,double*]* 0 "" '(let ((vvsub_adhoc_46 (let ((i 0)) (lambda (v1:double* v2:double* len:i64 result:double*) (dotimes (i len) (pset! result i (- (pref v1 i) (pref v2 i)))) void)))) vvsub_adhoc_46))
(bind-poly vvsub vvsub_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUqLGk2NCxkb3VibGUqXQ "")
(register-lib-func xtmmath vvmul_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixpNjQsZmxvYXQqXQ [void,float*,float*,i64,float*]* 0 "" '(let ((vvmul_adhoc_47 (let ((i 0)) (lambda (v1:float* v2:float* len:i64 v3:float*) (dotimes (i len) (pset! v3 i (* (pref v1 i) (pref v2 i)))) void)))) vvmul_adhoc_47))
(bind-poly vvmul vvmul_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixpNjQsZmxvYXQqXQ "")
(register-lib-func xtmmath vvmul_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUqLGk2NCxkb3VibGUqXQ [void,double*,double*,i64,double*]* 0 "" '(let ((vvmul_adhoc_48 (let ((i 0)) (lambda (v1:double* v2:double* len:i64 v3:double*) (dotimes (i len) (pset! v3 i (* (pref v1 i) (pref v2 i)))) void)))) vvmul_adhoc_48))
(bind-poly vvmul vvmul_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUqLGk2NCxkb3VibGUqXQ "")
(register-lib-func xtmmath vmag_adhoc_W2Zsb2F0LGZsb2F0KixpNjRd [float,float*,i64]* 0 "" '(let ((vmag_adhoc_49 (lambda (v:float* len:i64) (let ((mag 0.00000000000000000000) (i 0)) (dotimes (i len) (set! mag (+ mag (* (pref v i) (pref v i))))) (sqrt mag))))) vmag_adhoc_49))
(bind-poly vmag vmag_adhoc_W2Zsb2F0LGZsb2F0KixpNjRd "")
(register-lib-func xtmmath vmag_adhoc_W2RvdWJsZSxkb3VibGUqLGk2NF0 [double,double*,i64]* 0 "" '(let ((vmag_adhoc_50 (lambda (v:double* len:i64) (let ((mag 0.00000000000000000000) (i 0)) (dotimes (i len) (set! mag (+ mag (* (pref v i) (pref v i))))) (sqrt mag))))) vmag_adhoc_50))
(bind-poly vmag vmag_adhoc_W2RvdWJsZSxkb3VibGUqLGk2NF0 "")
(register-lib-func xtmmath vaquat_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGZsb2F0Kl0 [void,float*,float,float*]* 0 "@param v - axis vector (3d)\r\n@param angle - angle in radians\r\n@param result - quaternion (4d vector xyzw) in which to store the result" '(let ((vaquat_adhoc_51 (lambda (v:float* angle:float result:float*) (let ((m (vmag v 3)) (s (/ (sin (* 0.50000000000000000000 angle)) m))) (pfill! result (* (pref v 0) s) (* (pref v 1) s) (* (pref v 2) s) (cos (* 0.50000000000000000000 angle))) void)))) vaquat_adhoc_51))
(bind-poly vaquat vaquat_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGZsb2F0Kl0 "")
(register-lib-func xtmmath vaquat_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUsZG91YmxlKl0 [void,double*,double,double*]* 0 "@param v - axis vector (3d)\r\n@param angle - angle in radians\r\n@param result - quaternion (4d vector xyzw) in which to store the result" '(let ((vaquat_adhoc_52 (lambda (v:double* angle:double result:double*) (let ((m (vmag v 3)) (s (/ (sin (* 0.50000000000000000000 angle)) m))) (pfill! result (* (pref v 0) s) (* (pref v 1) s) (* (pref v 2) s) (cos (* 0.50000000000000000000 angle))) void)))) vaquat_adhoc_52))
(bind-poly vaquat vaquat_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUsZG91YmxlKl0 "")
(bind-macro (colmaj_idx_2D r c nrows) "helper macro for 2D column-major indexing" `(+ (* ,c ,nrows) ,r))
(bind-macro (rowmaj_idx_2D r c ncols) "helper macro for 2D row-major indexing" `(+ ,c (* ,r ,ncols)))
(register-lib-func xtmmath mprint_adhoc_W3ZvaWQsZmxvYXQqLGk2NCxpNjRd [void,float*,i64,i64]* 0 "" '(let ((mprint_adhoc_53 (lambda (m:float* nrows:i64 ncols:i64) (let ((i 0) (j 0)) (dotimes (i nrows) (printf "[") (dotimes (j ncols) (printf " %f" (ftod (pref m (rowmaj_idx_2D i j ncols))))) (printf " ]\n")) void)))) mprint_adhoc_53))
(bind-poly mprint mprint_adhoc_W3ZvaWQsZmxvYXQqLGk2NCxpNjRd "")
(register-lib-func xtmmath mprint_adhoc_W3ZvaWQsZG91YmxlKixpNjQsaTY0XQ [void,double*,i64,i64]* 0 "" '(let ((mprint_adhoc_54 (lambda (m:double* nrows:i64 ncols:i64) (let ((i 0) (j 0)) (dotimes (i nrows) (printf "[") (dotimes (j ncols) (printf " %f" (pref m (rowmaj_idx_2D i j ncols)))) (printf " ]\n")) void)))) mprint_adhoc_54))
(bind-poly mprint mprint_adhoc_W3ZvaWQsZG91YmxlKixpNjQsaTY0XQ "")
(register-lib-func xtmmath mprint_adhoc_W3ZvaWQsaTMyKixpNjQsaTY0XQ [void,i32*,i64,i64]* 0 "" '(let ((mprint_adhoc_55 (lambda (m:i32* nrows:i64 ncols:i64) (let ((i 0) (j 0)) (dotimes (i nrows) (printf "[") (dotimes (j ncols) (printf " %d" (pref m (rowmaj_idx_2D i j ncols)))) (printf " ]\n")) void)))) mprint_adhoc_55))
(bind-poly mprint mprint_adhoc_W3ZvaWQsaTMyKixpNjQsaTY0XQ "")
(register-lib-func xtmmath mprint_adhoc_W3ZvaWQsaTY0KixpNjQsaTY0XQ [void,i64*,i64,i64]* 0 "" '(let ((mprint_adhoc_56 (lambda (m:i64* nrows:i64 ncols:i64) (let ((i 0) (j 0)) (dotimes (i nrows) (printf "[") (dotimes (j ncols) (printf " %lld" (pref m (rowmaj_idx_2D i j ncols)))) (printf " ]\n")) void)))) mprint_adhoc_56))
(bind-poly mprint mprint_adhoc_W3ZvaWQsaTY0KixpNjQsaTY0XQ "")
(register-lib-func xtmmath mmmul_adhoc_W2Zsb2F0KixmbG9hdCosaTY0LGk2NCxmbG9hdCosaTY0LGk2NCxmbG9hdCpd [float*,float*,i64,i64,float*,i64,i64,float*]* 0 "" '(let ((mmmul_adhoc_57 (lambda (m1:float* r1:i64 c1:i64 m2:float* r2:i64 c2:i64 result:float*) (if (= c1 r2) (let ((r 0) (c 0) (k 0)) (dotimes (r r1) (dotimes (c c2) (pset! result (+ c (* r c2)) 0.00000000000000000000) (dotimes (k c1) (pset! result (+ c (* r c2)) (+ (pref result (+ c (* r c2))) (* (pref m1 (+ k (* r c1))) (pref m2 (+ (* k c2) c)))))))) result) (begin (printf "bad matrix multiplication [%lld,%lld]*[%lld,%lld]\n" r1 c1 r2 c2) (cast null float*)))))) mmmul_adhoc_57))
(bind-poly mmmul mmmul_adhoc_W2Zsb2F0KixmbG9hdCosaTY0LGk2NCxmbG9hdCosaTY0LGk2NCxmbG9hdCpd "")
(register-lib-func xtmmath mmmul_adhoc_W2RvdWJsZSosZG91YmxlKixpNjQsaTY0LGRvdWJsZSosaTY0LGk2NCxkb3VibGUqXQ [double*,double*,i64,i64,double*,i64,i64,double*]* 0 "" '(let ((mmmul_adhoc_58 (lambda (m1:double* r1:i64 c1:i64 m2:double* r2:i64 c2:i64 result:double*) (if (= c1 r2) (let ((r 0) (c 0) (k 0)) (dotimes (r r1) (dotimes (c c2) (pset! result (+ c (* r c2)) 0.00000000000000000000) (dotimes (k c1) (pset! result (+ c (* r c2)) (+ (pref result (+ c (* r c2))) (* (pref m1 (+ k (* r c1))) (pref m2 (+ (* k c2) c)))))))) result) (begin (printf "bad matrix multiplication [%lld,%lld]*[%lld,%lld]\n" r1 c1 r2 c2) (cast null double*)))))) mmmul_adhoc_58))
(bind-poly mmmul mmmul_adhoc_W2RvdWJsZSosZG91YmxlKixpNjQsaTY0LGRvdWJsZSosaTY0LGk2NCxkb3VibGUqXQ "")
(register-lib-func xtmmath mmmul_adhoc_W2kzMiosaTMyKixpNjQsaTY0LGkzMiosaTY0LGk2NCxpMzIqXQ [i32*,i32*,i64,i64,i32*,i64,i64,i32*]* 0 "" '(let ((mmmul_adhoc_59 (lambda (m1:i32* r1:i64 c1:i64 m2:i32* r2:i64 c2:i64 result:i32*) (if (= c1 r2) (let ((r 0) (c 0) (k 0)) (dotimes (r r1) (dotimes (c c2) (pset! result (+ c (* r c2)) 0) (dotimes (k c1) (pset! result (+ c (* r c2)) (+ (pref result (+ c (* r c2))) (* (pref m1 (+ k (* r c1))) (pref m2 (+ (* k c2) c)))))))) result) (begin (printf "bad matrix multiplication [%lld,%lld]*[%lld,%lld]\n" r1 c1 r2 c2) (cast null i32*)))))) mmmul_adhoc_59))
(bind-poly mmmul mmmul_adhoc_W2kzMiosaTMyKixpNjQsaTY0LGkzMiosaTY0LGk2NCxpMzIqXQ "")
(register-lib-func xtmmath mmmul_adhoc_W2k2NCosaTY0KixpNjQsaTY0LGk2NCosaTY0LGk2NCxpNjQqXQ [i64*,i64*,i64,i64,i64*,i64,i64,i64*]* 0 "" '(let ((mmmul_adhoc_60 (lambda (m1:i64* r1:i64 c1:i64 m2:i64* r2:i64 c2:i64 result:i64*) (if (= c1 r2) (let ((r 0) (c 0) (k 0)) (dotimes (r r1) (dotimes (c c2) (pset! result (+ c (* r c2)) 0) (dotimes (k c1) (pset! result (+ c (* r c2)) (+ (pref result (+ c (* r c2))) (* (pref m1 (+ k (* r c1))) (pref m2 (+ (* k c2) c)))))))) result) (begin (printf "bad matrix multiplication [%lld,%lld]*[%lld,%lld]\n" r1 c1 r2 c2) (cast null i64*)))))) mmmul_adhoc_60))
(bind-poly mmmul mmmul_adhoc_W2k2NCosaTY0KixpNjQsaTY0LGk2NCosaTY0LGk2NCxpNjQqXQ "")
(register-lib-func xtmmath mmmul_adhoc_W2Zsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0Kl0 [float*,float*,float*,float*]* 0 "" '(let ((mmmul_adhoc_61 (lambda (m1:float* m2:float* result:float*) (let ((row1:/4,float/* (cast (pref-ptr m2 0))) (row2:/4,float/* (cast (pref-ptr m2 4))) (row3:/4,float/* (cast (pref-ptr m2 8))) (row4:/4,float/* (cast (pref-ptr m2 12))) (out:/4,float/* (cast result)) (tmp:/4,float/* null) (i 0)) (dotimes (i 4) (set! tmp (cast (pref-ptr m1 (* 4 i)))) (let ((a (vshuffle tmp null 0 0 0 0)) (b (vshuffle tmp null 1 1 1 1)) (c (vshuffle tmp null 2 2 2 2)) (d (vshuffle tmp null 3 3 3 3))) (pset! out i (+ (+ (* a row1) (* b row2)) (+ (* c row3) (* d row4)))))) result)))) mmmul_adhoc_61))
(bind-poly mmmul mmmul_adhoc_W2Zsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0Kl0 "")
(register-lib-func xtmmath mtrans_adhoc_W2Zsb2F0KixmbG9hdCosaTY0LGk2NCxmbG9hdCpd [float*,float*,i64,i64,float*]* 0 "" '(let ((mtrans_adhoc_62 (lambda (m1:float* nrows:i64 ncols:i64 result:float*) (let ((i 0) (j 0)) (dotimes (i nrows) (dotimes (j ncols) (pset! result (+ (* j ncols) i) (pref m1 (+ (* i ncols) j))))) result)))) mtrans_adhoc_62))
(bind-poly mtrans mtrans_adhoc_W2Zsb2F0KixmbG9hdCosaTY0LGk2NCxmbG9hdCpd "")
(register-lib-func xtmmath mtranspose_adhoc_W2RvdWJsZSosZG91YmxlKixpNjQsaTY0LGRvdWJsZSpd [double*,double*,i64,i64,double*]* 0 "" '(let ((mtranspose_adhoc_63 (lambda (m1:double* nrows:i64 ncols:i64 result:double*) (let ((i 0) (j 0)) (dotimes (i nrows) (dotimes (j ncols) (pset! result (+ (* j ncols) i) (pref m1 (+ (* i ncols) j))))) result)))) mtranspose_adhoc_63))
(bind-poly mtranspose mtranspose_adhoc_W2RvdWJsZSosZG91YmxlKixpNjQsaTY0LGRvdWJsZSpd "")
(register-lib-func xtmmath mdeterminant_adhoc_W2Zsb2F0LGZsb2F0KixpNjRd [float,float*,i64]* 0 "matrix determinant - matrix must be square (= nrows ncols)" '(let ((mdeterminant_adhoc_64 (lambda (m1:float* nrows:i64) (if (= nrows 1) (pref m1 0) (let ((det:float 0.00000000000000000000) (s:float 1.0000000000000000000) (c 0) (i 0) (j 0) (m 0) (n 0) (mb:float* (salloc (* nrows nrows)))) (dotimes (c nrows) (set! m 0) (set! n 0) (dotimes (i nrows) (dotimes (j nrows) (pset! mb (+ (* i nrows) j) 0.00000000000000000000) (if (and (<> i 0) (<> j c)) (begin (pset! mb (+ (* m (- nrows 1)) n) (pref m1 (+ (* i nrows) j))) (if (< n (- nrows 2)) (set! n (+ n 1)) (begin (set! n 0) (set! m (+ m 1))))) (begin 1)))) (set! det (+ det (* s (* (pref m1 c) (mdeterminant_adhoc_64 mb (- nrows 1)))))) (set! s (* -1.0000000000000000000 s))) det))))) mdeterminant_adhoc_64))
(bind-poly mdeterminant mdeterminant_adhoc_W2Zsb2F0LGZsb2F0KixpNjRd "")
(register-lib-func xtmmath mdeterminant_adhoc_W2RvdWJsZSxkb3VibGUqLGk2NF0 [double,double*,i64]* 0 "matrix determinant - matrix must be square (= nrows ncols)" '(let ((mdeterminant_adhoc_65 (lambda (m1:double* nrows:i64) (if (= nrows 1) (pref m1 0) (let ((det:double 0.00000000000000000000) (s:double 1.0000000000000000000) (c 0) (i 0) (j 0) (m 0) (n 0) (mb:double* (salloc (* nrows nrows)))) (dotimes (c nrows) (set! m 0) (set! n 0) (dotimes (i nrows) (dotimes (j nrows) (pset! mb (+ (* i nrows) j) 0.00000000000000000000) (if (and (<> i 0) (<> j c)) (begin (pset! mb (+ (* m (- nrows 1)) n) (pref m1 (+ (* i nrows) j))) (if (< n (- nrows 2)) (set! n (+ n 1)) (begin (set! n 0) (set! m (+ m 1))))) (begin 1)))) (set! det (+ det (* s (* (pref m1 c) (mdeterminant_adhoc_65 mb (- nrows 1)))))) (set! s (* -1.0000000000000000000 s))) det))))) mdeterminant_adhoc_65))
(bind-poly mdeterminant mdeterminant_adhoc_W2RvdWJsZSxkb3VibGUqLGk2NF0 "")
(register-lib-func xtmmath minverse_adhoc_W3ZvaWQsZmxvYXQqLGk2NCxmbG9hdCpd [void,float*,i64,float*]* 0 "matrix inverse - matrix must be square (= nrows ncols)" '(let ((minverse_adhoc_66 (lambda (m1:float* nrows:i64 result:float*) (let ((m2:float* (salloc (* nrows nrows))) (fac:float* (salloc (* nrows nrows))) (d:float 0.00000000000000000000) (i 0) (j 0) (m 0) (n 0) (q:i64 0) (p:i64 0)) (dotimes (q nrows) (dotimes (p nrows) (set! m 0) (set! n 0) (dotimes (i nrows) (dotimes (j nrows) (pset! m2 (+ (* i nrows) j) 0.00000000000000000000) (if (and (<> i q) (<> j p)) (begin (pset! m2 (+ (* m (- nrows 1)) n) (pref m1 (+ (* i nrows) j))) (if (< n (- nrows 2)) (set! n (+ n 1)) (begin (set! n 0) (set! m (+ m 1))))) (begin 1)))) (pset! fac (+ (* q nrows) p) (* (pow -1.0000000000000000000 (i64tof (+ q p))) (mdeterminant m2 (- nrows 1)))))) (dotimes (i nrows) (dotimes (j nrows) (pset! m2 (+ (* i nrows) j) (pref fac (+ (* j nrows) i))))) (set! d (mdeterminant m1 nrows)) (dotimes (i nrows) (dotimes (j nrows) (pset! result (+ (* i nrows) j) (/ (pref m2 (+ (* i nrows) j)) d)))) void)))) minverse_adhoc_66))
(bind-poly minverse minverse_adhoc_W3ZvaWQsZmxvYXQqLGk2NCxmbG9hdCpd "")
(register-lib-func xtmmath minverse_adhoc_W3ZvaWQsZG91YmxlKixpNjQsZG91YmxlKl0 [void,double*,i64,double*]* 0 "matrix inverse - matrix must be square (= nrows ncols)" '(let ((minverse_adhoc_67 (lambda (m1:double* nrows:i64 result:double*) (let ((m2:double* (salloc (* nrows nrows))) (fac:double* (salloc (* nrows nrows))) (d:double 0.00000000000000000000) (i 0) (j 0) (m 0) (n 0) (q:i64 0) (p:i64 0)) (dotimes (q nrows) (dotimes (p nrows) (set! m 0) (set! n 0) (dotimes (i nrows) (dotimes (j nrows) (pset! m2 (+ (* i nrows) j) 0.00000000000000000000) (if (and (<> i q) (<> j p)) (begin (pset! m2 (+ (* m (- nrows 1)) n) (pref m1 (+ (* i nrows) j))) (if (< n (- nrows 2)) (set! n (+ n 1)) (begin (set! n 0) (set! m (+ m 1))))) (begin 1)))) (pset! fac (+ (* q nrows) p) (* (pow -1.0000000000000000000 (i64tod (+ q p))) (mdeterminant m2 (- nrows 1)))))) (dotimes (i nrows) (dotimes (j nrows) (pset! m2 (+ (* i nrows) j) (pref fac (+ (* j nrows) i))))) (set! d (mdeterminant m1 nrows)) (dotimes (i nrows) (dotimes (j nrows) (pset! result (+ (* i nrows) j) (/ (pref m2 (+ (* i nrows) j)) d)))) void)))) minverse_adhoc_67))
(bind-poly minverse minverse_adhoc_W3ZvaWQsZG91YmxlKixpNjQsZG91YmxlKl0 "")
(register-lib-func xtmmath mcopy_adhoc_W3ZvaWQsZmxvYXQqLGk2NCxpNjQsZmxvYXQqXQ [void,float*,i64,i64,float*]* 0 "" '(let ((mcopy_adhoc_68 (lambda (src:float* row col dest:float*) (memcpy (cast dest i8*) (cast src i8*) (* row col 4)) void))) mcopy_adhoc_68))
(bind-poly mcopy mcopy_adhoc_W3ZvaWQsZmxvYXQqLGk2NCxpNjQsZmxvYXQqXQ "")
(register-lib-func xtmmath mcopy_adhoc_W3ZvaWQsZG91YmxlKixpNjQsaTY0LGRvdWJsZSpd [void,double*,i64,i64,double*]* 0 "" '(let ((mcopy_adhoc_69 (lambda (src:double* row col dest:double*) (memcpy (cast dest i8*) (cast src i8*) (* row col 8)) void))) mcopy_adhoc_69))
(bind-poly mcopy mcopy_adhoc_W3ZvaWQsZG91YmxlKixpNjQsaTY0LGRvdWJsZSpd "")
(register-lib-func xtmmath varotate_adhoc_W2Zsb2F0KixmbG9hdCosZmxvYXQsZmxvYXQqXQ [float*,float*,float,float*]* 0 "calcuate rotation matrix around vector\r\n\r\nThis function is particularly useful in graphics, so it's\r\ncolumn-major (the same as OpenGL)\r\n\r\n@param axis - the unit vector around which you want to rotate\r\n@param theta - the angle (radians) by which to rotate\r\n@param result - a pointer to memory to store the calculated 4x4 rotation matrix in" '(let ((varotate_adhoc_70 (lambda (axis:float* theta:float result:float*) (let ((x (pref axis 0)) (y (pref axis 1)) (z (pref axis 2)) (cost (cos theta)) (sint (sin theta)) (mcost (- 1.0000000000000000000 cost))) (pset! result 0 (+ cost (* (* x x) mcost))) (pset! result 1 (+ (* (* y x) mcost) (* z sint))) (pset! result 2 (- (* (* z x) mcost) (* y sint))) (pset! result 3 0.00000000000000000000) (pset! result 4 (- (* (* x y) mcost) (* z sint))) (pset! result 5 (+ cost (* (* y y) mcost))) (pset! result 6 (+ (* (* z y) mcost) (* x sint))) (pset! result 7 0.00000000000000000000) (pset! result 8 (+ (* (* x z) mcost) (* y sint))) (pset! result 9 (- (* (* y z) mcost) (* x sint))) (pset! result 10 (+ cost (* (* z z) mcost))) (pset! result 11 0.00000000000000000000) (pset! result 12 0.00000000000000000000) (pset! result 13 0.00000000000000000000) (pset! result 14 0.00000000000000000000) (pset! result 15 1.0000000000000000000) result)))) varotate_adhoc_70))
(bind-poly varotate varotate_adhoc_W2Zsb2F0KixmbG9hdCosZmxvYXQsZmxvYXQqXQ "")
(register-lib-func xtmmath varotate_adhoc_W2RvdWJsZSosZG91YmxlKixkb3VibGUsZG91YmxlKl0 [double*,double*,double,double*]* 0 "calcuate rotation matrix around vector\r\n\r\nThis function is particularly useful in graphics, so it's\r\ncolumn-major (the same as OpenGL)\r\n\r\n@param axis - the unit vector around which you want to rotate\r\n@param theta - the angle (radians) by which to rotate\r\n@param result - a pointer to memory to store the calculated 4x4 rotation matrix in" '(let ((varotate_adhoc_71 (lambda (axis:double* theta:double result:double*) (let ((x (pref axis 0)) (y (pref axis 1)) (z (pref axis 2)) (cost (cos theta)) (sint (sin theta)) (mcost (- 1.0000000000000000000 cost))) (pset! result 0 (+ cost (* (* x x) mcost))) (pset! result 1 (+ (* (* y x) mcost) (* z sint))) (pset! result 2 (- (* (* z x) mcost) (* y sint))) (pset! result 3 0.00000000000000000000) (pset! result 4 (- (* (* x y) mcost) (* z sint))) (pset! result 5 (+ cost (* (* y y) mcost))) (pset! result 6 (+ (* (* z y) mcost) (* x sint))) (pset! result 7 0.00000000000000000000) (pset! result 8 (+ (* (* x z) mcost) (* y sint))) (pset! result 9 (- (* (* y z) mcost) (* x sint))) (pset! result 10 (+ cost (* (* z z) mcost))) (pset! result 11 0.00000000000000000000) (pset! result 12 0.00000000000000000000) (pset! result 13 0.00000000000000000000) (pset! result 14 0.00000000000000000000) (pset! result 15 1.0000000000000000000) result)))) varotate_adhoc_71))
(bind-poly varotate varotate_adhoc_W2RvdWJsZSosZG91YmxlKixkb3VibGUsZG91YmxlKl0 "")
(register-lib-func xtmmath vquicksort_adhoc_W3ZvaWQsZG91YmxlKixpNjQsaTY0XQ [void,double*,i64,i64]* 0 "" '(let ((vquicksort_adhoc_72 (lambda (buf:double* left right) (if (< left right) (let ((tmp 0.00000000000000000000) (_swap (lambdas (x y) (set! tmp (pref buf x)) (pset! buf x (pref buf y)) (pset! buf y tmp))) (pivot (pref buf right)) (index left) (i 0)) (dotimes (i left (- right left)) (if (or (< (pref buf i) pivot) (= (pref buf i) pivot)) (begin (_swap i index) (set! index (+ index 1))))) (_swap right index) (vquicksort_adhoc_72 buf left (- index 1)) (vquicksort_adhoc_72 buf (+ index 1) right)) void)))) vquicksort_adhoc_72))
(bind-poly vquicksort vquicksort_adhoc_W3ZvaWQsZG91YmxlKixpNjQsaTY0XQ "")
(register-lib-func xtmmath vquicksort_adhoc_W3ZvaWQsZmxvYXQqLGk2NCxpNjRd [void,float*,i64,i64]* 0 "" '(let ((vquicksort_adhoc_73 (lambda (buf:float* left right) (if (< left right) (let ((tmp 0.00000000000000000000) (_swap (lambdas (x y) (set! tmp (pref buf x)) (pset! buf x (pref buf y)) (pset! buf y tmp))) (pivot (pref buf right)) (index left) (i 0)) (dotimes (i left (- right left)) (if (or (< (pref buf i) pivot) (= (pref buf i) pivot)) (begin (_swap i index) (set! index (+ index 1))))) (_swap right index) (vquicksort_adhoc_73 buf left (- index 1)) (vquicksort_adhoc_73 buf (+ index 1) right)) void)))) vquicksort_adhoc_73))
(bind-poly vquicksort vquicksort_adhoc_W3ZvaWQsZmxvYXQqLGk2NCxpNjRd "")
(register-lib-func xtmmath vquicksort_adhoc_W3ZvaWQsaTY0KixpNjQsaTY0XQ [void,i64*,i64,i64]* 0 "" '(let ((vquicksort_adhoc_74 (lambda (buf:i64* left right) (if (< left right) (let ((tmp 0) (_swap (lambdas (x y) (set! tmp (pref buf x)) (pset! buf x (pref buf y)) (pset! buf y tmp))) (pivot (pref buf right)) (index left) (i 0)) (dotimes (i left (- right left)) (if (or (< (pref buf i) pivot) (= (pref buf i) pivot)) (begin (_swap i index) (set! index (+ index 1))))) (_swap right index) (vquicksort_adhoc_74 buf left (- index 1)) (vquicksort_adhoc_74 buf (+ index 1) right)) void)))) vquicksort_adhoc_74))
(bind-poly vquicksort vquicksort_adhoc_W3ZvaWQsaTY0KixpNjQsaTY0XQ "")
(register-lib-func xtmmath vquicksort_adhoc_W3ZvaWQsaTMyKixpNjQsaTY0XQ [void,i32*,i64,i64]* 0 "" '(let ((vquicksort_adhoc_75 (lambda (buf:i32* left right) (if (< left right) (let ((tmp 0) (_swap (lambdas (x y) (set! tmp (pref buf x)) (pset! buf x (pref buf y)) (pset! buf y tmp))) (pivot (pref buf right)) (index left) (i 0)) (dotimes (i left (- right left)) (if (or (< (pref buf i) pivot) (= (pref buf i) pivot)) (begin (_swap i index) (set! index (+ index 1))))) (_swap right index) (vquicksort_adhoc_75 buf left (- index 1)) (vquicksort_adhoc_75 buf (+ index 1) right)) void)))) vquicksort_adhoc_75))
(bind-poly vquicksort vquicksort_adhoc_W3ZvaWQsaTMyKixpNjQsaTY0XQ "")
(register-lib-func xtmmath vquicksort_adhoc_W3ZvaWQsaTE2KixpNjQsaTY0XQ [void,i16*,i64,i64]* 0 "" '(let ((vquicksort_adhoc_76 (lambda (buf:i16* left right) (if (< left right) (let ((tmp 0) (_swap (lambdas (x y) (set! tmp (pref buf x)) (pset! buf x (pref buf y)) (pset! buf y tmp))) (pivot (pref buf right)) (index left) (i 0)) (dotimes (i left (- right left)) (if (or (< (pref buf i) pivot) (= (pref buf i) pivot)) (begin (_swap i index) (set! index (+ index 1))))) (_swap right index) (vquicksort_adhoc_76 buf left (- index 1)) (vquicksort_adhoc_76 buf (+ index 1) right)) void)))) vquicksort_adhoc_76))
(bind-poly vquicksort vquicksort_adhoc_W3ZvaWQsaTE2KixpNjQsaTY0XQ "")
(register-lib-func xtmmath vquicksort_adhoc_W3ZvaWQsaTgqLGk2NCxpNjRd [void,i8*,i64,i64]* 0 "" '(let ((vquicksort_adhoc_77 (lambda (buf:i8* left right) (if (< left right) (let ((tmp 0) (_swap (lambdas (x y) (set! tmp (pref buf x)) (pset! buf x (pref buf y)) (pset! buf y tmp))) (pivot (pref buf right)) (index left) (i 0)) (dotimes (i left (- right left)) (if (or (< (pref buf i) pivot) (= (pref buf i) pivot)) (begin (_swap i index) (set! index (+ index 1))))) (_swap right index) (vquicksort_adhoc_77 buf left (- index 1)) (vquicksort_adhoc_77 buf (+ index 1) right)) void)))) vquicksort_adhoc_77))
(bind-poly vquicksort vquicksort_adhoc_W3ZvaWQsaTgqLGk2NCxpNjRd "")
(bind-func vquicksort:[void,!a,i64,i64]* (lambda (buf left right) (if (< left right) (let ((tmp (convert 0)) (_swap (lambdas (x y) (set! tmp (pref buf x)) (pset! buf x (pref buf y)) (pset! buf y tmp))) (pivot (pref buf right)) (index left) (i 0)) (dotimes (i left (- right left)) (if (or (< (pref buf i) pivot) (= (pref buf i) pivot)) (begin (_swap i index) (set! index (+ index 1))))) (_swap right index) (vquicksort buf left (- index 1)) (vquicksort buf (+ index 1) right)) void)))
(register-lib-func xtmmath vsort_adhoc_W2RvdWJsZSosZG91YmxlKixpNjRd [double*,double*,i64]* 0 "" '(let ((vsort_adhoc_78 (lambda (buf:double* len) (vquicksort buf 0 (- len 1)) buf))) vsort_adhoc_78))
(bind-poly vsort vsort_adhoc_W2RvdWJsZSosZG91YmxlKixpNjRd "")
(register-lib-func xtmmath vsort_adhoc_W2Zsb2F0KixmbG9hdCosaTY0XQ [float*,float*,i64]* 0 "" '(let ((vsort_adhoc_79 (lambda (buf:float* len) (vquicksort buf 0 (- len 1)) buf))) vsort_adhoc_79))
(bind-poly vsort vsort_adhoc_W2Zsb2F0KixmbG9hdCosaTY0XQ "")
(register-lib-func xtmmath vsort_adhoc_W2k2NCosaTY0KixpNjRd [i64*,i64*,i64]* 0 "" '(let ((vsort_adhoc_80 (lambda (buf:i64* len) (vquicksort buf 0 (- len 1)) buf))) vsort_adhoc_80))
(bind-poly vsort vsort_adhoc_W2k2NCosaTY0KixpNjRd "")
(register-lib-func xtmmath vsort_adhoc_W2kzMiosaTMyKixpNjRd [i32*,i32*,i64]* 0 "" '(let ((vsort_adhoc_81 (lambda (buf:i32* len) (vquicksort buf 0 (- len 1)) buf))) vsort_adhoc_81))
(bind-poly vsort vsort_adhoc_W2kzMiosaTMyKixpNjRd "")
(register-lib-func xtmmath vsort_adhoc_W2kxNiosaTE2KixpNjRd [i16*,i16*,i64]* 0 "" '(let ((vsort_adhoc_82 (lambda (buf:i16* len) (vquicksort buf 0 (- len 1)) buf))) vsort_adhoc_82))
(bind-poly vsort vsort_adhoc_W2kxNiosaTE2KixpNjRd "")
(register-lib-func xtmmath vsort_adhoc_W2k4KixpOCosaTY0XQ [i8*,i8*,i64]* 0 "" '(let ((vsort_adhoc_83 (lambda (buf:i8* len) (vquicksort buf 0 (- len 1)) buf))) vsort_adhoc_83))
(bind-poly vsort vsort_adhoc_W2k4KixpOCosaTY0XQ "")
(register-lib-func xtmmath vmedian_adhoc_W2Zsb2F0LGZsb2F0KixpNjRd [float,float*,i64]* 0 "" '(let ((vmedian_adhoc_84 (lambda (buf:float* len:i64) (let ((h (vsort buf len)) (idx (dtoi64 (ceil (/ (i64tod len) 2.0000000000000000000))))) (if (evenp len) (/ (+ (pref h idx) (pref h (- idx 1))) 2.0000000000000000000) (pref h idx)))))) vmedian_adhoc_84))
(bind-poly vmedian vmedian_adhoc_W2Zsb2F0LGZsb2F0KixpNjRd "")
(register-lib-func xtmmath vmedian_adhoc_W2RvdWJsZSxkb3VibGUqLGk2NF0 [double,double*,i64]* 0 "" '(let ((vmedian_adhoc_85 (lambda (buf:double* len:i64) (let ((h (vsort buf len)) (idx (dtoi64 (ceil (/ (i64tod len) 2.0000000000000000000))))) (if (evenp len) (/ (+ (pref h idx) (pref h (- idx 1))) 2.0000000000000000000) (pref h idx)))))) vmedian_adhoc_85))
(bind-poly vmedian vmedian_adhoc_W2RvdWJsZSxkb3VibGUqLGk2NF0 "")
(register-lib-func xtmmath vmode_adhoc_W2Zsb2F0LGZsb2F0KixpNjRd [float,float*,i64]* 0 "" '(let ((vmode_adhoc_86 (lambda (buf:float* len:i64) (let ((h (vsort buf len)) (p NaNf) (l 0) (largest 0) (j:float 0.00000000000000000000) (i 0)) (dotimes (i len) (if (= p (pref buf i)) (set! l (+ l 1)) (set! l 0)) (set! p (pref buf i)) (if (> l largest) (begin (set! largest l) (set! j p)))) j)))) vmode_adhoc_86))
(bind-poly vmode vmode_adhoc_W2Zsb2F0LGZsb2F0KixpNjRd "")
(register-lib-func xtmmath vmode_adhoc_W2RvdWJsZSxkb3VibGUqLGk2NF0 [double,double*,i64]* 0 "" '(let ((vmode_adhoc_87 (lambda (buf:double* len:i64) (let ((h (vsort buf len)) (p NaN) (l 0) (largest 0) (j:double 0.00000000000000000000) (i 0)) (dotimes (i len) (if (= p (pref buf i)) (set! l (+ l 1)) (set! l 0)) (set! p (pref buf i)) (if (> l largest) (begin (set! largest l) (set! j p)))) j)))) vmode_adhoc_87))
(bind-poly vmode vmode_adhoc_W2RvdWJsZSxkb3VibGUqLGk2NF0 "")
(register-lib-func xtmmath vsphere_adhoc_W3ZvaWQsZmxvYXQqLGk2NCxpNjQsZmxvYXQqLGZsb2F0Kl0 [void,float*,i64,i64,float*,float*]* 0 "" '(let ((vsphere_adhoc_88 (lambda (buf:float* n:i64 stride:i64 c:float* r:float*) (let ((centre:float* buf) (radius 0.0001:f) (pos:float* null) (diff:float* (salloc 3)) (tmp:float* (salloc 3)) (len:float 0.00000000000000000000) (alpha:float 0.00000000000000000000) (alphasq:float 0.00000000000000000000) (i 0) (j 0)) (dotimes (i 2) (dotimes (j n) (set! pos (pref-ptr buf (* stride j))) (vvsub pos centre 3 diff) (set! len (vmag diff 3)) (if (> len radius) (begin (set! alpha (/ len radius)) (set! alphasq (* alpha alpha)) (set! radius (* 0.5:f (+ alpha (/ 1.0000000000000000000 alpha)) radius)) (vsmul centre (* 0.50000000000000000000 (+ 1.0000000000000000000 (/ 1.0000000000000000000 alphasq))) 3 centre) (vsmul pos (- 1.0000000000000000000 (/ 1.0000000000000000000 alphasq)) 3 tmp) (vvsum centre tmp 3 centre))))) (dotimes (j n) (set! pos (pref-ptr buf (* stride j))) (vvsub pos centre 3 diff) (set! len (vmag diff 3)) (if (> len radius) (begin (set! radius (/ (+ radius len) 2.0000000000000000000)) (vsmul diff len 3 diff) (vsdiv diff (- len radius) 3 diff) (vvsum centre diff 3 centre)))) (vcopy centre 3 c) (pset! r 0 radius) void)))) vsphere_adhoc_88))
(bind-poly vsphere vsphere_adhoc_W3ZvaWQsZmxvYXQqLGk2NCxpNjQsZmxvYXQqLGZsb2F0Kl0 "")
(register-lib-type xtmmath Complexd <double,double> "")
(register-lib-func xtmmath Complexd_adhoc_W0NvbXBsZXhkKixkb3VibGUsZG91YmxlXQ [Complexd*,double,double]* 0 "" '(let ((Complexd_adhoc_89 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) Complexd_adhoc_89))
(bind-poly Complexd Complexd_adhoc_W0NvbXBsZXhkKixkb3VibGUsZG91YmxlXQ "")
(register-lib-func xtmmath Complexd_z_adhoc_W0NvbXBsZXhkKixkb3VibGUsZG91YmxlXQ [Complexd*,double,double]* 0 "" '(let ((Complexd_z_adhoc_90 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) Complexd_z_adhoc_90))
(bind-poly Complexd_z Complexd_z_adhoc_W0NvbXBsZXhkKixkb3VibGUsZG91YmxlXQ "")
(register-lib-func xtmmath Complexd_h_adhoc_W0NvbXBsZXhkKixkb3VibGUsZG91YmxlXQ [Complexd*,double,double]* 0 "" '(let ((Complexd_h_adhoc_91 (lambda (arg_0 arg_1) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) Complexd_h_adhoc_91))
(bind-poly Complexd_h Complexd_h_adhoc_W0NvbXBsZXhkKixkb3VibGUsZG91YmxlXQ "")
(register-lib-func xtmmath Complexd_val_adhoc_W0NvbXBsZXhkLGRvdWJsZSxkb3VibGVd [Complexd,double,double]* 0 "" '(let ((Complexd_val_adhoc_92 (lambda (arg_0 arg_1) (let ((obj:Complexd* (salloc))) (tfill! obj arg_0 arg_1) (pref obj 0))))) Complexd_val_adhoc_92))
(bind-poly Complexd_val Complexd_val_adhoc_W0NvbXBsZXhkLGRvdWJsZSxkb3VibGVd "")
(register-lib-func xtmmath hcopy_adhoc_W0NvbXBsZXhkKixDb21wbGV4ZCpd [Complexd*,Complexd*]* 0 "" '(let ((hcopy_adhoc_93 (lambda (x:Complexd*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) obj)))) hcopy_adhoc_93))
(bind-poly hcopy hcopy_adhoc_W0NvbXBsZXhkKixDb21wbGV4ZCpd "")
(register-lib-func xtmmath hfree_adhoc_W3ZvaWQsQ29tcGxleGQqXQ [void,Complexd*]* 0 "" '(let ((hfree_adhoc_94 (lambda (x:Complexd*) () () (free x) void))) hfree_adhoc_94))
(bind-poly hfree hfree_adhoc_W3ZvaWQsQ29tcGxleGQqXQ "")
(register-lib-func xtmmath zcopy_adhoc_W0NvbXBsZXhkKixDb21wbGV4ZCosbXpvbmUqLG16b25lKl0 [Complexd*,Complexd*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_95 (lambda (x:Complexd* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (begin (tset! obj 1 (tref x 1))) (pop_zone) obj)) x)))) zcopy_adhoc_95))
(bind-poly zcopy zcopy_adhoc_W0NvbXBsZXhkKixDb21wbGV4ZCosbXpvbmUqLG16b25lKl0 "")
(register-lib-func xtmmath Cpxd_adhoc_W0NvbXBsZXhkLGRvdWJsZSxkb3VibGVd [Complexd,double,double]* 0 "" '(let ((Cpxd_adhoc_96 (lambda (re im) (let ((c:Complexd* (salloc))) (tset! c 0 re) (tset! c 1 im) (pref c 0))))) Cpxd_adhoc_96))
(bind-poly Cpxd Cpxd_adhoc_W0NvbXBsZXhkLGRvdWJsZSxkb3VibGVd "")
(register-lib-func xtmmath print_adhoc_W3ZvaWQsQ29tcGxleGRd [void,Complexd]* 0 "specialised print function for Complexd" '(let ((print_adhoc_97 (lambda (c:Complexd) (printf "%.2f%+.2fi" (tref c 0) (tref c 1)) void))) print_adhoc_97))
(bind-poly print print_adhoc_W3ZvaWQsQ29tcGxleGRd "")
(register-lib-func xtmmath print_adhoc_W3ZvaWQsQ29tcGxleGQqXQ [void,Complexd*]* 0 "specialised print function for Complexd*" '(let ((print_adhoc_98 (lambda (c:Complexd*) (if (null? c) (printf "<Complexd 0x0>") (printf "%.2f%+.2fi" (tref c 0) (tref c 1))) void))) print_adhoc_98))
(bind-poly print print_adhoc_W3ZvaWQsQ29tcGxleGQqXQ "")
(register-lib-func xtmmath toString_adhoc_W1N0cmluZyosQ29tcGxleGRd [String*,Complexd]* 0 "specialised toString function for Complexd" '(let ((toString_adhoc_99 (lambda (c:Complexd) (let ((str:i8* (salloc 256))) (sprintf str "%.2f%+.2fi" (tref c 0) (tref c 1)) (Str str))))) toString_adhoc_99))
(bind-poly toString toString_adhoc_W1N0cmluZyosQ29tcGxleGRd "")
(register-lib-func xtmmath toString_adhoc_W1N0cmluZyosQ29tcGxleGQqXQ [String*,Complexd*]* 0 "specialised toString function for Complexd" '(let ((toString_adhoc_100 (lambda (c:Complexd*) (let ((str:i8* (salloc 256))) (if (null? c) (sprintf str "<Complexd 0x0>") (sprintf str "%.2f%+.2fi" (tref c 0) (tref c 1))) (Str str))))) toString_adhoc_100))
(bind-poly toString toString_adhoc_W1N0cmluZyosQ29tcGxleGQqXQ "")
(register-lib-func xtmmath xtm_addition_adhoc_W0NvbXBsZXhkLENvbXBsZXhkLENvbXBsZXhkXQ [Complexd,Complexd,Complexd]* 0 "" '(let ((xtm_addition_adhoc_101 (lambda (a:Complexd b:Complexd) (Cpxd (+ (tref a 0) (tref b 0)) (+ (tref a 1) (tref b 1)))))) xtm_addition_adhoc_101))
(bind-poly xtm_addition xtm_addition_adhoc_W0NvbXBsZXhkLENvbXBsZXhkLENvbXBsZXhkXQ "")
(register-lib-func xtmmath xtm_addition_adhoc_W0NvbXBsZXhkLENvbXBsZXhkLGRvdWJsZV0 [Complexd,Complexd,double]* 0 "" '(let ((xtm_addition_adhoc_102 (lambda (a:Complexd b:double) (Cpxd (+ (tref a 0) b) (tref a 1))))) xtm_addition_adhoc_102))
(bind-poly xtm_addition xtm_addition_adhoc_W0NvbXBsZXhkLENvbXBsZXhkLGRvdWJsZV0 "")
(register-lib-func xtmmath xtm_addition_adhoc_W0NvbXBsZXhkLGRvdWJsZSxDb21wbGV4ZF0 [Complexd,double,Complexd]* 0 "" '(let ((xtm_addition_adhoc_103 (lambda (b:double a:Complexd) (Cpxd (+ (tref a 0) b) (tref a 1))))) xtm_addition_adhoc_103))
(bind-poly xtm_addition xtm_addition_adhoc_W0NvbXBsZXhkLGRvdWJsZSxDb21wbGV4ZF0 "")
(register-lib-func xtmmath Complex_addition_bybuf_adhoc_W3ZvaWQsQ29tcGxleGQqLENvbXBsZXhkKixDb21wbGV4ZCosaTY0XQ [void,Complexd*,Complexd*,Complexd*,i64]* 0 "" '(let ((Complex_addition_bybuf_adhoc_104 (lambda (a:Complexd* b:Complexd* c:Complexd* len) (let ((i 0)) (dotimes (i len) (tset! (pref-ptr c i) 0 (+ (tref (pref-ptr a i) 0) (tref (pref-ptr b i) 0))) (tset! (pref-ptr c i) 1 (+ (tref (pref-ptr a i) 1) (tref (pref-ptr b i) 1)))) void)))) Complex_addition_bybuf_adhoc_104))
(bind-poly Complex_addition_bybuf Complex_addition_bybuf_adhoc_W3ZvaWQsQ29tcGxleGQqLENvbXBsZXhkKixDb21wbGV4ZCosaTY0XQ "")
(register-lib-func xtmmath xtm_subtraction_adhoc_W0NvbXBsZXhkLENvbXBsZXhkLENvbXBsZXhkXQ [Complexd,Complexd,Complexd]* 0 "" '(let ((xtm_subtraction_adhoc_105 (lambda (a:Complexd b:Complexd) (Cpxd (- (tref a 0) (tref b 0)) (- (tref a 1) (tref b 1)))))) xtm_subtraction_adhoc_105))
(bind-poly xtm_subtraction xtm_subtraction_adhoc_W0NvbXBsZXhkLENvbXBsZXhkLENvbXBsZXhkXQ "")
(register-lib-func xtmmath xtm_subtraction_adhoc_W0NvbXBsZXhkLENvbXBsZXhkLGRvdWJsZV0 [Complexd,Complexd,double]* 0 "" '(let ((xtm_subtraction_adhoc_106 (lambda (a:Complexd b:double) (Cpxd (- (tref a 0) b) (tref a 1))))) xtm_subtraction_adhoc_106))
(bind-poly xtm_subtraction xtm_subtraction_adhoc_W0NvbXBsZXhkLENvbXBsZXhkLGRvdWJsZV0 "")
(register-lib-func xtmmath xtm_subtraction_adhoc_W0NvbXBsZXhkLGRvdWJsZSxDb21wbGV4ZF0 [Complexd,double,Complexd]* 0 "" '(let ((xtm_subtraction_adhoc_107 (lambda (b:double a:Complexd) (Cpxd (- (tref a 0) b) (tref a 1))))) xtm_subtraction_adhoc_107))
(bind-poly xtm_subtraction xtm_subtraction_adhoc_W0NvbXBsZXhkLGRvdWJsZSxDb21wbGV4ZF0 "")
(register-lib-func xtmmath Complex_subtraction_bybuf_adhoc_W3ZvaWQsQ29tcGxleGQqLENvbXBsZXhkKixDb21wbGV4ZCosaTY0XQ [void,Complexd*,Complexd*,Complexd*,i64]* 0 "" '(let ((Complex_subtraction_bybuf_adhoc_108 (lambda (a:Complexd* b:Complexd* c:Complexd* len) (let ((i 0)) (dotimes (i len) (tset! (pref-ptr c i) 0 (- (tref (pref-ptr a i) 0) (tref (pref-ptr b i) 0))) (tset! (pref-ptr c i) 1 (- (tref (pref-ptr a i) 1) (tref (pref-ptr b i) 1)))) void)))) Complex_subtraction_bybuf_adhoc_108))
(bind-poly Complex_subtraction_bybuf Complex_subtraction_bybuf_adhoc_W3ZvaWQsQ29tcGxleGQqLENvbXBsZXhkKixDb21wbGV4ZCosaTY0XQ "")
(register-lib-func xtmmath xtm_multiplication_adhoc_W0NvbXBsZXhkLENvbXBsZXhkLENvbXBsZXhkXQ [Complexd,Complexd,Complexd]* 0 "" '(let ((xtm_multiplication_adhoc_109 (lambda (a:Complexd b:Complexd) (Cpxd (- (* (tref a 0) (tref b 0)) (* (tref a 1) (tref b 1))) (+ (* (tref a 0) (tref b 1)) (* (tref a 1) (tref b 0))))))) xtm_multiplication_adhoc_109))
(bind-poly xtm_multiplication xtm_multiplication_adhoc_W0NvbXBsZXhkLENvbXBsZXhkLENvbXBsZXhkXQ "")
(register-lib-func xtmmath xtm_multiplication_adhoc_W0NvbXBsZXhkLENvbXBsZXhkLGRvdWJsZV0 [Complexd,Complexd,double]* 0 "" '(let ((xtm_multiplication_adhoc_110 (lambda (a:Complexd b:double) (Cpxd (- (* (tref a 0) b) (tref a 1)) (+ (tref a 0) (* (tref a 1) b)))))) xtm_multiplication_adhoc_110))
(bind-poly xtm_multiplication xtm_multiplication_adhoc_W0NvbXBsZXhkLENvbXBsZXhkLGRvdWJsZV0 "")
(register-lib-func xtmmath xtm_multiplication_adhoc_W0NvbXBsZXhkLGRvdWJsZSxDb21wbGV4ZF0 [Complexd,double,Complexd]* 0 "" '(let ((xtm_multiplication_adhoc_111 (lambda (b:double a:Complexd) (Cpxd (- (* (tref a 0) b) (tref a 1)) (+ (tref a 0) (* (tref a 1) b)))))) xtm_multiplication_adhoc_111))
(bind-poly xtm_multiplication xtm_multiplication_adhoc_W0NvbXBsZXhkLGRvdWJsZSxDb21wbGV4ZF0 "")
(register-lib-func xtmmath Complex_multiplication_bybuf_adhoc_W3ZvaWQsQ29tcGxleGQqLENvbXBsZXhkKixDb21wbGV4ZCosaTY0XQ [void,Complexd*,Complexd*,Complexd*,i64]* 0 "" '(let ((Complex_multiplication_bybuf_adhoc_112 (lambda (a:Complexd* b:Complexd* c:Complexd* len) (let ((i 0)) (dotimes (i len) (tset! (pref-ptr c i) 0 (- (* (tref (pref-ptr a i) 0) (tref (pref-ptr b i) 0)) (* (tref (pref-ptr a i) 1) (tref (pref-ptr b i) 1)))) (tset! (pref-ptr c i) 1 (+ (* (tref (pref-ptr a i) 0) (tref (pref-ptr b i) 1)) (* (tref (pref-ptr a i) 1) (tref (pref-ptr b i) 0))))) void)))) Complex_multiplication_bybuf_adhoc_112))
(bind-poly Complex_multiplication_bybuf Complex_multiplication_bybuf_adhoc_W3ZvaWQsQ29tcGxleGQqLENvbXBsZXhkKixDb21wbGV4ZCosaTY0XQ "")
(register-lib-func xtmmath xtm_division_adhoc_W0NvbXBsZXhkLENvbXBsZXhkLENvbXBsZXhkXQ [Complexd,Complexd,Complexd]* 0 "" '(let ((xtm_division_adhoc_113 (lambda (a:Complexd b:Complexd) (let ((i (+ (* (tref a 0) (tref b 0)) (* (tref a 1) (tref b 1)))) (j (+ (* (tref b 0) (tref b 0)) (* (tref b 1) (tref b 1)))) (k (- (* (tref a 1) (tref b 0)) (* (tref a 0) (tref b 1))))) (Cpxd (/ i j) (/ k j)))))) xtm_division_adhoc_113))
(bind-poly xtm_division xtm_division_adhoc_W0NvbXBsZXhkLENvbXBsZXhkLENvbXBsZXhkXQ "")
(register-lib-func xtmmath xtm_division_adhoc_W0NvbXBsZXhkLENvbXBsZXhkLGRvdWJsZV0 [Complexd,Complexd,double]* 0 "" '(let ((xtm_division_adhoc_114 (lambda (a:Complexd b:double) (let ((i (+ (* (tref a 0) b) (tref a 1))) (j (* b b)) (k (- (* (tref a 1) b) (tref a 0)))) (Cpxd (/ i j) (/ k j)))))) xtm_division_adhoc_114))
(bind-poly xtm_division xtm_division_adhoc_W0NvbXBsZXhkLENvbXBsZXhkLGRvdWJsZV0 "")
(register-lib-func xtmmath xtm_division_adhoc_W0NvbXBsZXhkLGRvdWJsZSxDb21wbGV4ZF0 [Complexd,double,Complexd]* 0 "" '(let ((xtm_division_adhoc_115 (lambda (b:double a:Complexd) (let ((i (+ (* (tref a 0) b) (tref a 1))) (j (* b b)) (k (- (* (tref a 1) b) (tref a 0)))) (Cpxd (/ i j) (/ k j)))))) xtm_division_adhoc_115))
(bind-poly xtm_division xtm_division_adhoc_W0NvbXBsZXhkLGRvdWJsZSxDb21wbGV4ZF0 "")
(register-lib-func xtmmath Complex_division_bybuf_adhoc_W3ZvaWQsQ29tcGxleGQqLENvbXBsZXhkKixDb21wbGV4ZCosaTY0XQ [void,Complexd*,Complexd*,Complexd*,i64]* 0 "" '(let ((Complex_division_bybuf_adhoc_116 (lambda (a:Complexd* b:Complexd* c:Complexd* len) (let ((i 0) (j 0.00000000000000000000) (k 0.00000000000000000000) (l 0.00000000000000000000)) (dotimes (i len) (set! j (+ (* (tref (pref-ptr a i) 0) (tref (pref-ptr b i) 0)) (* (tref (pref-ptr a i) 1) (tref (pref-ptr b i) 1)))) (set! k (+ (* (tref (pref-ptr b i) 0) (tref (pref-ptr b i) 0)) (* (tref (pref-ptr b i) 1) (tref (pref-ptr b i) 1)))) (set! l (- (* (tref (pref-ptr a i) 1) (tref (pref-ptr b i) 0)) (* (tref (pref-ptr a i) 0) (tref (pref-ptr b i) 1)))) (tset! (pref-ptr c i) 0 (/ j k)) (tset! (pref-ptr c i) 1 (/ l k))) void)))) Complex_division_bybuf_adhoc_116))
(bind-poly Complex_division_bybuf Complex_division_bybuf_adhoc_W3ZvaWQsQ29tcGxleGQqLENvbXBsZXhkKixDb21wbGV4ZCosaTY0XQ "")
(register-lib-func xtmmath Complex_mag_adhoc_W2RvdWJsZSxDb21wbGV4ZF0 [double,Complexd]* 0 "" '(let ((Complex_mag_adhoc_117 (lambda (a:Complexd) (sqrt (+ (* (tref a 0) (tref a 0)) (* (tref a 1) (tref a 1))))))) Complex_mag_adhoc_117))
(bind-poly Complex_mag Complex_mag_adhoc_W2RvdWJsZSxDb21wbGV4ZF0 "")
(register-lib-func xtmmath Complex_phase_adhoc_W2RvdWJsZSxDb21wbGV4ZF0 [double,Complexd]* 0 "" '(let ((Complex_phase_adhoc_118 (lambda (a:Complexd) (atan2 (tref a 1) (tref a 0))))) Complex_phase_adhoc_118))
(bind-poly Complex_phase Complex_phase_adhoc_W2RvdWJsZSxDb21wbGV4ZF0 "")
(register-lib-func xtmmath Complex_conj_adhoc_W0NvbXBsZXhkLENvbXBsZXhkXQ [Complexd,Complexd]* 0 "" '(let ((Complex_conj_adhoc_119 (lambda (a:Complexd) (Cpxd (tref a 0) (* -1.0000000000000000000 (tref a 0)))))) Complex_conj_adhoc_119))
(bind-poly Complex_conj Complex_conj_adhoc_W0NvbXBsZXhkLENvbXBsZXhkXQ "")
(register-lib-func xtmmath cart_to_pol_adhoc_W0NvbXBsZXhkLENvbXBsZXhkXQ [Complexd,Complexd]* 0 "" '(let ((cart_to_pol_adhoc_120 (lambda (a:Complexd) (Cpxd (sqrt (+ (* (tref a 0) (tref a 0)) (* (tref a 1) (tref a 1)))) (atan2 (tref a 1) (tref a 0)))))) cart_to_pol_adhoc_120))
(bind-poly cart_to_pol cart_to_pol_adhoc_W0NvbXBsZXhkLENvbXBsZXhkXQ "")
(register-lib-func xtmmath cart_to_pol_adhoc_W3ZvaWQsQ29tcGxleGQqLGk2NF0 [void,Complexd*,i64]* 0 "transform a whole buffer cart->pol in-place" '(let ((cart_to_pol_adhoc_121 (lambda (a:Complexd* n:i64) (let ((temp:double 0.00000000000000000000)) (doloop (i n) (set! temp (sqrt (+ (* (tref (pref a i) 0) (tref (pref a i) 0)) (* (tref (pref a i) 1) (tref (pref a i) 1))))) (tset! (pref-ptr a i) 1 (atan2 (tref (pref a i) 1) (tref (pref a i) 0))) (tset! (pref-ptr a i) 0 temp)) void)))) cart_to_pol_adhoc_121))
(bind-poly cart_to_pol cart_to_pol_adhoc_W3ZvaWQsQ29tcGxleGQqLGk2NF0 "")
(register-lib-func xtmmath pol_to_cart_adhoc_W0NvbXBsZXhkLENvbXBsZXhkXQ [Complexd,Complexd]* 0 "" '(let ((pol_to_cart_adhoc_122 (lambda (a:Complexd) (Cpxd (* (tref a 0) (cos (tref a 1))) (* (tref a 0) (sin (tref a 1))))))) pol_to_cart_adhoc_122))
(bind-poly pol_to_cart pol_to_cart_adhoc_W0NvbXBsZXhkLENvbXBsZXhkXQ "")
(register-lib-func xtmmath pol_to_cart_adhoc_W3ZvaWQsQ29tcGxleGQqLGk2NF0 [void,Complexd*,i64]* 0 "transform a whole buffer pol->cart in-place" '(let ((pol_to_cart_adhoc_123 (lambda (a:Complexd* n:i64) (let ((temp:double 0.00000000000000000000)) (doloop (i n) (set! temp (* (tref (pref a i) 0) (cos (tref (pref a i) 1)))) (tset! (pref-ptr a i) 1 (* (tref (pref a i) 0) (sin (tref (pref a i) 1)))) (tset! (pref-ptr a i) 0 temp)) void)))) pol_to_cart_adhoc_123))
(bind-poly pol_to_cart pol_to_cart_adhoc_W3ZvaWQsQ29tcGxleGQqLGk2NF0 "")
(register-lib-type xtmmath Complexf <float,float> "")
(register-lib-func xtmmath Complexf_adhoc_W0NvbXBsZXhmKixmbG9hdCxmbG9hdF0 [Complexf*,float,float]* 0 "" '(let ((Complexf_adhoc_124 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) Complexf_adhoc_124))
(bind-poly Complexf Complexf_adhoc_W0NvbXBsZXhmKixmbG9hdCxmbG9hdF0 "")
(register-lib-func xtmmath Complexf_z_adhoc_W0NvbXBsZXhmKixmbG9hdCxmbG9hdF0 [Complexf*,float,float]* 0 "" '(let ((Complexf_z_adhoc_125 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) Complexf_z_adhoc_125))
(bind-poly Complexf_z Complexf_z_adhoc_W0NvbXBsZXhmKixmbG9hdCxmbG9hdF0 "")
(register-lib-func xtmmath Complexf_h_adhoc_W0NvbXBsZXhmKixmbG9hdCxmbG9hdF0 [Complexf*,float,float]* 0 "" '(let ((Complexf_h_adhoc_126 (lambda (arg_0 arg_1) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) Complexf_h_adhoc_126))
(bind-poly Complexf_h Complexf_h_adhoc_W0NvbXBsZXhmKixmbG9hdCxmbG9hdF0 "")
(register-lib-func xtmmath Complexf_val_adhoc_W0NvbXBsZXhmLGZsb2F0LGZsb2F0XQ [Complexf,float,float]* 0 "" '(let ((Complexf_val_adhoc_127 (lambda (arg_0 arg_1) (let ((obj:Complexf* (salloc))) (tfill! obj arg_0 arg_1) (pref obj 0))))) Complexf_val_adhoc_127))
(bind-poly Complexf_val Complexf_val_adhoc_W0NvbXBsZXhmLGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmmath hcopy_adhoc_W0NvbXBsZXhmKixDb21wbGV4Zipd [Complexf*,Complexf*]* 0 "" '(let ((hcopy_adhoc_128 (lambda (x:Complexf*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) obj)))) hcopy_adhoc_128))
(bind-poly hcopy hcopy_adhoc_W0NvbXBsZXhmKixDb21wbGV4Zipd "")
(register-lib-func xtmmath hfree_adhoc_W3ZvaWQsQ29tcGxleGYqXQ [void,Complexf*]* 0 "" '(let ((hfree_adhoc_129 (lambda (x:Complexf*) () () (free x) void))) hfree_adhoc_129))
(bind-poly hfree hfree_adhoc_W3ZvaWQsQ29tcGxleGYqXQ "")
(register-lib-func xtmmath zcopy_adhoc_W0NvbXBsZXhmKixDb21wbGV4ZiosbXpvbmUqLG16b25lKl0 [Complexf*,Complexf*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_130 (lambda (x:Complexf* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (begin (tset! obj 1 (tref x 1))) (pop_zone) obj)) x)))) zcopy_adhoc_130))
(bind-poly zcopy zcopy_adhoc_W0NvbXBsZXhmKixDb21wbGV4ZiosbXpvbmUqLG16b25lKl0 "")
(register-lib-func xtmmath Cpxf_adhoc_W0NvbXBsZXhmLGZsb2F0LGZsb2F0XQ [Complexf,float,float]* 0 "" '(let ((Cpxf_adhoc_131 (lambda (re im) (let ((c:Complexf* (salloc))) (tset! c 0 re) (tset! c 1 im) (pref c 0))))) Cpxf_adhoc_131))
(bind-poly Cpxf Cpxf_adhoc_W0NvbXBsZXhmLGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmmath print_adhoc_W3ZvaWQsQ29tcGxleGZd [void,Complexf]* 0 "specialised print function for Complexf" '(let ((print_adhoc_132 (lambda (c:Complexf) (printf "%.2f%+.2fi" (ftod (tref c 0)) (ftod (tref c 1))) void))) print_adhoc_132))
(bind-poly print print_adhoc_W3ZvaWQsQ29tcGxleGZd "")
(register-lib-func xtmmath print_adhoc_W3ZvaWQsQ29tcGxleGYqXQ [void,Complexf*]* 0 "specialised print function for Complexf*" '(let ((print_adhoc_133 (lambda (c:Complexf*) (if (null? c) (printf "<Complexf 0x0>") (printf "%.2f%+.2fi" (ftod (tref c 0)) (ftod (tref c 1)))) void))) print_adhoc_133))
(bind-poly print print_adhoc_W3ZvaWQsQ29tcGxleGYqXQ "")
(register-lib-func xtmmath toString_adhoc_W1N0cmluZyosQ29tcGxleGZd [String*,Complexf]* 0 "specialised toString function for Complexf" '(let ((toString_adhoc_134 (lambda (c:Complexf) (let ((str:i8* (salloc 256))) (sprintf str "%.2f%+.2fi" (ftod (tref c 0)) (ftod (tref c 1))) (Str str))))) toString_adhoc_134))
(bind-poly toString toString_adhoc_W1N0cmluZyosQ29tcGxleGZd "")
(register-lib-func xtmmath toString_adhoc_W1N0cmluZyosQ29tcGxleGYqXQ [String*,Complexf*]* 0 "specialised toString function for Complexf" '(let ((toString_adhoc_135 (lambda (c:Complexf*) (let ((str:i8* (salloc 256))) (if (null? c) (sprintf str "<Complexf 0x0>") (sprintf str "%.2f%+.2fi" (ftod (tref c 0)) (ftod (tref c 1)))) (Str str))))) toString_adhoc_135))
(bind-poly toString toString_adhoc_W1N0cmluZyosQ29tcGxleGYqXQ "")
(register-lib-func xtmmath xtm_addition_adhoc_W0NvbXBsZXhmLENvbXBsZXhmLENvbXBsZXhmXQ [Complexf,Complexf,Complexf]* 0 "" '(let ((xtm_addition_adhoc_136 (lambda (a:Complexf b:Complexf) (Cpxf (+ (tref a 0) (tref b 0)) (+ (tref a 1) (tref b 1)))))) xtm_addition_adhoc_136))
(bind-poly xtm_addition xtm_addition_adhoc_W0NvbXBsZXhmLENvbXBsZXhmLENvbXBsZXhmXQ "")
(register-lib-func xtmmath xtm_addition_adhoc_W0NvbXBsZXhmLENvbXBsZXhmLGZsb2F0XQ [Complexf,Complexf,float]* 0 "" '(let ((xtm_addition_adhoc_137 (lambda (a:Complexf b:float) (Cpxf (+ (tref a 0) b) (tref a 1))))) xtm_addition_adhoc_137))
(bind-poly xtm_addition xtm_addition_adhoc_W0NvbXBsZXhmLENvbXBsZXhmLGZsb2F0XQ "")
(register-lib-func xtmmath xtm_addition_adhoc_W0NvbXBsZXhmLGZsb2F0LENvbXBsZXhmXQ [Complexf,float,Complexf]* 0 "" '(let ((xtm_addition_adhoc_138 (lambda (b:float a:Complexf) (Cpxf (+ (tref a 0) b) (tref a 1))))) xtm_addition_adhoc_138))
(bind-poly xtm_addition xtm_addition_adhoc_W0NvbXBsZXhmLGZsb2F0LENvbXBsZXhmXQ "")
(register-lib-func xtmmath Complex_addition_bybuf_adhoc_W3ZvaWQsQ29tcGxleGYqLENvbXBsZXhmKixDb21wbGV4ZiosaTY0XQ [void,Complexf*,Complexf*,Complexf*,i64]* 0 "" '(let ((Complex_addition_bybuf_adhoc_139 (lambda (a:Complexf* b:Complexf* c:Complexf* len:i64) (if (evenp len) (let ((aa:/4,float/* (cast a)) (bb:/4,float/* (cast b)) (cc:/4,float/* (cast c)) (k 0)) (dotimes (k (/ len 2)) (pset! cc k (+ (pref-ptr aa k) (pref-ptr bb k))) void)) (let ((i 0)) (dotimes (i len) (tset! (pref-ptr c i) 0 (+ (tref (pref-ptr a i) 0) (tref (pref-ptr b i) 0))) (tset! (pref-ptr c i) 1 (+ (tref (pref-ptr a i) 1) (tref (pref-ptr b i) 1)))) void))))) Complex_addition_bybuf_adhoc_139))
(bind-poly Complex_addition_bybuf Complex_addition_bybuf_adhoc_W3ZvaWQsQ29tcGxleGYqLENvbXBsZXhmKixDb21wbGV4ZiosaTY0XQ "")
(register-lib-func xtmmath xtm_subtraction_adhoc_W0NvbXBsZXhmLENvbXBsZXhmLENvbXBsZXhmXQ [Complexf,Complexf,Complexf]* 0 "" '(let ((xtm_subtraction_adhoc_140 (lambda (a:Complexf b:Complexf) (Cpxf (- (tref a 0) (tref b 0)) (- (tref a 1) (tref b 1)))))) xtm_subtraction_adhoc_140))
(bind-poly xtm_subtraction xtm_subtraction_adhoc_W0NvbXBsZXhmLENvbXBsZXhmLENvbXBsZXhmXQ "")
(register-lib-func xtmmath xtm_subtraction_adhoc_W0NvbXBsZXhmLENvbXBsZXhmLGZsb2F0XQ [Complexf,Complexf,float]* 0 "" '(let ((xtm_subtraction_adhoc_141 (lambda (a:Complexf b:float) (Cpxf (- (tref a 0) b) (tref a 1))))) xtm_subtraction_adhoc_141))
(bind-poly xtm_subtraction xtm_subtraction_adhoc_W0NvbXBsZXhmLENvbXBsZXhmLGZsb2F0XQ "")
(register-lib-func xtmmath xtm_subtraction_adhoc_W0NvbXBsZXhmLGZsb2F0LENvbXBsZXhmXQ [Complexf,float,Complexf]* 0 "" '(let ((xtm_subtraction_adhoc_142 (lambda (b:float a:Complexf) (Cpxf (- (tref a 0) b) (tref a 1))))) xtm_subtraction_adhoc_142))
(bind-poly xtm_subtraction xtm_subtraction_adhoc_W0NvbXBsZXhmLGZsb2F0LENvbXBsZXhmXQ "")
(register-lib-func xtmmath Complex_subtraction_bybuf_adhoc_W3ZvaWQsQ29tcGxleGYqLENvbXBsZXhmKixDb21wbGV4ZiosaTY0XQ [void,Complexf*,Complexf*,Complexf*,i64]* 0 "" '(let ((Complex_subtraction_bybuf_adhoc_143 (lambda (a:Complexf* b:Complexf* c:Complexf* len:i64) (if (evenp len) (let ((aa:/4,float/* (cast a)) (bb:/4,float/* (cast b)) (cc:/4,float/* (cast c)) (k 0)) (dotimes (k (/ len 2)) (pset! cc k (- (pref-ptr aa k) (pref-ptr bb k))) void)) (let ((i 0)) (dotimes (i len) (tset! (pref-ptr c i) 0 (- (tref (pref-ptr a i) 0) (tref (pref-ptr b i) 0))) (tset! (pref-ptr c i) 1 (- (tref (pref-ptr a i) 1) (tref (pref-ptr b i) 1)))) void))))) Complex_subtraction_bybuf_adhoc_143))
(bind-poly Complex_subtraction_bybuf Complex_subtraction_bybuf_adhoc_W3ZvaWQsQ29tcGxleGYqLENvbXBsZXhmKixDb21wbGV4ZiosaTY0XQ "")
(register-lib-func xtmmath xtm_multiplication_adhoc_W0NvbXBsZXhmLENvbXBsZXhmLENvbXBsZXhmXQ [Complexf,Complexf,Complexf]* 0 "" '(let ((xtm_multiplication_adhoc_144 (lambda (a:Complexf b:Complexf) (Cpxf (- (* (tref a 0) (tref b 0)) (* (tref a 1) (tref b 1))) (+ (* (tref a 0) (tref b 1)) (* (tref a 1) (tref b 0))))))) xtm_multiplication_adhoc_144))
(bind-poly xtm_multiplication xtm_multiplication_adhoc_W0NvbXBsZXhmLENvbXBsZXhmLENvbXBsZXhmXQ "")
(register-lib-func xtmmath xtm_multiplication_adhoc_W0NvbXBsZXhmLENvbXBsZXhmLGZsb2F0XQ [Complexf,Complexf,float]* 0 "" '(let ((xtm_multiplication_adhoc_145 (lambda (a:Complexf b:float) (Cpxf (- (* (tref a 0) b) (tref a 1)) (+ (tref a 0) (* (tref a 1) b)))))) xtm_multiplication_adhoc_145))
(bind-poly xtm_multiplication xtm_multiplication_adhoc_W0NvbXBsZXhmLENvbXBsZXhmLGZsb2F0XQ "")
(register-lib-func xtmmath xtm_multiplication_adhoc_W0NvbXBsZXhmLGZsb2F0LENvbXBsZXhmXQ [Complexf,float,Complexf]* 0 "" '(let ((xtm_multiplication_adhoc_146 (lambda (b:float a:Complexf) (Cpxf (- (* (tref a 0) b) (tref a 1)) (+ (tref a 0) (* (tref a 1) b)))))) xtm_multiplication_adhoc_146))
(bind-poly xtm_multiplication xtm_multiplication_adhoc_W0NvbXBsZXhmLGZsb2F0LENvbXBsZXhmXQ "")
(register-lib-func xtmmath Complex_multiplication_bybuf_adhoc_W3ZvaWQsQ29tcGxleGYqLENvbXBsZXhmKixDb21wbGV4ZiosaTY0XQ [void,Complexf*,Complexf*,Complexf*,i64]* 0 "" '(let ((Complex_multiplication_bybuf_adhoc_147 (let ((dd:/4,float/* (alloc))) (vfill! dd -1.0000000000000000000 1.0000000000000000000 -1.0000000000000000000 1.0000000000000000000) (lambda (a:Complexf* b:Complexf* c:Complexf* len:i64) (if (evenp len) (let ((j 0) (aa:/4,float/* (cast a)) (bb:/4,float/* (cast b)) (cc:/4,float/* (cast c))) (dotimes (j (/ len 2)) (pset! cc j (+ (* (vshuffle (pref-ptr aa j) null 0 0 2 2) (vshuffle (pref-ptr bb j) null 0 1 2 3)) (* (* (vshuffle (pref-ptr aa j) null 1 1 3 3) (vshuffle (pref-ptr bb j) null 1 0 3 2)) dd)))) void) (let ((i 0)) (dotimes (i len) (tset! (pref-ptr c i) 0 (- (* (tref (pref-ptr a i) 0) (tref (pref-ptr b i) 0)) (* (tref (pref-ptr a i) 1) (tref (pref-ptr b i) 1)))) (tset! (pref-ptr c i) 1 (+ (* (tref (pref-ptr a i) 0) (tref (pref-ptr b i) 1)) (* (tref (pref-ptr a i) 1) (tref (pref-ptr b i) 0))))) void)))))) Complex_multiplication_bybuf_adhoc_147))
(bind-poly Complex_multiplication_bybuf Complex_multiplication_bybuf_adhoc_W3ZvaWQsQ29tcGxleGYqLENvbXBsZXhmKixDb21wbGV4ZiosaTY0XQ "")
(register-lib-func xtmmath xtm_division_adhoc_W0NvbXBsZXhmLENvbXBsZXhmLENvbXBsZXhmXQ [Complexf,Complexf,Complexf]* 0 "" '(let ((xtm_division_adhoc_148 (lambda (a:Complexf b:Complexf) (let ((i (+ (* (tref a 0) (tref b 0)) (* (tref a 1) (tref b 1)))) (j (+ (* (tref b 0) (tref b 0)) (* (tref b 1) (tref b 1)))) (k (- (* (tref a 1) (tref b 0)) (* (tref a 0) (tref b 1))))) (Cpxf (/ i j) (/ k j)))))) xtm_division_adhoc_148))
(bind-poly xtm_division xtm_division_adhoc_W0NvbXBsZXhmLENvbXBsZXhmLENvbXBsZXhmXQ "")
(register-lib-func xtmmath xtm_division_adhoc_W0NvbXBsZXhmLENvbXBsZXhmLGZsb2F0XQ [Complexf,Complexf,float]* 0 "" '(let ((xtm_division_adhoc_149 (lambda (a:Complexf b:float) (let ((i (+ (* (tref a 0) b) (tref a 1))) (j (* b b)) (k (- (* (tref a 1) b) (tref a 0)))) (Cpxf (/ i j) (/ k j)))))) xtm_division_adhoc_149))
(bind-poly xtm_division xtm_division_adhoc_W0NvbXBsZXhmLENvbXBsZXhmLGZsb2F0XQ "")
(register-lib-func xtmmath xtm_division_adhoc_W0NvbXBsZXhmLGZsb2F0LENvbXBsZXhmXQ [Complexf,float,Complexf]* 0 "" '(let ((xtm_division_adhoc_150 (lambda (b:float a:Complexf) (let ((i (+ (* (tref a 0) b) (tref a 1))) (j (* b b)) (k (- (* (tref a 1) b) (tref a 0)))) (Cpxf (/ i j) (/ k j)))))) xtm_division_adhoc_150))
(bind-poly xtm_division xtm_division_adhoc_W0NvbXBsZXhmLGZsb2F0LENvbXBsZXhmXQ "")
(register-lib-func xtmmath Complex_division_bybuf_adhoc_W3ZvaWQsQ29tcGxleGYqLENvbXBsZXhmKixDb21wbGV4ZiosaTY0XQ [void,Complexf*,Complexf*,Complexf*,i64]* 0 "" '(let ((Complex_division_bybuf_adhoc_151 (lambda (a:Complexf* b:Complexf* c:Complexf* len) (let ((i 0) (j 0.00000000000000000000) (k 0.00000000000000000000) (l 0.00000000000000000000)) (dotimes (i len) (set! j (+ (* (tref (pref-ptr a i) 0) (tref (pref-ptr b i) 0)) (* (tref (pref-ptr a i) 1) (tref (pref-ptr b i) 1)))) (set! k (+ (* (tref (pref-ptr b i) 0) (tref (pref-ptr b i) 0)) (* (tref (pref-ptr b i) 1) (tref (pref-ptr b i) 1)))) (set! l (- (* (tref (pref-ptr a i) 1) (tref (pref-ptr b i) 0)) (* (tref (pref-ptr a i) 0) (tref (pref-ptr b i) 1)))) (tset! (pref-ptr c i) 0 (/ j k)) (tset! (pref-ptr c i) 1 (/ l k))) void)))) Complex_division_bybuf_adhoc_151))
(bind-poly Complex_division_bybuf Complex_division_bybuf_adhoc_W3ZvaWQsQ29tcGxleGYqLENvbXBsZXhmKixDb21wbGV4ZiosaTY0XQ "")
(register-lib-func xtmmath Complex_mag_adhoc_W2Zsb2F0LENvbXBsZXhmXQ [float,Complexf]* 0 "" '(let ((Complex_mag_adhoc_152 (lambda (a:Complexf) (sqrt (+ (* (tref a 0) (tref a 0)) (* (tref a 1) (tref a 1))))))) Complex_mag_adhoc_152))
(bind-poly Complex_mag Complex_mag_adhoc_W2Zsb2F0LENvbXBsZXhmXQ "")
(register-lib-func xtmmath Complex_phase_adhoc_W2Zsb2F0LENvbXBsZXhmXQ [float,Complexf]* 0 "" '(let ((Complex_phase_adhoc_153 (lambda (a:Complexf) (atan2 (tref a 1) (tref a 0))))) Complex_phase_adhoc_153))
(bind-poly Complex_phase Complex_phase_adhoc_W2Zsb2F0LENvbXBsZXhmXQ "")
(register-lib-func xtmmath Complex_conj_adhoc_W0NvbXBsZXhmLENvbXBsZXhmXQ [Complexf,Complexf]* 0 "" '(let ((Complex_conj_adhoc_154 (lambda (a:Complexf) (Cpxf (tref a 0) (* -1.0000000000000000000 (tref a 0)))))) Complex_conj_adhoc_154))
(bind-poly Complex_conj Complex_conj_adhoc_W0NvbXBsZXhmLENvbXBsZXhmXQ "")
(register-lib-func xtmmath cart_to_pol_adhoc_W0NvbXBsZXhmLENvbXBsZXhmXQ [Complexf,Complexf]* 0 "" '(let ((cart_to_pol_adhoc_155 (lambda (a:Complexf) (Cpxf (sqrt (+ (* (tref a 0) (tref a 0)) (* (tref a 1) (tref a 1)))) (atan2 (tref a 1) (tref a 0)))))) cart_to_pol_adhoc_155))
(bind-poly cart_to_pol cart_to_pol_adhoc_W0NvbXBsZXhmLENvbXBsZXhmXQ "")
(register-lib-func xtmmath cart_to_pol_adhoc_W3ZvaWQsQ29tcGxleGYqLGk2NF0 [void,Complexf*,i64]* 0 "transform a whole buffer cart->pol in-place" '(let ((cart_to_pol_adhoc_156 (lambda (a:Complexf* n:i64) (let ((temp:float 0.00000000000000000000)) (doloop (i n) (set! temp (sqrt (+ (* (tref (pref a i) 0) (tref (pref a i) 0)) (* (tref (pref a i) 1) (tref (pref a i) 1))))) (tset! (pref-ptr a i) 1 (atan2 (tref (pref a i) 1) (tref (pref a i) 0))) (tset! (pref-ptr a i) 0 temp)) void)))) cart_to_pol_adhoc_156))
(bind-poly cart_to_pol cart_to_pol_adhoc_W3ZvaWQsQ29tcGxleGYqLGk2NF0 "")
(register-lib-func xtmmath pol_to_cart_adhoc_W0NvbXBsZXhmLENvbXBsZXhmXQ [Complexf,Complexf]* 0 "" '(let ((pol_to_cart_adhoc_157 (lambda (a:Complexf) (Cpxf (* (tref a 0) (cos (tref a 1))) (* (tref a 0) (sin (tref a 1))))))) pol_to_cart_adhoc_157))
(bind-poly pol_to_cart pol_to_cart_adhoc_W0NvbXBsZXhmLENvbXBsZXhmXQ "")
(register-lib-func xtmmath pol_to_cart_adhoc_W3ZvaWQsQ29tcGxleGYqLGk2NF0 [void,Complexf*,i64]* 0 "transform a whole buffer pol->cart in-place" '(let ((pol_to_cart_adhoc_158 (lambda (a:Complexf* n:i64) (let ((temp:float 0.00000000000000000000)) (doloop (i n) (set! temp (* (tref (pref a i) 0) (cos (tref (pref a i) 1)))) (tset! (pref-ptr a i) 1 (* (tref (pref a i) 0) (sin (tref (pref a i) 1)))) (tset! (pref-ptr a i) 0 temp)) void)))) pol_to_cart_adhoc_158))
(bind-poly pol_to_cart pol_to_cart_adhoc_W3ZvaWQsQ29tcGxleGYqLGk2NF0 "")
(register-lib-func xtmmath Complex_bufferize_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixDb21wbGV4ZiosaTY0XQ [void,float*,float*,Complexf*,i64]* 0 "" '(let ((Complex_bufferize_adhoc_159 (lambda (re:float* im:float* com:Complexf* len:i64) (let ((i 0)) (dotimes (i len) (tset! (pref-ptr com i) 0 (pref re i)) (tset! (pref-ptr com i) 1 (pref im i)))) void))) Complex_bufferize_adhoc_159))
(bind-poly Complex_bufferize Complex_bufferize_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixDb21wbGV4ZiosaTY0XQ "")
(register-lib-func xtmmath Complex_bufferize_adhoc_W3ZvaWQsZmxvYXQqLENvbXBsZXhmKixpNjRd [void,float*,Complexf*,i64]* 0 "" '(let ((Complex_bufferize_adhoc_160 (lambda (re:float* com:Complexf* len:i64) (let ((i 0)) (dotimes (i len) (tset! (pref-ptr com i) 0 (pref re i)) (tset! (pref-ptr com i) 1 0.00000000000000000000))) void))) Complex_bufferize_adhoc_160))
(bind-poly Complex_bufferize Complex_bufferize_adhoc_W3ZvaWQsZmxvYXQqLENvbXBsZXhmKixpNjRd "")
(register-lib-func xtmmath Complex_bufferize_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUqLENvbXBsZXhkKixpNjRd [void,double*,double*,Complexd*,i64]* 0 "" '(let ((Complex_bufferize_adhoc_161 (lambda (re:double* im:double* com:Complexd* len:i64) (let ((i 0)) (dotimes (i len) (tset! (pref-ptr com i) 0 (pref re i)) (tset! (pref-ptr com i) 1 (pref im i)))) void))) Complex_bufferize_adhoc_161))
(bind-poly Complex_bufferize Complex_bufferize_adhoc_W3ZvaWQsZG91YmxlKixkb3VibGUqLENvbXBsZXhkKixpNjRd "")
(register-lib-func xtmmath Complex_bufferize_adhoc_W3ZvaWQsZG91YmxlKixDb21wbGV4ZCosaTY0XQ [void,double*,Complexd*,i64]* 0 "" '(let ((Complex_bufferize_adhoc_162 (lambda (re:double* com:Complexd* len:i64) (let ((i 0)) (dotimes (i len) (tset! (pref-ptr com i) 0 (pref re i)) (tset! (pref-ptr com i) 1 0.00000000000000000000))) void))) Complex_bufferize_adhoc_162))
(bind-poly Complex_bufferize Complex_bufferize_adhoc_W3ZvaWQsZG91YmxlKixDb21wbGV4ZCosaTY0XQ "")
(register-lib-func xtmmath Complex_unbufferize_adhoc_W3ZvaWQsQ29tcGxleGYqLGZsb2F0KixmbG9hdCosaTY0XQ [void,Complexf*,float*,float*,i64]* 0 "" '(let ((Complex_unbufferize_adhoc_163 (lambda (com:Complexf* re:float* im:float* len:i64) (let ((i 0)) (dotimes (i len) (pset! re i (tref (pref-ptr com i) 0)) (pset! im i (tref (pref-ptr com i) 1)))) void))) Complex_unbufferize_adhoc_163))
(bind-poly Complex_unbufferize Complex_unbufferize_adhoc_W3ZvaWQsQ29tcGxleGYqLGZsb2F0KixmbG9hdCosaTY0XQ "")
(register-lib-func xtmmath Complex_unbufferize_adhoc_W3ZvaWQsQ29tcGxleGYqLGZsb2F0KixpNjRd [void,Complexf*,float*,i64]* 0 "" '(let ((Complex_unbufferize_adhoc_164 (lambda (com:Complexf* re:float* len:i64) (let ((i 0)) (dotimes (i len) (pset! re i (tref (pref-ptr com i) 0)))) void))) Complex_unbufferize_adhoc_164))
(bind-poly Complex_unbufferize Complex_unbufferize_adhoc_W3ZvaWQsQ29tcGxleGYqLGZsb2F0KixpNjRd "")
(register-lib-func xtmmath Complex_unbufferize_adhoc_W3ZvaWQsQ29tcGxleGQqLGRvdWJsZSosZG91YmxlKixpNjRd [void,Complexd*,double*,double*,i64]* 0 "" '(let ((Complex_unbufferize_adhoc_165 (lambda (com:Complexd* re:double* im:double* len:i64) (let ((i 0)) (dotimes (i len) (pset! re i (tref (pref-ptr com i) 0)) (pset! im i (tref (pref-ptr com i) 1)))) void))) Complex_unbufferize_adhoc_165))
(bind-poly Complex_unbufferize Complex_unbufferize_adhoc_W3ZvaWQsQ29tcGxleGQqLGRvdWJsZSosZG91YmxlKixpNjRd "")
(register-lib-func xtmmath Complex_unbufferize_adhoc_W3ZvaWQsQ29tcGxleGQqLGRvdWJsZSosaTY0XQ [void,Complexd*,double*,i64]* 0 "" '(let ((Complex_unbufferize_adhoc_166 (lambda (com:Complexd* re:double* len:i64) (let ((i 0)) (dotimes (i len) (pset! re i (tref (pref-ptr com i) 0)))) void))) Complex_unbufferize_adhoc_166))
(bind-poly Complex_unbufferize Complex_unbufferize_adhoc_W3ZvaWQsQ29tcGxleGQqLGRvdWJsZSosaTY0XQ "")
(register-lib-type xtmmath HistBin <float,float> "a histogram bin: <lower,count>")
(register-lib-func xtmmath HistBin_adhoc_W0hpc3RCaW4qLGZsb2F0LGZsb2F0XQ [HistBin*,float,float]* 0 "" '(let ((HistBin_adhoc_167 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) HistBin_adhoc_167))
(bind-poly HistBin HistBin_adhoc_W0hpc3RCaW4qLGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmmath HistBin_z_adhoc_W0hpc3RCaW4qLGZsb2F0LGZsb2F0XQ [HistBin*,float,float]* 0 "" '(let ((HistBin_z_adhoc_168 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) HistBin_z_adhoc_168))
(bind-poly HistBin_z HistBin_z_adhoc_W0hpc3RCaW4qLGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmmath HistBin_h_adhoc_W0hpc3RCaW4qLGZsb2F0LGZsb2F0XQ [HistBin*,float,float]* 0 "" '(let ((HistBin_h_adhoc_169 (lambda (arg_0 arg_1) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) HistBin_h_adhoc_169))
(bind-poly HistBin_h HistBin_h_adhoc_W0hpc3RCaW4qLGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmmath HistBin_val_adhoc_W0hpc3RCaW4sZmxvYXQsZmxvYXRd [HistBin,float,float]* 0 "" '(let ((HistBin_val_adhoc_170 (lambda (arg_0 arg_1) (let ((obj:HistBin* (salloc))) (tfill! obj arg_0 arg_1) (pref obj 0))))) HistBin_val_adhoc_170))
(bind-poly HistBin_val HistBin_val_adhoc_W0hpc3RCaW4sZmxvYXQsZmxvYXRd "")
(register-lib-func xtmmath hcopy_adhoc_W0hpc3RCaW4qLEhpc3RCaW4qXQ [HistBin*,HistBin*]* 0 "" '(let ((hcopy_adhoc_171 (lambda (x:HistBin*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) obj)))) hcopy_adhoc_171))
(bind-poly hcopy hcopy_adhoc_W0hpc3RCaW4qLEhpc3RCaW4qXQ "")
(register-lib-func xtmmath hfree_adhoc_W3ZvaWQsSGlzdEJpbipd [void,HistBin*]* 0 "" '(let ((hfree_adhoc_172 (lambda (x:HistBin*) () () (free x) void))) hfree_adhoc_172))
(bind-poly hfree hfree_adhoc_W3ZvaWQsSGlzdEJpbipd "")
(register-lib-func xtmmath zcopy_adhoc_W0hpc3RCaW4qLEhpc3RCaW4qLG16b25lKixtem9uZSpd [HistBin*,HistBin*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_173 (lambda (x:HistBin* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (begin (tset! obj 1 (tref x 1))) (pop_zone) obj)) x)))) zcopy_adhoc_173))
(bind-poly zcopy zcopy_adhoc_W0hpc3RCaW4qLEhpc3RCaW4qLG16b25lKixtem9uZSpd "")
(register-lib-func xtmmath print_adhoc_W3ZvaWQsSGlzdEJpbipd [void,HistBin*]* 0 "specialised print function for HistBin*" '(let ((print_adhoc_174 (lambda (histbin:HistBin*) (if (null? histbin) (printf "<HistBin 0x0>") (printf "<HistBin %p minval=%f count=%f>" histbin (convert (tref histbin 0) double) (convert (tref histbin 1) double))) void))) print_adhoc_174))
(bind-poly print print_adhoc_W3ZvaWQsSGlzdEJpbipd "")
(register-lib-func xtmmath toString_adhoc_W1N0cmluZyosSGlzdEJpbipd [String*,HistBin*]* 0 "specialised toString function for HistBin*" '(let ((toString_adhoc_175 (lambda (histbin:HistBin*) (let ((str:i8* (salloc 256))) (if (null? histbin) (sprintf str "<HistBin 0x0>") (sprintf str "<HistBin %p minval=%f count=%f>" histbin (convert (tref histbin 0) double) (convert (tref histbin 1) double))) (Str str))))) toString_adhoc_175))
(bind-poly toString toString_adhoc_W1N0cmluZyosSGlzdEJpbipd "")
(register-lib-func xtmmath histogram_adhoc_W0hpc3RCaW4qLEhpc3RCaW4qLGZsb2F0KixpNjQsZmxvYXQsZmxvYXQsaTY0XQ [HistBin*,HistBin*,float*,i64,float,float,i64]* 0 "" '(let ((histogram_adhoc_176 (lambda (hist:HistBin* buf:float* len lower upper nbins) (let ((current_bin:HistBin* null) (range (- upper lower))) (if (not (> range 0.00000000000000000000)) (begin (println "Error in histogram: range (- upper lower) must be greater than 0.0") null) (begin (doloop (i nbins) (tset! (pref-ptr hist i) 0 (+ lower (* (convert i) (/ range (convert nbins))))) (tset! (pref-ptr hist i) 1 0.00000000000000000000)) (doloop (i len) (set! current_bin (pref-ptr hist (% (convert (* (convert nbins float) (/ (- (pref buf i) lower) range)) i64) nbins))) (tset! current_bin 1 (+ (tref current_bin 1) 1.0000000000000000000))) hist)))))) histogram_adhoc_176))
(bind-poly histogram histogram_adhoc_W0hpc3RCaW4qLEhpc3RCaW4qLGZsb2F0KixpNjQsZmxvYXQsZmxvYXQsaTY0XQ "")
(register-lib-func xtmmath histogram_adhoc_W0hpc3RCaW4qLEhpc3RCaW4qLGZsb2F0KixpNjQsaTY0XQ [HistBin*,HistBin*,float*,i64,i64]* 0 "like the full version, but use the min and max values in the buffer as upper and lower" '(let ((histogram_adhoc_177 (lambda (hist:HistBin* buf:float* len nbins) (let ((lower 0.00000000000000000000) (upper 0.00000000000000000000)) (doloop (i len) (if (< (pref buf i) lower) (set! lower (pref buf i))) (if (> (pref buf i) upper) (set! upper (pref buf i)))) (histogram:[HistBin*,HistBin*,float*,i64,float,float,i64]* hist buf len lower upper nbins))))) histogram_adhoc_177))
(bind-poly histogram histogram_adhoc_W0hpc3RCaW4qLEhpc3RCaW4qLGZsb2F0KixpNjQsaTY0XQ "")
(register-lib-func xtmmath dft_adhoc_W3ZvaWQsZG91YmxlKixDb21wbGV4ZCosaTY0XQ [void,double*,Complexd*,i64]* 0 "" '(let ((dft_adhoc_178 (lambda (in:double* out:Complexd* len) (let ((n:i64 0) (k:i64 0) (tmp 0.00000000000000000000) (cpx:Complexd* null) (N (i64tod len))) (memset (cast out i8*) 0 (convert (* len 16))) (dotimes (k len) (set! cpx (pref-ptr out k)) (dotimes (n len) (set! tmp (* (i64tod (* k n)) (/ TWOPI N))) (tset! cpx 0 (+ (tref cpx 0) (* (pref in n) (cos tmp)))) (tset! cpx 1 (- (tref cpx 1) (* (pref in n) (sin tmp)))))) void)))) dft_adhoc_178))
(bind-poly dft dft_adhoc_W3ZvaWQsZG91YmxlKixDb21wbGV4ZCosaTY0XQ "")
(register-lib-func xtmmath idft_adhoc_W3ZvaWQsQ29tcGxleGQqLGRvdWJsZSosaTY0XQ [void,Complexd*,double*,i64]* 0 "" '(let ((idft_adhoc_179 (lambda (in:Complexd* out:double* len) (let ((n:i64 0) (k:i64 0) (tmp 0.00000000000000000000) (cpx:Complexd* null) (N (i64tod len))) (dotimes (n len) (pset! out n 0.00000000000000000000) (dotimes (k len) (set! cpx (pref-ptr in k)) (set! tmp (* (i64tod (* k n)) (/ TWOPI N))) (pset! out n (+ (pref out n) (- (* (tref cpx 0) (cos tmp)) (* (tref cpx 1) (sin tmp)))))) (pset! out n (/ (pref out n) N))) void)))) idft_adhoc_179))
(bind-poly idft idft_adhoc_W3ZvaWQsQ29tcGxleGQqLGRvdWJsZSosaTY0XQ "")
(register-lib-func xtmmath gaussr_adhoc_W2RvdWJsZV0 [double]* 0 "" '(let ((gaussr_adhoc_180 (let ((phase 0)) (lambda () (let ((u1:double (random)) (u2:double (random)) (v1 (- (* 2.0000000000000000000 u1) 1.0000000000000000000)) (v2 (- (* 2.0000000000000000000 u2) 1.0000000000000000000)) (s (+ (* v1 v1) (* v2 v2)))) (if (= phase 0) (if (or (> s 1.0000000000000000000) (= s 0.00000000000000000000) (= s 1.0000000000000000000)) (gaussr_adhoc_180) (* v1 (sqrt (/ (* -2.0000000000000000000 (log s)) s)))) (begin (set! phase (- 1 phase)) (* v2 (sqrt (/ (* -2.0000000000000000000 (log s)) s)))))))))) gaussr_adhoc_180))
(bind-poly gaussr gaussr_adhoc_W2RvdWJsZV0 "")
(register-lib-func xtmmath gaussr_adhoc_W2Zsb2F0XQ [float]* 0 "" '(let ((gaussr_adhoc_181 (let ((phase 0)) (lambda () (let ((u1:float (random)) (u2:float (random)) (v1 (- (* 2.0000000000000000000 u1) 1.0000000000000000000)) (v2 (- (* 2.0000000000000000000 u2) 1.0000000000000000000)) (s (+ (* v1 v1) (* v2 v2)))) (if (= phase 0) (if (or (> s 1.0000000000000000000) (= s 0.00000000000000000000) (= s 1.0000000000000000000)) (gaussr_adhoc_181) (* v1 (sqrt (/ (* -2.0000000000000000000 (log s)) s)))) (begin (set! phase (- 1 phase)) (* v2 (sqrt (/ (* -2.0000000000000000000 (log s)) s)))))))))) gaussr_adhoc_181))
(bind-poly gaussr gaussr_adhoc_W2Zsb2F0XQ "")
(register-lib-func xtmmath hanning_adhoc_W2RvdWJsZSxkb3VibGVd [double,double]* 0 "" '(let ((hanning_adhoc_182 (lambda (t) (- 0.50000000000000000000 (* 0.50000000000000000000 (cos (* TWOPI t))))))) hanning_adhoc_182))
(bind-poly hanning hanning_adhoc_W2RvdWJsZSxkb3VibGVd "")
(register-lib-func xtmmath window_hanning_adhoc_W3ZvaWQsZG91YmxlKixpNjRd [void,double*,i64]* 0 "" '(let ((window_hanning_adhoc_183 (let ((i:i64 0)) (lambda (window_buffer:double* window_length) (dotimes (i window_length) (pset! window_buffer i (* (pref window_buffer i) (- 0.50000000000000000000 (* 0.50000000000000000000 (cos (/ (* TWOPI (i64tod i)) (i64tod (- window_length 1))))))))) void)))) window_hanning_adhoc_183))
(bind-poly window_hanning window_hanning_adhoc_W3ZvaWQsZG91YmxlKixpNjRd "")
(register-lib-func xtmmath window_hanning_adhoc_W3ZvaWQsZmxvYXQqLGk2NF0 [void,float*,i64]* 0 "" '(let ((window_hanning_adhoc_184 (let ((i:i64 0)) (lambda (window_buffer:float* window_length) (dotimes (i window_length) (pset! window_buffer i (* (pref window_buffer i) (- 0.50000000000000000000 (* 0.50000000000000000000 (cos (/ (* TWOPIf (i64tof i)) (i64tof (- window_length 1))))))))) void)))) window_hanning_adhoc_184))
(bind-poly window_hanning window_hanning_adhoc_W3ZvaWQsZmxvYXQqLGk2NF0 "")
(register-lib-func xtmmath hamming_adhoc_W2RvdWJsZSxkb3VibGVd [double,double]* 0 "" '(let ((hamming_adhoc_185 (lambda (t) (- 0.54000000000000003553 (* 0.46000000000000001998 (cos (* TWOPI t))))))) hamming_adhoc_185))
(bind-poly hamming hamming_adhoc_W2RvdWJsZSxkb3VibGVd "")
(register-lib-func xtmmath window_hamming_adhoc_W3ZvaWQsZG91YmxlKixpNjRd [void,double*,i64]* 0 "" '(let ((window_hamming_adhoc_186 (let ((i:i64 0)) (lambda (window_buffer:double* window_length) (dotimes (i window_length) (pset! window_buffer i (* (pref window_buffer i) (- 0.54000000000000003553 (* 0.46000000000000001998 (cos (/ (* TWOPI (i64tod i)) (i64tod (- window_length 1))))))))) void)))) window_hamming_adhoc_186))
(bind-poly window_hamming window_hamming_adhoc_W3ZvaWQsZG91YmxlKixpNjRd "")
(register-lib-func xtmmath window_hamming_adhoc_W3ZvaWQsZmxvYXQqLGk2NF0 [void,float*,i64]* 0 "" '(let ((window_hamming_adhoc_187 (let ((i:i64 0)) (lambda (window_buffer:float* window_length) (dotimes (i window_length) (pset! window_buffer i (* (pref window_buffer i) (- 0.54000000000000003553 (* 0.46000000000000001998 (cos (/ (* TWOPIf (i64tof i)) (i64tof (- window_length 1))))))))) void)))) window_hamming_adhoc_187))
(bind-poly window_hamming window_hamming_adhoc_W3ZvaWQsZmxvYXQqLGk2NF0 "")
(register-lib-func xtmmath djb2_adhoc_W2k2NCxpOCpd [i64,i8*]* 0 "" '(let ((djb2_adhoc_188 (lambda (str:i8*) (let ((hash:i64 5381) (len (strlen str)) (i 0)) (dotimes (i len) (set! hash (+ (<< hash 5) hash (convert (pref str i))))) hash)))) djb2_adhoc_188))
(bind-poly djb2 djb2_adhoc_W2k2NCxpOCpd "")
(register-lib-func xtmmath sdbm_adhoc_W2k2NCxpOCpd [i64,i8*]* 0 "" '(let ((sdbm_adhoc_189 (lambda (str:i8*) (let ((hash:i64 0) (len (strlen str)) (i 0)) (dotimes (i len) (set! hash (- (+ (convert (pref str i)) (<< hash 6) (<< hash 16)) hash))) hash)))) sdbm_adhoc_189))
(bind-poly sdbm sdbm_adhoc_W2k2NCxpOCpd "")
(register-lib-func xtmmath ndiff_adhoc_W2RvdWJsZSxbZG91YmxlLGRvdWJsZV0qLGRvdWJsZV0 [double,[double,double]*,double]* 0 "numeric differentiation - central diff" '(let ((ndiff_adhoc_190 (lambda (f:[double,double]* x) (/ (- (f (+ x (/ 1.0000000000000000818e-05 2.0000000000000000000))) (f (- x (/ 1.0000000000000000818e-05 2.0000000000000000000)))) 1.0000000000000000818e-05)))) ndiff_adhoc_190))
(bind-poly ndiff ndiff_adhoc_W2RvdWJsZSxbZG91YmxlLGRvdWJsZV0qLGRvdWJsZV0 "")
(register-lib-func xtmmath ndiff_adhoc_W2RvdWJsZSxbZG91YmxlLGRvdWJsZV0qLGRvdWJsZSxkb3VibGVd [double,[double,double]*,double,double]* 0 "numeric differentiation - central diff" '(let ((ndiff_adhoc_191 (lambda (f:[double,double]* x dx) (/ (- (f (+ x (/ dx 2.0000000000000000000))) (f (- x (/ dx 2.0000000000000000000)))) dx)))) ndiff_adhoc_191))
(bind-poly ndiff ndiff_adhoc_W2RvdWJsZSxbZG91YmxlLGRvdWJsZV0qLGRvdWJsZSxkb3VibGVd "")
(register-lib-func xtmmath ndifferentiate_adhoc_W2RvdWJsZSxbZG91YmxlLGRvdWJsZV0qLGRvdWJsZV0 [double,[double,double]*,double]* 0 "numeric differentiation - central diff" '(let ((ndifferentiate_adhoc_192 (lambda (f:[double,double]* x) (/ (- (f (+ x (/ 1.0000000000000000818e-05 2.0000000000000000000))) (f (- x (/ 1.0000000000000000818e-05 2.0000000000000000000)))) 1.0000000000000000818e-05)))) ndifferentiate_adhoc_192))
(bind-poly ndifferentiate ndifferentiate_adhoc_W2RvdWJsZSxbZG91YmxlLGRvdWJsZV0qLGRvdWJsZV0 "")
(register-lib-func xtmmath ndiff_extrapolated_adhoc_W2RvdWJsZSxbZG91YmxlLGRvdWJsZV0qLGRvdWJsZSxkb3VibGVd [double,[double,double]*,double,double]* 0 "numeric differentiation - extrapolated diff" '(let ((ndiff_extrapolated_adhoc_193 (lambda (f:[double,double]* x dx) (/ (- (* 8.0000000000000000000 (- (f (+ x (/ dx 4.0000000000000000000))) (f (- x (/ dx 4.0000000000000000000))))) (- (f (+ x (/ dx 2.0000000000000000000))) (f (- x (/ dx 2.0000000000000000000))))) (* 3.0000000000000000000 dx))))) ndiff_extrapolated_adhoc_193))
(bind-poly ndiff_extrapolated ndiff_extrapolated_adhoc_W2RvdWJsZSxbZG91YmxlLGRvdWJsZV0qLGRvdWJsZSxkb3VibGVd "")
(register-lib-func xtmmath ndiff2_adhoc_W2RvdWJsZSxbZG91YmxlLGRvdWJsZV0qLGRvdWJsZV0 [double,[double,double]*,double]* 0 "numeric differentiation (2nd deriv) - central diff" '(let ((ndiff2_adhoc_194 (lambda (f:[double,double]* x) (/ (- (- (f (+ x 1.0000000000000000818e-05)) (f x)) (- (f x) (f (- x 1.0000000000000000818e-05)))) (* 1.0000000000000000818e-05 1.0000000000000000818e-05))))) ndiff2_adhoc_194))
(bind-poly ndiff2 ndiff2_adhoc_W2RvdWJsZSxbZG91YmxlLGRvdWJsZV0qLGRvdWJsZV0 "")
(register-lib-func xtmmath ndiff2_adhoc_W2RvdWJsZSxbZG91YmxlLGRvdWJsZV0qLGRvdWJsZSxkb3VibGVd [double,[double,double]*,double,double]* 0 "numeric differentiation (2nd deriv) - central diff" '(let ((ndiff2_adhoc_195 (lambda (f:[double,double]* x dx) (/ (- (- (f (+ x dx)) (f x)) (- (f x) (f (- x dx)))) (* dx dx))))) ndiff2_adhoc_195))
(bind-poly ndiff2 ndiff2_adhoc_W2RvdWJsZSxbZG91YmxlLGRvdWJsZV0qLGRvdWJsZSxkb3VibGVd "")
(register-lib-func xtmmath nintegrate_adhoc_W2RvdWJsZSxbZG91YmxlLGRvdWJsZV0qLGRvdWJsZSxkb3VibGUsaTY0XQ [double,[double,double]*,double,double,i64]* 0 "integrate using Simpsons rule - N must be odd" '(let ((nintegrate_adhoc_196 (lambda (f:[double,double]* xmin xmax N) (let ((sumeven:double 0.00000000000000000000) (sumodd:double 0.00000000000000000000) (x 0.00000000000000000000) (n 0) (interval (/ (- xmax xmin) (i64tod (- N 1))))) (set! n 2) (while (< n N) (set! x (+ xmin (* interval (i64tod (- n 1))))) (set! sumodd (+ sumodd (f x))) (set! n (+ n 2))) (set! n 3) (while (< n N) (set! x (+ xmin (* interval (i64tod (- n 1))))) (set! sumeven (+ sumeven (f x))) (set! n (+ n 2))) (* (+ (* sumeven 2.0000000000000000000) (* sumodd 4.0000000000000000000) (f xmin) (f xmax)) (/ interval 3.0000000000000000000)))))) nintegrate_adhoc_196))
(bind-poly nintegrate nintegrate_adhoc_W2RvdWJsZSxbZG91YmxlLGRvdWJsZV0qLGRvdWJsZSxkb3VibGUsaTY0XQ "")
(register-lib-func xtmmath nintegrate_adhoc_W2RvdWJsZSxbZG91YmxlLGRvdWJsZV0qLGRvdWJsZSxkb3VibGVd [double,[double,double]*,double,double]* 0 "integrate using Simpsons rule - N must be odd" '(let ((nintegrate_adhoc_197 (lambda (f:[double,double]* xmin xmax) (nintegrate:[double,[double,double]*,double,double,i64]* f xmin xmax 501)))) nintegrate_adhoc_197))
(bind-poly nintegrate nintegrate_adhoc_W2RvdWJsZSxbZG91YmxlLGRvdWJsZV0qLGRvdWJsZSxkb3VibGVd "")
(register-lib-func xtmmath fade_adhoc_W2RvdWJsZSxkb3VibGVd [double,double]* 0 "" '(let ((fade_adhoc_198 (lambda (t) (* t t t (+ (* t (- (* t 6.0000000000000000000) 15.000000000000000000)) 10.000000000000000000))))) fade_adhoc_198))
(bind-poly fade fade_adhoc_W2RvdWJsZSxkb3VibGVd "")
(register-lib-func xtmmath grad_adhoc_W2RvdWJsZSxpNjQsZG91YmxlLGRvdWJsZSxkb3VibGVd [double,i64,double,double,double]* 0 "" '(let ((grad_adhoc_199 (lambda (hash:i64 x:double y:double z:double) (set! hash (bitwise-and hash 15)) (cond ((= hash 0) (+ x y)) ((= hash 1) (+ (- 0.00000000000000000000 x) y)) ((= hash 2) (- x y)) ((= hash 3) (- (- 0.00000000000000000000 x) y)) ((= hash 4) (+ x z)) ((= hash 5) (+ (- 0.00000000000000000000 x) z)) ((= hash 6) (- x z)) ((= hash 7) (- (- 0.00000000000000000000 x) z)) ((= hash 8) (+ y z)) ((= hash 9) (+ (- 0.00000000000000000000 y) z)) ((= hash 10) (- y z)) ((= hash 11) (- (- 0.00000000000000000000 y) z)) ((= hash 12) (+ y x)) ((= hash 13) (+ (- 0.00000000000000000000 y) z)) ((= hash 14) (- y x)) ((= hash 15) (- (- 0.00000000000000000000 y) z)) (else 0.00000000000000000000))))) grad_adhoc_199))
(bind-poly grad grad_adhoc_W2RvdWJsZSxpNjQsZG91YmxlLGRvdWJsZSxkb3VibGVd "")
(register-lib-func xtmmath lerp_adhoc_W2RvdWJsZSxkb3VibGUsZG91YmxlLGRvdWJsZV0 [double,double,double,double]* 0 "" '(let ((lerp_adhoc_200 (lambda (a:double b:double x:double) (+ a (* x (- b a)))))) lerp_adhoc_200))
(bind-poly lerp lerp_adhoc_W2RvdWJsZSxkb3VibGUsZG91YmxlLGRvdWJsZV0 "")
(register-lib-func xtmmath perlin_adhoc_W2RvdWJsZSxkb3VibGUsZG91YmxlLGRvdWJsZV0 [double,double,double,double]* 0 "" '(let ((perlin_adhoc_201 (let ((permutation:|256,i64|* (alloc)) (p:|512,i64|* (alloc)) (i:i64 0) (xi:i64 0) (yi:i64 0) (zi:i64 0) (xf:double 0.00000000000000000000) (yf:double 0.00000000000000000000) (zf:double 0.00000000000000000000) (u:double 0.00000000000000000000) (v:double 0.00000000000000000000) (w:double 0.00000000000000000000) (aaa:i64 0) (aba:i64 0) (aab:i64 0) (abb:i64 0) (baa:i64 0) (bba:i64 0) (bab:i64 0) (bbb:i64 0) (x1:double 0.00000000000000000000) (x2:double 0.00000000000000000000) (y1:double 0.00000000000000000000) (y2:double 0.00000000000000000000)) (afill! permutationdotimes (i 0 256) (aset! p i (aref permutation i)) (aset! p (+ i 256) (aref permutation i))) (lambda (x:double y:double z:double) (set! xi (bitwise-and (dtoi64 x) 255)) (set! yi (bitwise-and (dtoi64 y) 255)) (set! zi (bitwise-and (dtoi64 z) 255)) (set! xf (- x (i64tod (dtoi64 x)))) (set! yf (- y (i64tod (dtoi64 y)))) (set! zf (- z (i64tod (dtoi64 z)))) (set! u (fade xf)) (set! v (fade yf)) (set! w (fade zf)) (set! aaa (aref p (+ (aref p (+ (aref p xi) yi)) zi))) (set! aba (aref p (+ (aref p (+ (aref p xi) (+ yi 1))) zi))) (set! aab (aref p (+ (aref p (+ (aref p xi) yi)) (+ zi 1)))) (set! abb (aref p (+ (aref p (+ (aref p xi) (+ yi 1))) (+ zi 1)))) (set! baa (aref p (+ (aref p (+ (aref p (+ xi 1)) yi)) zi))) (set! bba (aref p (+ (aref p (+ (aref p (+ xi 1)) (+ yi 1))) zi))) (set! bab (aref p (+ (aref p (+ (aref p (+ xi 1)) yi)) (+ zi 1)))) (set! bbb (aref p (+ (aref p (+ (aref p (+ xi 1)) (+ yi 1))) (+ zi 1)))) (set! x1 (lerp (grad aaa xf yf zf) (grad baa (- xf 1.0000000000000000000) yf zf) u)) (set! x2 (lerp (grad aba xf (- yf 1.0000000000000000000) zf) (grad bba (- xf 1.0000000000000000000) (- yf 1.0000000000000000000) zf) u)) (set! y1 (lerp x1 x2 v)) (set! x1 (lerp (grad aab xf yf (- zf 1.0000000000000000000)) (grad bab (- xf 1.0000000000000000000) yf (- zf 1.0000000000000000000)) u)) (set! x2 (lerp (grad abb xf (- yf 1.0000000000000000000) (- zf 1.0000000000000000000)) (grad bbb (- xf 1.0000000000000000000) (- yf 1.0000000000000000000) (- zf 1.0000000000000000000)) u)) (set! y2 (lerp x1 x2 v)) (/ (+ (lerp y1 y2 w) 1.0000000000000000000) 2.0000000000000000000))))) perlin_adhoc_201))
(bind-poly perlin perlin_adhoc_W2RvdWJsZSxkb3VibGUsZG91YmxlLGRvdWJsZV0 "")
(print-with-colors 'green 'default #t (print "done"))(print " in" (- (clock:clock) *xtmlib-math-loaded-timer*) "seconds\n")
(define *xtmlib-math-loaded-timer* (clock:clock))
(set! *impc:compiler:message:level* *impc:aot:prev-compiler-message-level*)
