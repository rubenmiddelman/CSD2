(sys:load "libs/base/base.xtm" 'quiet)
(sys:load-preload-check 'audiobuffer)
(define *xtmlib-audiobuffer-loaded* #t)
(define *xtmlib-audiobuffer-loaded-timer* (clock:clock))
(set! *impc:aot:prev-compiler-message-level* *impc:compiler:message:level*)
(set! *impc:compiler:message:level* 'low)

(print "Loading ")
(print-with-colors 'blue 'default #t (print 'xtmaudiobuffer))
(print " library... ")
(llvm:compile-ir (sys:slurp-file "libs/aot-cache/xtmaudiobuffer.ll"));; flush the JIT-compilation queue, so we only get this file's code in the module
(impc:compiler:flush-jit-compilation-queue)
(bind-lib xtmaudiobuffer hermite_interp_local [float,float,float,float,float,float]*)
(bind-lib xtmaudiobuffer hermite_interp_local_scheme [i8*,i8*,i8*]*)
(mk-ff "hermite_interp_local" (llvm:get-function-pointer "hermite_interp_local_scheme"))
(bind-lib xtmaudiobuffer midi2frq_local [float,float]*)
(bind-lib xtmaudiobuffer midi2frq_local_scheme [i8*,i8*,i8*]*)
(mk-ff "midi2frq_local" (llvm:get-function-pointer "midi2frq_local_scheme"))
(register-lib-type xtmaudiobuffer AudioBuffer <String*,i64,i64,i64,float*,double,i64,i64,i64,double> "")
(register-lib-func xtmaudiobuffer AudioBuffer_adhoc_W0F1ZGlvQnVmZmVyKixTdHJpbmcqLGk2NCxpNjQsaTY0LGZsb2F0Kixkb3VibGUsaTY0LGk2NCxpNjQsZG91YmxlXQ [AudioBuffer*,String*,i64,i64,i64,float*,double,i64,i64,i64,double]* 0 "" '(let ((AudioBuffer_adhoc_3 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) (tset! obj 7 arg_7) (tset! obj 8 arg_8) (tset! obj 9 arg_9) obj)))) AudioBuffer_adhoc_3))
(bind-poly AudioBuffer AudioBuffer_adhoc_W0F1ZGlvQnVmZmVyKixTdHJpbmcqLGk2NCxpNjQsaTY0LGZsb2F0Kixkb3VibGUsaTY0LGk2NCxpNjQsZG91YmxlXQ "")
(register-lib-func xtmaudiobuffer AudioBuffer_z_adhoc_W0F1ZGlvQnVmZmVyKixTdHJpbmcqLGk2NCxpNjQsaTY0LGZsb2F0Kixkb3VibGUsaTY0LGk2NCxpNjQsZG91YmxlXQ [AudioBuffer*,String*,i64,i64,i64,float*,double,i64,i64,i64,double]* 0 "" '(let ((AudioBuffer_z_adhoc_4 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) (tset! obj 7 arg_7) (tset! obj 8 arg_8) (tset! obj 9 arg_9) obj)))) AudioBuffer_z_adhoc_4))
(bind-poly AudioBuffer_z AudioBuffer_z_adhoc_W0F1ZGlvQnVmZmVyKixTdHJpbmcqLGk2NCxpNjQsaTY0LGZsb2F0Kixkb3VibGUsaTY0LGk2NCxpNjQsZG91YmxlXQ "")
(register-lib-func xtmaudiobuffer AudioBuffer_h_adhoc_W0F1ZGlvQnVmZmVyKixTdHJpbmcqLGk2NCxpNjQsaTY0LGZsb2F0Kixkb3VibGUsaTY0LGk2NCxpNjQsZG91YmxlXQ [AudioBuffer*,String*,i64,i64,i64,float*,double,i64,i64,i64,double]* 0 "" '(let ((AudioBuffer_h_adhoc_5 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) (tset! obj 7 arg_7) (tset! obj 8 arg_8) (tset! obj 9 arg_9) obj)))) AudioBuffer_h_adhoc_5))
(bind-poly AudioBuffer_h AudioBuffer_h_adhoc_W0F1ZGlvQnVmZmVyKixTdHJpbmcqLGk2NCxpNjQsaTY0LGZsb2F0Kixkb3VibGUsaTY0LGk2NCxpNjQsZG91YmxlXQ "")
(register-lib-func xtmaudiobuffer AudioBuffer_val_adhoc_W0F1ZGlvQnVmZmVyLFN0cmluZyosaTY0LGk2NCxpNjQsZmxvYXQqLGRvdWJsZSxpNjQsaTY0LGk2NCxkb3VibGVd [AudioBuffer,String*,i64,i64,i64,float*,double,i64,i64,i64,double]* 0 "" '(let ((AudioBuffer_val_adhoc_6 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9) (let ((obj:AudioBuffer* (salloc))) (tfill! obj arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9) (pref obj 0))))) AudioBuffer_val_adhoc_6))
(bind-poly AudioBuffer_val AudioBuffer_val_adhoc_W0F1ZGlvQnVmZmVyLFN0cmluZyosaTY0LGk2NCxpNjQsZmxvYXQqLGRvdWJsZSxpNjQsaTY0LGk2NCxkb3VibGVd "")
(register-lib-func xtmaudiobuffer hcopy_adhoc_W0F1ZGlvQnVmZmVyKixBdWRpb0J1ZmZlcipd [AudioBuffer*,AudioBuffer*]* 0 "" '(let ((hcopy_adhoc_7 (lambda (x:AudioBuffer*) (let ((obj (halloc))) (if (not (null? (tref x 0))) (tset! obj 0 (hcopy:[String*,String*]* (tref x 0)))) (tset! obj 1 (tref x 1)) (tset! obj 2 (tref x 2)) (tset! obj 3 (tref x 3)) (tset! obj 4 (tref x 4)) (tset! obj 5 (tref x 5)) (tset! obj 6 (tref x 6)) (tset! obj 7 (tref x 7)) (tset! obj 8 (tref x 8)) (tset! obj 9 (tref x 9)) obj)))) hcopy_adhoc_7))
(bind-poly hcopy hcopy_adhoc_W0F1ZGlvQnVmZmVyKixBdWRpb0J1ZmZlcipd "")
(register-lib-func xtmaudiobuffer hfree_adhoc_W3ZvaWQsQXVkaW9CdWZmZXIqXQ [void,AudioBuffer*]* 0 "" '(let ((hfree_adhoc_8 (lambda (x:AudioBuffer*) (if (not (null? (tref x 0))) (hfree:[void,String*]* (tref x 0))) () () () () () () () () () (free x) void))) hfree_adhoc_8))
(bind-poly hfree hfree_adhoc_W3ZvaWQsQXVkaW9CdWZmZXIqXQ "")
(register-lib-func xtmaudiobuffer zcopy_adhoc_W0F1ZGlvQnVmZmVyKixBdWRpb0J1ZmZlciosbXpvbmUqLG16b25lKl0 [AudioBuffer*,AudioBuffer*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_9 (lambda (x:AudioBuffer* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (if (not (null? (tref x 0))) (tset! obj 0 (zcopy:[String*,String*,mzone*,mzone*]* (tref x 0) fromz toz))) (begin (tset! obj 1 (tref x 1))) (begin (tset! obj 2 (tref x 2))) (begin (tset! obj 3 (tref x 3))) (if (llvm_ptr_in_zone fromz (cast (tref x 4) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 4) i8*) 4) (tset! obj 4 newptr)) (tset! obj 4 (tref x 4))) (begin (tset! obj 5 (tref x 5))) (begin (tset! obj 6 (tref x 6))) (begin (tset! obj 7 (tref x 7))) (begin (tset! obj 8 (tref x 8))) (begin (tset! obj 9 (tref x 9))) (pop_zone) obj)) x)))) zcopy_adhoc_9))
(bind-poly zcopy zcopy_adhoc_W0F1ZGlvQnVmZmVyKixBdWRpb0J1ZmZlciosbXpvbmUqLG16b25lKl0 "")
(register-lib-func xtmaudiobuffer AudioBuffer_adhoc_W0F1ZGlvQnVmZmVyKixpNjQsaTY0XQ [AudioBuffer*,i64,i64]* 0 "" '(let ((AudioBuffer_adhoc_10 (lambda (frames chans) (let ((dat:SAMPLE* (alloc (* frames chans)))) (AudioBuffer_z (String "") 0 frames chans dat (convert SAMPLE_RATE) 0 0 60 0.00000000000000000000))))) AudioBuffer_adhoc_10))
(bind-poly AudioBuffer AudioBuffer_adhoc_W0F1ZGlvQnVmZmVyKixpNjQsaTY0XQ "")
(register-lib-func xtmaudiobuffer AudioBuffer_adhoc_W0F1ZGlvQnVmZmVyKixpNjQsaTY0LGRvdWJsZV0 [AudioBuffer*,i64,i64,double]* 0 "" '(let ((AudioBuffer_adhoc_11 (lambda (frames chans samplerate) (let ((dat:SAMPLE* (alloc (* frames chans)))) (AudioBuffer_z (String "") 0 frames chans dat samplerate 0 0 60 0.00000000000000000000))))) AudioBuffer_adhoc_11))
(bind-poly AudioBuffer AudioBuffer_adhoc_W0F1ZGlvQnVmZmVyKixpNjQsaTY0LGRvdWJsZV0 "")
(register-lib-func xtmaudiobuffer print_adhoc_W3ZvaWQsQXVkaW9CdWZmZXIqXQ [void,AudioBuffer*]* 0 "specialised print function for AudioBuffer*" '(let ((print_adhoc_12 (lambda (ab:AudioBuffer*) (if (null? ab) (printf "<AudioBuffer 0x0>") (printf "<AudioBuffer %p\r\n      filepath: %s\r\n      playhead: %lld\r\n        frames: %lld\r\n      channels: %lld\r\n          data: %p\r\n    samplerate: %f\r\n    loop_start: %lld\r\n   loop_frames: %lld\r\n      root_frq: %lld\r\n         phase: %f>" ab (tref (tref ab 0) 1) (tref ab 1) (tref ab 2) (tref ab 3) (tref ab 4) (tref ab 5) (tref ab 6) (tref ab 7) (tref ab 8) (tref ab 9))) void))) print_adhoc_12))
(bind-poly print print_adhoc_W3ZvaWQsQXVkaW9CdWZmZXIqXQ "")
(register-lib-func xtmaudiobuffer toString_adhoc_W1N0cmluZyosQXVkaW9CdWZmZXIqXQ [String*,AudioBuffer*]* 0 "specialised toString function for AudioBuffer*" '(let ((toString_adhoc_13 (lambda (ab:AudioBuffer*) (let ((str:i8* (salloc 1024))) (if (null? ab) (sprintf str "<AudioBuffer 0x0>") (sprintf str "<AudioBuffer %p\r\n      filepath: %s\r\n      playhead: %lld\r\n        frames: %lld\r\n      channels: %lld\r\n          data: %p\r\n    samplerate: %f\r\n    loop_start: %lld\r\n   loop_frames: %lld\r\n      root_frq: %lld\r\n         phase: %f>" ab (tref ab 0) (tref ab 1) (tref ab 2) (tref ab 3) (tref ab 4) (tref ab 5) (tref ab 6) (tref ab 7) (tref ab 8) (tref ab 9))) (Str str))))) toString_adhoc_13))
(bind-poly toString toString_adhoc_W1N0cmluZyosQXVkaW9CdWZmZXIqXQ "")
(bind-lib xtmaudiobuffer AudioBuffer_filepath [String*,AudioBuffer*]*)
(bind-lib xtmaudiobuffer AudioBuffer_filepath_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_filepath" (llvm:get-function-pointer "AudioBuffer_filepath_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_set_filepath [String*,AudioBuffer*,String*]*)
(bind-lib xtmaudiobuffer AudioBuffer_set_filepath_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_set_filepath" (llvm:get-function-pointer "AudioBuffer_set_filepath_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_playhead [i64,AudioBuffer*]*)
(bind-lib xtmaudiobuffer AudioBuffer_playhead_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_playhead" (llvm:get-function-pointer "AudioBuffer_playhead_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_set_playhead [i64,AudioBuffer*,i64]*)
(bind-lib xtmaudiobuffer AudioBuffer_set_playhead_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_set_playhead" (llvm:get-function-pointer "AudioBuffer_set_playhead_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_frames [i64,AudioBuffer*]*)
(bind-lib xtmaudiobuffer AudioBuffer_frames_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_frames" (llvm:get-function-pointer "AudioBuffer_frames_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_set_frames [i64,AudioBuffer*,i64]*)
(bind-lib xtmaudiobuffer AudioBuffer_set_frames_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_set_frames" (llvm:get-function-pointer "AudioBuffer_set_frames_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_channels [i64,AudioBuffer*]*)
(bind-lib xtmaudiobuffer AudioBuffer_channels_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_channels" (llvm:get-function-pointer "AudioBuffer_channels_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_set_channels [i64,AudioBuffer*,i64]*)
(bind-lib xtmaudiobuffer AudioBuffer_set_channels_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_set_channels" (llvm:get-function-pointer "AudioBuffer_set_channels_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_data [float*,AudioBuffer*]*)
(bind-lib xtmaudiobuffer AudioBuffer_data_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_data" (llvm:get-function-pointer "AudioBuffer_data_scheme"))
(register-lib-func xtmaudiobuffer AudioBuffer_data_b64_adhoc_W1N0cmluZyosQXVkaW9CdWZmZXIqXQ [String*,AudioBuffer*]* 0 "" '(let ((AudioBuffer_data_b64_adhoc_23 (lambda (ab:AudioBuffer*) (let ((b64size:i64 0) (datsize:i64 (* (AudioBuffer_frames ab) (AudioBuffer_channels ab) 4))) (String (base64_encode (cast (tref ab 4) i8*) datsize (ref b64size))))))) AudioBuffer_data_b64_adhoc_23))
(bind-poly AudioBuffer_data_b64 AudioBuffer_data_b64_adhoc_W1N0cmluZyosQXVkaW9CdWZmZXIqXQ "")
(register-lib-func xtmaudiobuffer AudioBuffer_data_b64_cstring_adhoc_W2k4KixBdWRpb0J1ZmZlcipd [i8*,AudioBuffer*]* 0 "" '(let ((AudioBuffer_data_b64_cstring_adhoc_24 (lambda (ab:AudioBuffer*) (let ((b64size:i64 0) (datsize:i64 (* (AudioBuffer_frames ab) (AudioBuffer_channels ab) 4))) (base64_encode (cast (tref ab 4) i8*) datsize (ref b64size)))))) AudioBuffer_data_b64_cstring_adhoc_24))
(bind-poly AudioBuffer_data_b64_cstring AudioBuffer_data_b64_cstring_adhoc_W2k4KixBdWRpb0J1ZmZlcipd "")
(bind-lib xtmaudiobuffer AudioBuffer_set_data [float*,AudioBuffer*,float*]*)
(bind-lib xtmaudiobuffer AudioBuffer_set_data_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_set_data" (llvm:get-function-pointer "AudioBuffer_set_data_scheme"))
(register-lib-func xtmaudiobuffer AudioBuffer_set_data_b64_adhoc_W3ZvaWQsQXVkaW9CdWZmZXIqLFN0cmluZypd [void,AudioBuffer*,String*]* 0 "" '(let ((AudioBuffer_set_data_b64_adhoc_26 (lambda (ab:AudioBuffer* b64:String*) (let ((size:i64 0) (out:i8* (base64_decode (cstring b64) (length b64) (ref size)))) (if (<= size (* (AudioBuffer_frames ab) (AudioBuffer_channels ab) 4)) (begin (memcpy (cast (AudioBuffer_data ab)) out size) void) (begin (println "error: AudioBuffer must be at least " size " bytes.") void)))))) AudioBuffer_set_data_b64_adhoc_26))
(bind-poly AudioBuffer_set_data_b64 AudioBuffer_set_data_b64_adhoc_W3ZvaWQsQXVkaW9CdWZmZXIqLFN0cmluZypd "")
(bind-lib xtmaudiobuffer AudioBuffer_samplerate [double,AudioBuffer*]*)
(bind-lib xtmaudiobuffer AudioBuffer_samplerate_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_samplerate" (llvm:get-function-pointer "AudioBuffer_samplerate_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_set_samplerate [double,AudioBuffer*,double]*)
(bind-lib xtmaudiobuffer AudioBuffer_set_samplerate_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_set_samplerate" (llvm:get-function-pointer "AudioBuffer_set_samplerate_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_loop_start [i64,AudioBuffer*]*)
(bind-lib xtmaudiobuffer AudioBuffer_loop_start_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_loop_start" (llvm:get-function-pointer "AudioBuffer_loop_start_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_set_loop_start [i64,AudioBuffer*,i64]*)
(bind-lib xtmaudiobuffer AudioBuffer_set_loop_start_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_set_loop_start" (llvm:get-function-pointer "AudioBuffer_set_loop_start_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_loop_frames [i64,AudioBuffer*]*)
(bind-lib xtmaudiobuffer AudioBuffer_loop_frames_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_loop_frames" (llvm:get-function-pointer "AudioBuffer_loop_frames_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_set_loop_frames [i64,AudioBuffer*,i64]*)
(bind-lib xtmaudiobuffer AudioBuffer_set_loop_frames_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_set_loop_frames" (llvm:get-function-pointer "AudioBuffer_set_loop_frames_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_root_pitch [i64,AudioBuffer*]*)
(bind-lib xtmaudiobuffer AudioBuffer_root_pitch_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_root_pitch" (llvm:get-function-pointer "AudioBuffer_root_pitch_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_set_root_pitch [i64,AudioBuffer*,i64]*)
(bind-lib xtmaudiobuffer AudioBuffer_set_root_pitch_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_set_root_pitch" (llvm:get-function-pointer "AudioBuffer_set_root_pitch_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_phase [double,AudioBuffer*]*)
(bind-lib xtmaudiobuffer AudioBuffer_phase_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_phase" (llvm:get-function-pointer "AudioBuffer_phase_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_set_phase [double,AudioBuffer*,double]*)
(bind-lib xtmaudiobuffer AudioBuffer_set_phase_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_set_phase" (llvm:get-function-pointer "AudioBuffer_set_phase_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_num_samples [i64,AudioBuffer*]*)
(bind-lib xtmaudiobuffer AudioBuffer_num_samples_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_num_samples" (llvm:get-function-pointer "AudioBuffer_num_samples_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_seek [i1,AudioBuffer*,i64]*)
(bind-lib xtmaudiobuffer AudioBuffer_seek_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_seek" (llvm:get-function-pointer "AudioBuffer_seek_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_peek [float,AudioBuffer*,i64]*)
(bind-lib xtmaudiobuffer AudioBuffer_peek_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_peek" (llvm:get-function-pointer "AudioBuffer_peek_scheme"))
(bind-lib xtmaudiobuffer AudioBuffer_peek_looped [float,AudioBuffer*,i64]*)
(bind-lib xtmaudiobuffer AudioBuffer_peek_looped_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_peek_looped" (llvm:get-function-pointer "AudioBuffer_peek_looped_scheme"))
(register-lib-func xtmaudiobuffer AudioBuffer_read_adhoc_W2Zsb2F0LEF1ZGlvQnVmZmVyKixpNjRd [float,AudioBuffer*,i64]* 0 "" '(let ((AudioBuffer_read_adhoc_41 (lambda (ab:AudioBuffer* chan) (let ((ph (AudioBuffer_playhead ab))) (if (< ph (AudioBuffer_frames ab)) (begin (if (= chan 0) (AudioBuffer_set_playhead ab (+ ph 1))) (pref (AudioBuffer_data ab) (+ (* ph (AudioBuffer_channels ab)) chan))) 0.00000000000000000000))))) AudioBuffer_read_adhoc_41))
(bind-poly AudioBuffer_read AudioBuffer_read_adhoc_W2Zsb2F0LEF1ZGlvQnVmZmVyKixpNjRd "")
(register-lib-func xtmaudiobuffer AudioBuffer_read_adhoc_W2Zsb2F0LEF1ZGlvQnVmZmVyKixpNjQsaTY0XQ [float,AudioBuffer*,i64,i64]* 0 "" '(let ((AudioBuffer_read_adhoc_42 (lambda (ab:AudioBuffer* frame chan) (if (< frame (AudioBuffer_frames ab)) (begin (if (= chan 0) (AudioBuffer_set_playhead ab frame)) (pref (AudioBuffer_data ab) (+ (* frame (AudioBuffer_channels ab)) chan))) 0.00000000000000000000)))) AudioBuffer_read_adhoc_42))
(bind-poly AudioBuffer_read AudioBuffer_read_adhoc_W2Zsb2F0LEF1ZGlvQnVmZmVyKixpNjQsaTY0XQ "")
(register-lib-func xtmaudiobuffer AudioBuffer_read_looped_adhoc_W2Zsb2F0LEF1ZGlvQnVmZmVyKixpNjRd [float,AudioBuffer*,i64]* 0 "" '(let ((AudioBuffer_read_looped_adhoc_43 (lambda (ab:AudioBuffer* chan) (let ((ph (AudioBuffer_playhead ab))) (if (= chan 0) (AudioBuffer_set_playhead ab (% (+ ph 1) (AudioBuffer_frames ab)))) (pref (AudioBuffer_data ab) (+ (* ph (AudioBuffer_channels ab)) chan)))))) AudioBuffer_read_looped_adhoc_43))
(bind-poly AudioBuffer_read_looped AudioBuffer_read_looped_adhoc_W2Zsb2F0LEF1ZGlvQnVmZmVyKixpNjRd "")
(register-lib-func xtmaudiobuffer AudioBuffer_read_looped_adhoc_W2Zsb2F0LEF1ZGlvQnVmZmVyKixpNjQsaTY0XQ [float,AudioBuffer*,i64,i64]* 0 "" '(let ((AudioBuffer_read_looped_adhoc_44 (lambda (ab:AudioBuffer* frame chan) (if (= chan 0) (AudioBuffer_set_playhead ab (% frame (AudioBuffer_frames ab)))) (if (> frame (AudioBuffer_frames ab)) 0.00000000000000000000 (pref (AudioBuffer_data ab) (+ (* frame (AudioBuffer_channels ab)) chan)))))) AudioBuffer_read_looped_adhoc_44))
(bind-poly AudioBuffer_read_looped AudioBuffer_read_looped_adhoc_W2Zsb2F0LEF1ZGlvQnVmZmVyKixpNjQsaTY0XQ "")
(bind-lib xtmaudiobuffer AudioBuffer_ptr [float*,AudioBuffer*,i64,i64]*)
(bind-lib xtmaudiobuffer AudioBuffer_ptr_scheme [i8*,i8*,i8*]*)
(mk-ff "AudioBuffer_ptr" (llvm:get-function-pointer "AudioBuffer_ptr_scheme"))
(register-lib-func xtmaudiobuffer AudioBuffer_read_interp_adhoc_W2Zsb2F0LEF1ZGlvQnVmZmVyKixmbG9hdCxpNjRd [float,AudioBuffer*,float,i64]* 0 "" '(let ((AudioBuffer_read_interp_adhoc_46 (lambda (buffer:AudioBuffer* freq:SAMPLE chan:i64) (let ((channels:i64 (AudioBuffer_channels buffer)) (frames (AudioBuffer_frames buffer)) (looplgth (AudioBuffer_loop_frames buffer)) (loopstart (AudioBuffer_loop_start buffer)) (oneshot (= looplgth 0)) (segments (if oneshot 0 (/ frames looplgth))) (phase:double (AudioBuffer_phase buffer)) (rate (/ (convert freq) (convert (midi2frq_local (convert (AudioBuffer_root_pitch buffer)))))) (pos:double phase) (lgth:i64 (if oneshot (- (- frames 1) loopstart) (clamp looplgth 0 (- frames loopstart)))) (lgthf:double (convert lgth)) (dat (AudioBuffer_ptr buffer (clamp loopstart 0 (- frames looplgth)) chan)) (y1 0.00000000000000000000) (y1pos:i64 (* channels (convert (floor (% (- pos rate) lgthf))))) (x0 0.00000000000000000000) (x0pos:i64 (* channels (convert (floor pos)))) (x1 0.00000000000000000000) (x1pos:i64 (* channels (convert (floor (% (+ pos rate) lgthf))))) (x2 0.00000000000000000000) (x2pos:i64 (* channels (convert (floor (% (+ pos rate rate) lgthf)))))) (if (> pos lgthf) 0.00000000000000000000 (begin (set! y1 (if (and oneshot (< x0pos 1)) 0.00000000000000000000 (pref dat y1pos))) (set! x0 (pref dat x0pos)) (set! x1 (pref dat x1pos)) (set! x2 (pref dat x2pos)) (if (= chan 0) (AudioBuffer_set_phase buffer (if oneshot (+ pos rate) (% (+ pos rate) lgthf)))) (hermite_interp_local (dtof (% pos 1.0000000000000000000)) y1 x0 x1 x2))))))) AudioBuffer_read_interp_adhoc_46))
(bind-poly AudioBuffer_read_interp AudioBuffer_read_interp_adhoc_W2Zsb2F0LEF1ZGlvQnVmZmVyKixmbG9hdCxpNjRd "")
(register-lib-func xtmaudiobuffer AudioBuffer_read_interp_pw_adhoc_W2Zsb2F0LEF1ZGlvQnVmZmVyKixmbG9hdCxpNjQsZmxvYXRd [float,AudioBuffer*,float,i64,float]* 0 "" '(let ((AudioBuffer_read_interp_pw_adhoc_47 (lambda (buffer:AudioBuffer* freq:SAMPLE chan:i64 pw:float) (set! pw (* pw 0.99999990000000005264)) (let ((channels:i64 (AudioBuffer_channels buffer)) (frames (AudioBuffer_frames buffer)) (looplgth (AudioBuffer_loop_frames buffer)) (loopstart (AudioBuffer_loop_start buffer)) (oneshot (= looplgth 0)) (segments (if oneshot 0 (/ frames looplgth))) (phase:double (AudioBuffer_phase buffer)) (rate (/ (convert freq) (convert (midi2frq_local (convert (AudioBuffer_root_pitch buffer)))))) (pos:double phase) (lgth:i64 (if oneshot (- (- frames 1) loopstart) (clamp looplgth 0 (- frames loopstart)))) (lgthf:double (convert lgth)) (offset (* (convert (floor (* pw (convert segments)))) looplgth)) (mix (% (* pw (convert segments)) 1.0000000000000000000)) (dat1 (AudioBuffer_ptr buffer offset chan)) (dat2 (AudioBuffer_ptr buffer (% (+ offset looplgth) frames) chan)) (dy1 0.00000000000000000000) (dx0 0.00000000000000000000) (dx1 0.00000000000000000000) (dx2 0.00000000000000000000) (y1 0.00000000000000000000) (x0 0.00000000000000000000) (x1 0.00000000000000000000) (x2 0.00000000000000000000) (y1pos:i64 (* channels (convert (floor (% (- pos rate) lgthf))))) (x0pos:i64 (* channels (convert (floor pos)))) (x1pos:i64 (* channels (convert (floor (% (+ pos rate) lgthf))))) (x2pos:i64 (* channels (convert (floor (% (+ pos rate rate) lgthf)))))) (if (> pos lgthf) 0.00000000000000000000 (begin (set! dy1 (- (pref dat2 y1pos) (pref dat1 y1pos))) (set! y1 (if (and oneshot (< x0pos 1)) 0.00000000000000000000 (+ (pref dat1 y1pos) (* dy1 mix)))) (set! dx0 (- (pref dat2 x0pos) (pref dat1 x0pos))) (set! x0 (+ (pref dat1 x0pos) (* dx0 mix))) (set! dx1 (- (pref dat2 x1pos) (pref dat1 x1pos))) (set! x1 (+ (pref dat1 x1pos) (* dx1 mix))) (set! dx2 (- (pref dat2 x2pos) (pref dat1 x2pos))) (set! x2 (+ (pref dat1 x2pos) (* dx2 mix))) (if (= chan 0) (AudioBuffer_set_phase buffer (if oneshot (+ pos rate) (% (+ pos rate) lgthf)))) (hermite_interp_local (dtof (% pos 1.0000000000000000000)) y1 x0 x1 x2))))))) AudioBuffer_read_interp_pw_adhoc_47))
(bind-poly AudioBuffer_read_interp_pw AudioBuffer_read_interp_pw_adhoc_W2Zsb2F0LEF1ZGlvQnVmZmVyKixmbG9hdCxpNjQsZmxvYXRd "")
(register-lib-func xtmaudiobuffer AudioBuffer_read_interp_mix_adhoc_W2Zsb2F0LEF1ZGlvQnVmZmVyKixBdWRpb0J1ZmZlciosZmxvYXQsaTY0LGZsb2F0XQ [float,AudioBuffer*,AudioBuffer*,float,i64,float]* 0 "" '(let ((AudioBuffer_read_interp_mix_adhoc_48 (lambda (buffer:AudioBuffer* buffer2:AudioBuffer* freq:SAMPLE chan:i64 mix:float) (let ((channels:i64 (AudioBuffer_channels buffer)) (frames (AudioBuffer_frames buffer)) (looplgth (AudioBuffer_loop_frames buffer)) (loopstart (AudioBuffer_loop_start buffer)) (oneshot (= looplgth 0)) (segments (if oneshot 0 (/ frames looplgth))) (phase:double (AudioBuffer_phase buffer)) (rate (/ (convert freq) (convert (midi2frq_local (convert (AudioBuffer_root_pitch buffer)))))) (pos:double phase) (lgth:i64 (if oneshot (- (- frames 1) loopstart) (clamp looplgth 0 (- frames loopstart)))) (lgthf:double (convert lgth)) (dat1 (AudioBuffer_ptr buffer (clamp loopstart 0 (- frames looplgth)) chan)) (dat2 (AudioBuffer_ptr buffer2 (clamp loopstart 0 (- frames looplgth)) chan)) (dy1 0.00000000000000000000) (dx0 0.00000000000000000000) (dx1 0.00000000000000000000) (dx2 0.00000000000000000000) (y1 0.00000000000000000000) (y1pos:i64 (* channels (convert (floor (% (- pos rate) lgthf))))) (x0 0.00000000000000000000) (x0pos:i64 (* channels (convert (floor pos)))) (x1 0.00000000000000000000) (x1pos:i64 (* channels (convert (floor (% (+ pos rate) lgthf))))) (x2 0.00000000000000000000) (x2pos:i64 (* channels (convert (floor (% (+ pos rate rate) lgthf)))))) (set! mix (fabs mix)) (if (> pos lgthf) 0.00000000000000000000 (begin (set! dy1 (- (pref dat2 y1pos) (pref dat1 y1pos))) (set! y1 (if (and oneshot (< x0pos 1)) 0.00000000000000000000 (+ (pref dat1 y1pos) (* dy1 mix)))) (set! dx0 (- (pref dat2 x0pos) (pref dat1 x0pos))) (set! x0 (+ (pref dat1 x0pos) (* dx0 mix))) (set! dx1 (- (pref dat2 x1pos) (pref dat1 x1pos))) (set! x1 (+ (pref dat1 x1pos) (* dx1 mix))) (set! dx2 (- (pref dat2 x2pos) (pref dat1 x2pos))) (set! x2 (+ (pref dat1 x2pos) (* dx2 mix))) (if (= chan 0) (AudioBuffer_set_phase buffer (if oneshot (+ pos rate) (% (+ pos rate) lgthf)))) (hermite_interp_local (dtof (% pos 1.0000000000000000000)) y1 x0 x1 x2))))))) AudioBuffer_read_interp_mix_adhoc_48))
(bind-poly AudioBuffer_read_interp_mix AudioBuffer_read_interp_mix_adhoc_W2Zsb2F0LEF1ZGlvQnVmZmVyKixBdWRpb0J1ZmZlciosZmxvYXQsaTY0LGZsb2F0XQ "")
(bind-lib xtmaudiobuffer swapi16 [i16,i16]*)
(bind-lib xtmaudiobuffer swapi16_scheme [i8*,i8*,i8*]*)
(mk-ff "swapi16" (llvm:get-function-pointer "swapi16_scheme"))
(bind-lib xtmaudiobuffer swapi32 [i32,i32]*)
(bind-lib xtmaudiobuffer swapi32_scheme [i8*,i8*,i8*]*)
(mk-ff "swapi32" (llvm:get-function-pointer "swapi32_scheme"))
(register-lib-func xtmaudiobuffer swap_bytes_inplace_adhoc_W3ZvaWQsaTgqLGk2NF0 [void,i8*,i64]* 0 "" '(let ((swap_bytes_inplace_adhoc_51 (lambda (buf:i8* nbytes) (let ((tmp 0) (i 0)) (dotimes (i (/ nbytes 2)) (set! tmp (pref buf i)) (pset! buf i (pref buf (- nbytes 1 i))) (pset! buf (- nbytes 1 i) tmp)))))) swap_bytes_inplace_adhoc_51))
(bind-poly swap_bytes_inplace swap_bytes_inplace_adhoc_W3ZvaWQsaTgqLGk2NF0 "")
(register-lib-func xtmaudiobuffer audiofile_float_to_sample_le_adhoc_W3ZvaWQsaTgqLGZsb2F0KixpNjRd [void,i8*,float*,i64]* 0 "" '(let ((audiofile_float_to_sample_le_adhoc_52 (lambda (src:i8* dest:SAMPLE* nsamp) (doloop (i nsamp) (pset! dest i (pref (cast src float*) i)))))) audiofile_float_to_sample_le_adhoc_52))
(bind-poly audiofile_float_to_sample_le audiofile_float_to_sample_le_adhoc_W3ZvaWQsaTgqLGZsb2F0KixpNjRd "")
(register-lib-func xtmaudiobuffer audiofile_float_to_sample_be_adhoc_W3ZvaWQsaTgqLGZsb2F0KixpNjRd [void,i8*,float*,i64]* 0 "" '(let ((audiofile_float_to_sample_be_adhoc_53 (let ((tmp:i32* (zalloc 1))) (lambda (src:i8* dest:SAMPLE* nsamp) (doloop (i nsamp) (pset! tmp 0 (pref (cast src i32*) i)) (pset! tmp 0 (swapi32 (pref tmp 0))) (pset! dest i (pref (cast tmp float*) 0))))))) audiofile_float_to_sample_be_adhoc_53))
(bind-poly audiofile_float_to_sample_be audiofile_float_to_sample_be_adhoc_W3ZvaWQsaTgqLGZsb2F0KixpNjRd "")
(register-lib-func xtmaudiobuffer audiofile_16bitPCM_to_sample_le_adhoc_W3ZvaWQsaTgqLGZsb2F0KixpNjRd [void,i8*,float*,i64]* 0 "" '(let ((audiofile_16bitPCM_to_sample_le_adhoc_54 (let ((range (i64tod (<< 1 16)))) (lambda (src:i8* dest:SAMPLE* nsamp) (doloop (i nsamp) (pset! dest i (dtof (/ (i16tod (pref (cast src i16*) i)) range)))))))) audiofile_16bitPCM_to_sample_le_adhoc_54))
(bind-poly audiofile_16bitPCM_to_sample_le audiofile_16bitPCM_to_sample_le_adhoc_W3ZvaWQsaTgqLGZsb2F0KixpNjRd "")
(register-lib-func xtmaudiobuffer audiofile_16bitPCM_to_sample_be_adhoc_W3ZvaWQsaTgqLGZsb2F0KixpNjRd [void,i8*,float*,i64]* 0 "" '(let ((audiofile_16bitPCM_to_sample_be_adhoc_55 (let ((range (i64tod (<< 1 16)))) (lambda (src:i8* dest:SAMPLE* nsamp) (doloop (i nsamp) (pset! dest i (dtof (/ (i16tod (swapi16 (pref (cast src i16*) i))) range)))))))) audiofile_16bitPCM_to_sample_be_adhoc_55))
(bind-poly audiofile_16bitPCM_to_sample_be audiofile_16bitPCM_to_sample_be_adhoc_W3ZvaWQsaTgqLGZsb2F0KixpNjRd "")
(register-lib-func xtmaudiobuffer audiofile_24bitPCM_to_sample_le_adhoc_W3ZvaWQsaTgqLGZsb2F0KixpNjRd [void,i8*,float*,i64]* 0 "" '(let ((audiofile_24bitPCM_to_sample_le_adhoc_56 (let ((range (i64tod (<< 1 32))) (tmp:i8* (zalloc 4))) (lambda (src:i8* dest:SAMPLE* nsamp) (pset! tmp 3 0) (doloop (i nsamp) (pset! tmp 1 (pref src (* i 3))) (pset! tmp 2 (pref src (+ (* i 3) 1))) (pset! tmp 3 (pref src (+ (* i 3) 2))) (pset! dest i (dtof (/ (i32tod (pref (cast tmp i32*) 0)) range)))))))) audiofile_24bitPCM_to_sample_le_adhoc_56))
(bind-poly audiofile_24bitPCM_to_sample_le audiofile_24bitPCM_to_sample_le_adhoc_W3ZvaWQsaTgqLGZsb2F0KixpNjRd "")
(register-lib-func xtmaudiobuffer audiofile_24bitPCM_to_sample_be_adhoc_W3ZvaWQsaTgqLGZsb2F0KixpNjRd [void,i8*,float*,i64]* 0 "" '(let ((audiofile_24bitPCM_to_sample_be_adhoc_57 (let ((range (i64tod (<< 1 32))) (tmp:i8* (zalloc 4))) (lambda (src:i8* dest:SAMPLE* nsamp) (pset! tmp 0 0) (doloop (i nsamp) (pset! tmp 3 (pref src (* i 3))) (pset! tmp 2 (pref src (+ (* i 3) 1))) (pset! tmp 1 (pref src (+ (* i 3) 2))) (pset! dest i (dtof (/ (i32tod (pref (cast tmp i32*) 0)) range)))))))) audiofile_24bitPCM_to_sample_be_adhoc_57))
(bind-poly audiofile_24bitPCM_to_sample_be audiofile_24bitPCM_to_sample_be_adhoc_W3ZvaWQsaTgqLGZsb2F0KixpNjRd "")
(register-lib-val xtmaudiobuffer WAVE_FORMAT_PCM i64 "")
(register-lib-val xtmaudiobuffer WAVE_FORMAT_IEEE_FLOAT i64 "")
(register-lib-val xtmaudiobuffer WAVE_FORMAT_ALAW i64 "")
(register-lib-val xtmaudiobuffer WAVE_FORMAT_MULAW i64 "")
(register-lib-val xtmaudiobuffer WAVE_FORMAT_EXTENSIBLE i64 "")
(register-lib-func xtmaudiobuffer audiofile_copy_samples_adhoc_W2kxLGk4KixmbG9hdCosaTY0LGk2NCxpNjQsaTFd [i1,i8*,float*,i64,i64,i64,i1]* 0 "" '(let ((audiofile_copy_samples_adhoc_58 (lambda (src dest nsamp bitdepth type le:i1) (cond ((= type WAVE_FORMAT_IEEE_FLOAT) (if le (audiofile_float_to_sample_le src dest nsamp) (audiofile_float_to_sample_be src dest nsamp)) #t) ((and (or (= type WAVE_FORMAT_PCM) (= type WAVE_FORMAT_EXTENSIBLE)) (= bitdepth 16)) (if le (audiofile_16bitPCM_to_sample_le src dest nsamp) (audiofile_16bitPCM_to_sample_be src dest nsamp)) #t) ((and (or (= type WAVE_FORMAT_PCM) (= type WAVE_FORMAT_EXTENSIBLE)) (= bitdepth 24)) (if le (audiofile_24bitPCM_to_sample_le src dest nsamp) (audiofile_24bitPCM_to_sample_be src dest nsamp)) #t) (else (println "audiofile error: the native xtlang wave/aiff file reader currently\nonly supports 16/24-bit PCM or 32-bit IEEE float audio\n\nFor more audio format options, use libs/external/sndfile.xtm") #f))))) audiofile_copy_samples_adhoc_58))
(bind-poly audiofile_copy_samples audiofile_copy_samples_adhoc_W2kxLGk4KixmbG9hdCosaTY0LGk2NCxpNjQsaTFd "")
(register-lib-type xtmaudiobuffer IffChunkHeader <|4,i8|,i32> "")
(register-lib-func xtmaudiobuffer IffChunkHeader_adhoc_W0lmZkNodW5rSGVhZGVyKix8NCxpOHwsaTMyXQ [IffChunkHeader*,|4,i8|,i32]* 0 "" '(let ((IffChunkHeader_adhoc_59 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) IffChunkHeader_adhoc_59))
(bind-poly IffChunkHeader IffChunkHeader_adhoc_W0lmZkNodW5rSGVhZGVyKix8NCxpOHwsaTMyXQ "")
(register-lib-func xtmaudiobuffer IffChunkHeader_z_adhoc_W0lmZkNodW5rSGVhZGVyKix8NCxpOHwsaTMyXQ [IffChunkHeader*,|4,i8|,i32]* 0 "" '(let ((IffChunkHeader_z_adhoc_60 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) IffChunkHeader_z_adhoc_60))
(bind-poly IffChunkHeader_z IffChunkHeader_z_adhoc_W0lmZkNodW5rSGVhZGVyKix8NCxpOHwsaTMyXQ "")
(register-lib-func xtmaudiobuffer IffChunkHeader_h_adhoc_W0lmZkNodW5rSGVhZGVyKix8NCxpOHwsaTMyXQ [IffChunkHeader*,|4,i8|,i32]* 0 "" '(let ((IffChunkHeader_h_adhoc_61 (lambda (arg_0 arg_1) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) IffChunkHeader_h_adhoc_61))
(bind-poly IffChunkHeader_h IffChunkHeader_h_adhoc_W0lmZkNodW5rSGVhZGVyKix8NCxpOHwsaTMyXQ "")
(register-lib-func xtmaudiobuffer IffChunkHeader_val_adhoc_W0lmZkNodW5rSGVhZGVyLHw0LGk4fCxpMzJd [IffChunkHeader,|4,i8|,i32]* 0 "" '(let ((IffChunkHeader_val_adhoc_62 (lambda (arg_0 arg_1) (let ((obj:IffChunkHeader* (salloc))) (tfill! obj arg_0 arg_1) (pref obj 0))))) IffChunkHeader_val_adhoc_62))
(bind-poly IffChunkHeader_val IffChunkHeader_val_adhoc_W0lmZkNodW5rSGVhZGVyLHw0LGk4fCxpMzJd "")
(register-lib-func xtmaudiobuffer hcopy_adhoc_W0lmZkNodW5rSGVhZGVyKixJZmZDaHVua0hlYWRlcipd [IffChunkHeader*,IffChunkHeader*]* 0 "" '(let ((hcopy_adhoc_63 (lambda (x:IffChunkHeader*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) obj)))) hcopy_adhoc_63))
(bind-poly hcopy hcopy_adhoc_W0lmZkNodW5rSGVhZGVyKixJZmZDaHVua0hlYWRlcipd "")
(register-lib-func xtmaudiobuffer hfree_adhoc_W3ZvaWQsSWZmQ2h1bmtIZWFkZXIqXQ [void,IffChunkHeader*]* 0 "" '(let ((hfree_adhoc_64 (lambda (x:IffChunkHeader*) () () (free x) void))) hfree_adhoc_64))
(bind-poly hfree hfree_adhoc_W3ZvaWQsSWZmQ2h1bmtIZWFkZXIqXQ "")
(register-lib-func xtmaudiobuffer zcopy_adhoc_W0lmZkNodW5rSGVhZGVyKixJZmZDaHVua0hlYWRlciosbXpvbmUqLG16b25lKl0 [IffChunkHeader*,IffChunkHeader*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_65 (lambda (x:IffChunkHeader* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (begin (tset! obj 1 (tref x 1))) (pop_zone) obj)) x)))) zcopy_adhoc_65))
(bind-poly zcopy zcopy_adhoc_W0lmZkNodW5rSGVhZGVyKixJZmZDaHVua0hlYWRlciosbXpvbmUqLG16b25lKl0 "")
(register-lib-val xtmaudiobuffer IFF_CHUNK_HEADER_SIZE i64 "")
(register-lib-func xtmaudiobuffer iffchunk_check_ID_adhoc_W2kxLElmZkNodW5rSGVhZGVyKixpOCpd [i1,IffChunkHeader*,i8*]* 0 "check the chunk & form IDs are valid" '(let ((iffchunk_check_ID_adhoc_66 (lambda (hdr:IffChunkHeader* id:i8*) (= (strncmp (aref-ptr (tref-ptr hdr 0) 0) id 4) 0)))) iffchunk_check_ID_adhoc_66))
(bind-poly iffchunk_check_ID iffchunk_check_ID_adhoc_W2kxLElmZkNodW5rSGVhZGVyKixpOCpd "")
(register-lib-func xtmaudiobuffer iffchunk_size_adhoc_W2kzMixJZmZDaHVua0hlYWRlciosaTFd [i32,IffChunkHeader*,i1]* 0 "" '(let ((iffchunk_size_adhoc_67 (lambda (hdr:IffChunkHeader* le:i1) (if le (tref hdr 1) (swapi32 (tref hdr 1)))))) iffchunk_size_adhoc_67))
(bind-poly iffchunk_size iffchunk_size_adhoc_W2kzMixJZmZDaHVua0hlYWRlciosaTFd "")
(register-lib-func xtmaudiobuffer iffchunk_find_smart_adhoc_W2k4KixpOCosaTgqLGkxXQ [i8*,i8*,i8*,i1]* 0 "" '(let ((iffchunk_find_smart_adhoc_68 (lambda (fileptr:i8* id le:i1) (while (not (iffchunk_check_ID (cast fileptr IffChunkHeader*) id)) (set! fileptr (pref-ptr fileptr (+ IFF_CHUNK_HEADER_SIZE (convert (iffchunk_size (cast fileptr IffChunkHeader*) le) i64))))) fileptr))) iffchunk_find_smart_adhoc_68))
(bind-poly iffchunk_find_smart iffchunk_find_smart_adhoc_W2k4KixpOCosaTgqLGkxXQ "")
(register-lib-func xtmaudiobuffer iffchunk_find_dumb_adhoc_W2k4KixpOCosaTgqXQ [i8*,i8*,i8*]* 0 "" '(let ((iffchunk_find_dumb_adhoc_69 (lambda (fileptr:i8* id:i8*) (while (<> (strncmp fileptr id 4) 0) (set! fileptr (pref-ptr fileptr 1))) fileptr))) iffchunk_find_dumb_adhoc_69))
(bind-poly iffchunk_find_dumb iffchunk_find_dumb_adhoc_W2k4KixpOCosaTgqXQ "")
(register-lib-func xtmaudiobuffer print_adhoc_W3ZvaWQsSWZmQ2h1bmtIZWFkZXIqXQ [void,IffChunkHeader*]* 0 "specialised print function for IffChunkHeader*" '(let ((print_adhoc_70 (lambda (hdr:IffChunkHeader*) (if (null? hdr) (printf "<IffChunkHeader 0x0>") (printf "<IffChunkHeader chunk ID: %.4s  chunk size: %d>" (aref-ptr (tref-ptr hdr 0) 0) (iffchunk_size hdr #t))) void))) print_adhoc_70))
(bind-poly print print_adhoc_W3ZvaWQsSWZmQ2h1bmtIZWFkZXIqXQ "")
(register-lib-func xtmaudiobuffer toString_adhoc_W1N0cmluZyosSWZmQ2h1bmtIZWFkZXIqXQ [String*,IffChunkHeader*]* 0 "specialised toString function for IffChunkHeader*" '(let ((toString_adhoc_71 (lambda (hdr:IffChunkHeader*) (let ((str:i8* (salloc 256))) (if (null? hdr) (sprintf str "<IffChunkHeader 0x0>") (sprintf str "<IffChunkHeader chunk ID: %.4s  chunk size: %d>" (aref-ptr (tref-ptr hdr 0) 0) (iffchunk_size hdr #t))) (Str str))))) toString_adhoc_71))
(bind-poly toString toString_adhoc_W1N0cmluZyosSWZmQ2h1bmtIZWFkZXIqXQ "")
(register-lib-func xtmaudiobuffer wave_validate_adhoc_W2kxLGk4Kl0 [i1,i8*]* 0 "" '(let ((wave_validate_adhoc_72 (lambda (fileptr) (and (= (strncmp fileptr "RIFF" 4) 0) (= (strncmp (pref-ptr fileptr 8) "WAVE" 4) 0))))) wave_validate_adhoc_72))
(bind-poly wave_validate wave_validate_adhoc_W2kxLGk4Kl0 "")
(register-lib-func xtmaudiobuffer audiofile_wave_read_samples_adhoc_W2kxLGk4KixmbG9hdCpd [i1,i8*,float*]* 0 "" '(let ((audiofile_wave_read_samples_adhoc_73 (lambda (filepath dest:SAMPLE*) (let ((filedata (sys_slurp_file filepath))) (if (null? filedata) (begin (println "wavefile error: could not open file") (free filedata) #f) (cond ((not (wave_validate filedata)) (println "wavefile error: there was a problem with the chunk IDs...\nis the file corrupt?") (free filedata) #f) (else (let ((fmt (iffchunk_find_dumb filedata "fmt ")) (chunksize (i32toi64 (iffchunk_size (cast fmt IffChunkHeader*) #t))) (type (i16toi64 (pref (cast (pref-ptr fmt IFF_CHUNK_HEADER_SIZE) i16*) 0))) (nchan (i16toi64 (pref (cast (pref-ptr fmt (+ IFF_CHUNK_HEADER_SIZE 2)) i16*) 0))) (samplerate (i32toi64 (pref (cast (pref-ptr fmt (+ IFF_CHUNK_HEADER_SIZE 4)) i32*) 0))) (bitdepth (i16toi64 (pref (cast (pref-ptr fmt (+ IFF_CHUNK_HEADER_SIZE 14)) i16*) 0))) (data (iffchunk_find_dumb filedata "data")) (nframes (/ (i32toi64 (iffchunk_size (cast data IffChunkHeader*) #t)) (* nchan (/ bitdepth 8)))) (res (audiofile_copy_samples (pref-ptr data IFF_CHUNK_HEADER_SIZE) dest (* nchan nframes) bitdepth type #t))) (free filedata) res)))))))) audiofile_wave_read_samples_adhoc_73))
(bind-poly audiofile_wave_read_samples audiofile_wave_read_samples_adhoc_W2kxLGk4KixmbG9hdCpd "")
(register-lib-func xtmaudiobuffer AudioBuffer_from_wave_adhoc_W0F1ZGlvQnVmZmVyKixpOCpd [AudioBuffer*,i8*]* 0 "" '(let ((AudioBuffer_from_wave_adhoc_74 (lambda (filepath) (let ((filedata (sys_slurp_file filepath))) (if (null? filedata) (begin (println "wavefile error: could not open file") (free filedata) null) (cond ((not (wave_validate filedata)) (println "wavefile error: there was a problem with the chunk IDs...\nis the file corrupt?") (free filedata) null) (else (let ((fmt (iffchunk_find_dumb filedata "fmt ")) (chunksize (i32toi64 (iffchunk_size (cast fmt IffChunkHeader*) #t))) (type (i16toi64 (pref (cast (pref-ptr fmt IFF_CHUNK_HEADER_SIZE) i16*) 0))) (nchan (i16toi64 (pref (cast (pref-ptr fmt (+ IFF_CHUNK_HEADER_SIZE 2)) i16*) 0))) (samplerate (i32tod (pref (cast (pref-ptr fmt (+ IFF_CHUNK_HEADER_SIZE 4)) i32*) 0))) (bitdepth (i16toi64 (pref (cast (pref-ptr fmt (+ IFF_CHUNK_HEADER_SIZE 14)) i16*) 0))) (data (iffchunk_find_dumb filedata "data")) (nframes (/ (i32toi64 (iffchunk_size (cast data IffChunkHeader*) #t)) (* nchan (/ bitdepth 8)))) (ab (AudioBuffer nframes nchan samplerate)) (abres (AudioBuffer_set_filepath ab (Str filepath))) (res (audiofile_copy_samples (pref-ptr data IFF_CHUNK_HEADER_SIZE) (AudioBuffer_data ab) (* nchan nframes) bitdepth type #t))) (free filedata) (if res ab null))))))))) AudioBuffer_from_wave_adhoc_74))
(bind-poly AudioBuffer_from_wave AudioBuffer_from_wave_adhoc_W0F1ZGlvQnVmZmVyKixpOCpd "")
(register-lib-func xtmaudiobuffer aiff_validate_adhoc_W2kxLGk4Kl0 [i1,i8*]* 0 "" '(let ((aiff_validate_adhoc_75 (lambda (fileptr) (and (= (strncmp fileptr "FORM" 4) 0) (= (strncmp (pref-ptr fileptr 8) "AIFF" 4) 0))))) aiff_validate_adhoc_75))
(bind-poly aiff_validate aiff_validate_adhoc_W2kxLGk4Kl0 "")
(register-lib-func xtmaudiobuffer audiofile_aiff_read_samples_adhoc_W2kxLGk4KixmbG9hdCpd [i1,i8*,float*]* 0 "" '(let ((audiofile_aiff_read_samples_adhoc_76 (lambda (filepath dest:SAMPLE*) (let ((filedata (sys_slurp_file filepath))) (if (null? filedata) (begin (println "aiff file error: could not open file") #f) (let ((common (iffchunk_find_dumb filedata "COMM")) (sounddata (iffchunk_find_dumb filedata "SSND"))) (let ((nchan (i16toi64 (swapi16 (pref (cast (pref-ptr common IFF_CHUNK_HEADER_SIZE) i16*) 0)))) (nframes (i32toi64 (swapi32 (pref (cast (pref-ptr common (+ IFF_CHUNK_HEADER_SIZE 2)) i32*) 0)))) (bitdepth (i16toi64 (swapi16 (pref (cast (pref-ptr common (+ IFF_CHUNK_HEADER_SIZE 6)) i16*) 0)))) (res (audiofile_copy_samples (pref-ptr sounddata (+ IFF_CHUNK_HEADER_SIZE 8)) dest (* nchan nframes) bitdepth WAVE_FORMAT_PCM #f))) (free filedata) res))))))) audiofile_aiff_read_samples_adhoc_76))
(bind-poly audiofile_aiff_read_samples audiofile_aiff_read_samples_adhoc_W2kxLGk4KixmbG9hdCpd "")
(register-lib-func xtmaudiobuffer AudioBuffer_from_aiff_adhoc_W0F1ZGlvQnVmZmVyKixpOCpd [AudioBuffer*,i8*]* 0 "" '(let ((AudioBuffer_from_aiff_adhoc_77 (lambda (filepath) (let ((filedata (sys_slurp_file filepath))) (if (null? filedata) (begin (println "aiff file error: could not open file") null) (let ((common (iffchunk_find_dumb filedata "COMM")) (sounddata (iffchunk_find_dumb filedata "SSND"))) (let ((nchan (i16toi64 (swapi16 (pref (cast (pref-ptr common IFF_CHUNK_HEADER_SIZE) i16*) 0)))) (nframes (i32toi64 (swapi32 (pref (cast (pref-ptr common (+ IFF_CHUNK_HEADER_SIZE 2)) i32*) 0)))) (bitdepth (i16toi64 (swapi16 (pref (cast (pref-ptr common (+ IFF_CHUNK_HEADER_SIZE 6)) i16*) 0)))) (samplerate (begin (swap_bytes_inplace (pref-ptr common (+ IFF_CHUNK_HEADER_SIZE 8)) 10) (fp80ptrtod (pref-ptr common (+ IFF_CHUNK_HEADER_SIZE 8))))) (ab (AudioBuffer nframes nchan samplerate)) (abres (AudioBuffer_set_filepath ab (Str filepath))) (res (audiofile_copy_samples (pref-ptr sounddata (+ IFF_CHUNK_HEADER_SIZE 8)) (AudioBuffer_data ab) (* nchan nframes) bitdepth WAVE_FORMAT_PCM #f))) (free filedata) (if res ab null)))))))) AudioBuffer_from_aiff_adhoc_77))
(bind-poly AudioBuffer_from_aiff AudioBuffer_from_aiff_adhoc_W0F1ZGlvQnVmZmVyKixpOCpd "")
(register-lib-func xtmaudiobuffer audiofile_read_samples_adhoc_W2kxLGk4KixmbG9hdCpd [i1,i8*,float*]* 0 "" '(let ((audiofile_read_samples_adhoc_78 (lambda (filepath dest:SAMPLE*) (cond ((rmatch "\\.wave?$" filepath) (audiofile_wave_read_samples filepath dest)) ((rmatch "\\.aiff?$" filepath) (audiofile_aiff_read_samples filepath dest)) (else (println "native xtlang audiofile reader only works for uncompressed aiff and wave files") #f))))) audiofile_read_samples_adhoc_78))
(bind-poly audiofile_read_samples audiofile_read_samples_adhoc_W2kxLGk4KixmbG9hdCpd "")
(register-lib-func xtmaudiobuffer AudioBuffer_adhoc_W0F1ZGlvQnVmZmVyKixpOCpd [AudioBuffer*,i8*]* 0 "" '(let ((AudioBuffer_adhoc_79 (lambda (filepath) (cond ((rmatch "\\.wave?$" filepath) (AudioBuffer_from_wave filepath)) ((rmatch "\\.aiff?$" filepath) (AudioBuffer_from_aiff filepath)) (else (println "native xtlang audiofile reader only works for uncompressed aiff and wave files") null))))) AudioBuffer_adhoc_79))
(bind-poly AudioBuffer AudioBuffer_adhoc_W0F1ZGlvQnVmZmVyKixpOCpd "")
(register-lib-func xtmaudiobuffer AudioBuffer_malloc_adhoc_W0F1ZGlvQnVmZmVyKixpNjQsaTY0LGRvdWJsZV0 [AudioBuffer*,i64,i64,double]* 0 "" '(let ((AudioBuffer_malloc_adhoc_80 (lambda (frames chans samplerate) (let ((dat:SAMPLE* (alloc (* frames chans)))) (AudioBuffer_h (String "") 0 frames chans dat samplerate 0 0 60 0.00000000000000000000))))) AudioBuffer_malloc_adhoc_80))
(bind-poly AudioBuffer_malloc AudioBuffer_malloc_adhoc_W0F1ZGlvQnVmZmVyKixpNjQsaTY0LGRvdWJsZV0 "")
(register-lib-func xtmaudiobuffer AudioBuffer_adhoc_W0F1ZGlvQnVmZmVyKixpNjQsaTY0LGRvdWJsZSxkb3VibGUsaTY0LGk2NCxpNjQsU3RyaW5nKl0 [AudioBuffer*,i64,i64,double,double,i64,i64,i64,String*]* 0 "" '(let ((AudioBuffer_adhoc_81 (lambda (frames chans samplerate phase root loopstart loopframes b64:String*) (let ((ab (AudioBuffer_malloc frames chans samplerate))) (AudioBuffer_set_phase ab phase) (AudioBuffer_set_root_pitch ab root) (AudioBuffer_set_loop_start ab loopstart) (AudioBuffer_set_loop_frames ab loopframes) (AudioBuffer_set_data_b64 ab b64) ab)))) AudioBuffer_adhoc_81))
(bind-poly AudioBuffer AudioBuffer_adhoc_W0F1ZGlvQnVmZmVyKixpNjQsaTY0LGRvdWJsZSxkb3VibGUsaTY0LGk2NCxpNjQsU3RyaW5nKl0 "")
(register-lib-func xtmaudiobuffer AudioBuffer_cstring_adhoc_W0F1ZGlvQnVmZmVyKixpNjQsaTY0LGRvdWJsZSxkb3VibGUsaTY0LGk2NCxpNjQsaTgqXQ [AudioBuffer*,i64,i64,double,double,i64,i64,i64,i8*]* 0 "" '(let ((AudioBuffer_cstring_adhoc_82 (lambda (frames chans samplerate phase root loopstart loopframes b64:i8*) (let ((ab (AudioBuffer_malloc frames chans samplerate))) (AudioBuffer_set_phase ab phase) (AudioBuffer_set_root_pitch ab root) (AudioBuffer_set_loop_start ab loopstart) (AudioBuffer_set_loop_frames ab loopframes) (AudioBuffer_set_data_b64 ab (String b64)) ab)))) AudioBuffer_cstring_adhoc_82))
(bind-poly AudioBuffer_cstring AudioBuffer_cstring_adhoc_W0F1ZGlvQnVmZmVyKixpNjQsaTY0LGRvdWJsZSxkb3VibGUsaTY0LGk2NCxpNjQsaTgqXQ "")
(register-lib-func xtmaudiobuffer AudioBuffer_adhoc_W0F1ZGlvQnVmZmVyKixBdWRpb0J1ZmZlcipd [AudioBuffer*,AudioBuffer*]* 0 "" '(let ((AudioBuffer_adhoc_83 (lambda (in:AudioBuffer*) (let ((size (* (AudioBuffer_frames in) (AudioBuffer_channels in))) (dat:SAMPLE* (alloc size)) (olddat:SAMPLE* (AudioBuffer_data in))) (memcpy (cast dat) (cast olddat) (* size 4)) (AudioBuffer_z (AudioBuffer_filepath in) (AudioBuffer_playhead in) (AudioBuffer_frames in) (AudioBuffer_channels in) dat (AudioBuffer_samplerate in) (AudioBuffer_loop_start in) (AudioBuffer_loop_frames in) (AudioBuffer_root_pitch in) (AudioBuffer_phase in)))))) AudioBuffer_adhoc_83))
(bind-poly AudioBuffer AudioBuffer_adhoc_W0F1ZGlvQnVmZmVyKixBdWRpb0J1ZmZlcipd "")
(register-lib-func xtmaudiobuffer AudioBuffer_shared_data_adhoc_W0F1ZGlvQnVmZmVyKixBdWRpb0J1ZmZlcipd [AudioBuffer*,AudioBuffer*]* 0 "" '(let ((AudioBuffer_shared_data_adhoc_84 (lambda (ab:AudioBuffer*) (AudioBuffer_z (String "") 0 (AudioBuffer_frames ab) (AudioBuffer_channels ab) (AudioBuffer_data ab) (AudioBuffer_samplerate ab) (AudioBuffer_loop_start ab) (AudioBuffer_loop_frames ab) (AudioBuffer_root_pitch ab) 0.00000000000000000000)))) AudioBuffer_shared_data_adhoc_84))
(bind-poly AudioBuffer_shared_data AudioBuffer_shared_data_adhoc_W0F1ZGlvQnVmZmVyKixBdWRpb0J1ZmZlcipd "")
(register-lib-func xtmaudiobuffer wt_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdF0qLEF1ZGlvQnVmZmVyKl0 [[float,float,float]*,AudioBuffer*]* 0 "" '(let ((wt_c_adhoc_85 (lambda (buffer:AudioBuffer*) (let ((wt (AudioBuffer_shared_data buffer))) (lambda (amp freq) (* amp (AudioBuffer_read_interp wt freq 0))))))) wt_c_adhoc_85))
(bind-poly wt_c wt_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdF0qLEF1ZGlvQnVmZmVyKl0 "")
(register-lib-func xtmaudiobuffer wt_mc_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXQsZmxvYXRdKixBdWRpb0J1ZmZlcipd [[float,i64,float,float]*,AudioBuffer*]* 0 "" '(let ((wt_mc_c_adhoc_86 (lambda (buffer:AudioBuffer*) (let ((wt (AudioBuffer_shared_data buffer))) (lambda (chan amp freq) (* amp (AudioBuffer_read_interp wt freq chan))))))) wt_mc_c_adhoc_86))
(bind-poly wt_mc_c wt_mc_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXQsZmxvYXRdKixBdWRpb0J1ZmZlcipd "")
(bind-lib xtmaudiobuffer playbuf [float,AudioBuffer*,i64]*)
(bind-lib xtmaudiobuffer playbuf_scheme [i8*,i8*,i8*]*)
(mk-ff "playbuf" (llvm:get-function-pointer "playbuf_scheme"))
(bind-lib xtmaudiobuffer loopbuf [float,AudioBuffer*,i64]*)
(bind-lib xtmaudiobuffer loopbuf_scheme [i8*,i8*,i8*]*)
(mk-ff "loopbuf" (llvm:get-function-pointer "loopbuf_scheme"))
(register-lib-func xtmaudiobuffer AudioBuffer_concat_adhoc_W0F1ZGlvQnVmZmVyKixBdWRpb0J1ZmZlciosQXVkaW9CdWZmZXIqXQ [AudioBuffer*,AudioBuffer*,AudioBuffer*]* 0 "" '(let ((AudioBuffer_concat_adhoc_89 (lambda (ab1:AudioBuffer* ab2:AudioBuffer*) (if (or (<> (AudioBuffer_samplerate ab1) (AudioBuffer_samplerate ab2)) (<> (AudioBuffer_channels ab1) (AudioBuffer_channels ab2))) (begin (println "Error: cannot concat incompatible audiobuffers") null) (let ((new (AudioBuffer (+ (AudioBuffer_frames ab1) (AudioBuffer_frames ab2)) (AudioBuffer_channels ab1) (AudioBuffer_samplerate ab1))) (dat1 (AudioBuffer_ptr new 0 0)) (dat2 (AudioBuffer_ptr new (AudioBuffer_frames ab1) 0))) (memcpy (cast dat1) (cast (AudioBuffer_ptr ab1 0 0)) (* (AudioBuffer_frames ab1) (AudioBuffer_channels ab1) 4)) (memcpy (cast dat2) (cast (AudioBuffer_ptr ab2 0 0)) (* (AudioBuffer_frames ab2) (AudioBuffer_channels ab2) 4)) new))))) AudioBuffer_concat_adhoc_89))
(bind-poly AudioBuffer_concat AudioBuffer_concat_adhoc_W0F1ZGlvQnVmZmVyKixBdWRpb0J1ZmZlciosQXVkaW9CdWZmZXIqXQ "")
(print-with-colors 'green 'default #t (print "done"))(print " in" (- (clock:clock) *xtmlib-audiobuffer-loaded-timer*) "seconds\n")
(define *xtmlib-audiobuffer-loaded-timer* (clock:clock))
(set! *impc:compiler:message:level* *impc:aot:prev-compiler-message-level*)
