(sys:load "libs/base/base.xtm" 'quiet)
(sys:load "libs/external/gl.xtm" 'quiet)
(sys:load "libs/external/stb_image.xtm" 'quiet)
(sys:load-preload-check 'gl-objects)
(define *xtmlib-gl-objects-loaded* #t)
(define *xtmlib-gl-objects-loaded-timer* (clock:clock))
(set! *impc:aot:prev-compiler-message-level* *impc:compiler:message:level*)
(set! *impc:compiler:message:level* 'low)

(print "Loading ")
(print-with-colors 'blue 'default #t (print 'xtmgl-objects))
(print " library... ")
(llvm:compile-ir (sys:slurp-file "libs/aot-cache/xtmgl-objects.ll"));; flush the JIT-compilation queue, so we only get this file's code in the module
(impc:compiler:flush-jit-compilation-queue)
(register-lib-func xtmgl-objects gl_print_error_adhoc_W3ZvaWQsaTgqXQ [void,i8*]* 0 "" '(let ((gl_print_error_adhoc_1 (lambda (msg:i8*) (let ((err (glGetError))) (cond ((= err GL_INVALID_ENUM) (printf "%s: Invalid Enum\n" msg)) ((= err GL_INVALID_VALUE) (printf "%s: Invalid Value\n" msg)) ((= err GL_INVALID_OPERATION) (printf "%s: Invalid Operation\n" msg)) ((= err GL_OUT_OF_MEMORY) (printf "%s: Out Of Memory\n" msg)) ((= err GL_INVALID_FRAMEBUFFER_OPERATION) (printf "%s: Invalid Framebuffer Operation\n" msg)) ((= err GL_NO_ERROR) 1:i32) (else (printf "%s\n" msg))) void)))) gl_print_error_adhoc_1))
(bind-poly gl_print_error gl_print_error_adhoc_W3ZvaWQsaTgqXQ "")
(register-lib-func xtmgl-objects gl_print_error_adhoc_W3ZvaWRd [void]* 0 "" '(let ((gl_print_error_adhoc_2 (lambda () (gl_print_error:[void,i8*]* "OpenGL Error")))) gl_print_error_adhoc_2))
(bind-poly gl_print_error gl_print_error_adhoc_W3ZvaWRd "")
(register-lib-func xtmgl-objects gl_print_driver_info_adhoc_W3ZvaWRd [void]* 0 "" '(let ((gl_print_driver_info_adhoc_3 (lambda () (println "--------------------------------------------------") (println "Extempore OpenGL driver info") (println "--------------------------------------------------") (printf "  Vendor:  %s\n" (glGetString GL_VENDOR)) (printf "Renderer:  %s\n" (glGetString GL_RENDERER)) (printf " Version:  %s\n" (glGetString GL_VERSION)) (println "--------------------------------------------------") void))) gl_print_driver_info_adhoc_3))
(bind-poly gl_print_driver_info gl_print_driver_info_adhoc_W3ZvaWRd "")
(register-lib-type xtmgl-objects VBO <i32,i32,i64,i8*> "")
(register-lib-func xtmgl-objects VBO_adhoc_W1ZCTyosaTMyLGkzMixpNjQsaTgqXQ [VBO*,i32,i32,i64,i8*]* 0 "" '(let ((VBO_adhoc_4 (lambda (arg_0 arg_1 arg_2 arg_3) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) obj)))) VBO_adhoc_4))
(bind-poly VBO VBO_adhoc_W1ZCTyosaTMyLGkzMixpNjQsaTgqXQ "")
(register-lib-func xtmgl-objects VBO_z_adhoc_W1ZCTyosaTMyLGkzMixpNjQsaTgqXQ [VBO*,i32,i32,i64,i8*]* 0 "" '(let ((VBO_z_adhoc_5 (lambda (arg_0 arg_1 arg_2 arg_3) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) obj)))) VBO_z_adhoc_5))
(bind-poly VBO_z VBO_z_adhoc_W1ZCTyosaTMyLGkzMixpNjQsaTgqXQ "")
(register-lib-func xtmgl-objects VBO_h_adhoc_W1ZCTyosaTMyLGkzMixpNjQsaTgqXQ [VBO*,i32,i32,i64,i8*]* 0 "" '(let ((VBO_h_adhoc_6 (lambda (arg_0 arg_1 arg_2 arg_3) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) obj)))) VBO_h_adhoc_6))
(bind-poly VBO_h VBO_h_adhoc_W1ZCTyosaTMyLGkzMixpNjQsaTgqXQ "")
(register-lib-func xtmgl-objects VBO_val_adhoc_W1ZCTyxpMzIsaTMyLGk2NCxpOCpd [VBO,i32,i32,i64,i8*]* 0 "" '(let ((VBO_val_adhoc_7 (lambda (arg_0 arg_1 arg_2 arg_3) (let ((obj:VBO* (salloc))) (tfill! obj arg_0 arg_1 arg_2 arg_3) (pref obj 0))))) VBO_val_adhoc_7))
(bind-poly VBO_val VBO_val_adhoc_W1ZCTyxpMzIsaTMyLGk2NCxpOCpd "")
(register-lib-func xtmgl-objects hcopy_adhoc_W1ZCTyosVkJPKl0 [VBO*,VBO*]* 0 "" '(let ((hcopy_adhoc_8 (lambda (x:VBO*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) (tset! obj 2 (tref x 2)) (tset! obj 3 (tref x 3)) obj)))) hcopy_adhoc_8))
(bind-poly hcopy hcopy_adhoc_W1ZCTyosVkJPKl0 "")
(register-lib-func xtmgl-objects hfree_adhoc_W3ZvaWQsVkJPKl0 [void,VBO*]* 0 "" '(let ((hfree_adhoc_9 (lambda (x:VBO*) () () () () (free x) void))) hfree_adhoc_9))
(bind-poly hfree hfree_adhoc_W3ZvaWQsVkJPKl0 "")
(register-lib-func xtmgl-objects zcopy_adhoc_W1ZCTyosVkJPKixtem9uZSosbXpvbmUqXQ [VBO*,VBO*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_10 (lambda (x:VBO* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (begin (tset! obj 1 (tref x 1))) (begin (tset! obj 2 (tref x 2))) (if (llvm_ptr_in_zone fromz (cast (tref x 3) i8*)) (let ((newptr:i8* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 3) i8*) 1) (tset! obj 3 newptr)) (tset! obj 3 (tref x 3))) (pop_zone) obj)) x)))) zcopy_adhoc_10))
(bind-poly zcopy zcopy_adhoc_W1ZCTyosVkJPKixtem9uZSosbXpvbmUqXQ "")
(register-lib-func xtmgl-objects VBO_id_adhoc_W2kzMixWQk8qXQ [i32,VBO*]* 0 "" '(let ((VBO_id_adhoc_11 (lambda (vbo:VBO*) (tref vbo 0)))) VBO_id_adhoc_11))
(bind-poly VBO_id VBO_id_adhoc_W2kzMixWQk8qXQ "")
(register-lib-func xtmgl-objects VBO_type_adhoc_W2kzMixWQk8qXQ [i32,VBO*]* 0 "" '(let ((VBO_type_adhoc_12 (lambda (vbo:VBO*) (tref vbo 1)))) VBO_type_adhoc_12))
(bind-poly VBO_type VBO_type_adhoc_W2kzMixWQk8qXQ "")
(register-lib-func xtmgl-objects VBO_size_adhoc_W2k2NCxWQk8qXQ [i64,VBO*]* 0 "" '(let ((VBO_size_adhoc_13 (lambda (vbo:VBO*) (tref vbo 2)))) VBO_size_adhoc_13))
(bind-poly VBO_size VBO_size_adhoc_W2k2NCxWQk8qXQ "")
(register-lib-func xtmgl-objects VBO_data_adhoc_W2k4KixWQk8qXQ [i8*,VBO*]* 0 "" '(let ((VBO_data_adhoc_14 (lambda (vbo:VBO*) (tref vbo 3)))) VBO_data_adhoc_14))
(bind-poly VBO_data VBO_data_adhoc_W2k4KixWQk8qXQ "")
(register-lib-func xtmgl-objects print_adhoc_W3ZvaWQsVkJPKl0 [void,VBO*]* 0 "" '(let ((print_adhoc_15 (lambda (vbo:VBO*) (if (null? vbo) (printf "<VBO: 0x0>") (printf "<VBO: id=%d type=%s nbytes=%d data=%p>" (tref vbo 0) (let ((type (VBO_type vbo))) (cond ((= type GL_BYTE) "byte") ((= type GL_SHORT) "short") ((= type GL_INT) "int") ((= type GL_FLOAT) "float") (else "unknown"))) (tref vbo 2) (tref vbo 3))) void))) print_adhoc_15))
(bind-poly print print_adhoc_W3ZvaWQsVkJPKl0 "")
(register-lib-func xtmgl-objects toString_adhoc_W1N0cmluZyosVkJPKl0 [String*,VBO*]* 0 "" '(let ((toString_adhoc_16 (lambda (vbo:VBO*) (let ((s:i8* (salloc 256))) (if (null? vbo) (sprintf s "<VBO: 0x0>") (sprintf s "<VBO: id=%d type=%s nbytes=%d data=%p>" (tref vbo 0) (let ((type (VBO_type vbo))) (cond ((= type GL_BYTE) "byte") ((= type GL_SHORT) "short") ((= type GL_INT) "int") ((= type GL_FLOAT) "float") (else "unknown"))) (tref vbo 2) (tref vbo 3))) (String s))))) toString_adhoc_16))
(bind-poly toString toString_adhoc_W1N0cmluZyosVkJPKl0 "")
(register-lib-func xtmgl-objects VBO_create_adhoc_W1ZCTyosZmxvYXQqLGk2NF0 [VBO*,float*,i64]* 0 "" '(let ((VBO_create_adhoc_17 (lambda (buf:float* buflen) (let ((vbo:VBO* (halloc)) (id:GLuint* (salloc))) (glGenBuffers 1 id) (gl_print_error "Error creating VBO") (tfill! vbo (pref id 0) GL_FLOAT (* buflen 4) (cast buf GLvoid*)) (glBindBuffer GL_ARRAY_BUFFER (VBO_id vbo)) (glBufferData GL_ARRAY_BUFFER (VBO_size vbo) (VBO_data vbo) GL_STREAM_DRAW) (gl_print_error "Error setting VBO data") (printf "Created ") (print vbo) (printf "\n") vbo)))) VBO_create_adhoc_17))
(bind-poly VBO_create VBO_create_adhoc_W1ZCTyosZmxvYXQqLGk2NF0 "")
(register-lib-func xtmgl-objects VBO_create_adhoc_W1ZCTyosaTMyKixpNjRd [VBO*,i32*,i64]* 0 "" '(let ((VBO_create_adhoc_18 (lambda (buf:i32* buflen) (let ((vbo:VBO* (halloc)) (id:GLuint* (salloc))) (glGenBuffers 1 id) (gl_print_error "Error creating VBO") (tfill! vbo (pref id 0) GL_INT (* buflen 4) (cast buf GLvoid*)) (glBindBuffer GL_ARRAY_BUFFER (VBO_id vbo)) (glBufferData GL_ARRAY_BUFFER (VBO_size vbo) (VBO_data vbo) GL_STREAM_DRAW) (gl_print_error "Error setting VBO data") (printf "Created ") (print vbo) (printf "\n") vbo)))) VBO_create_adhoc_18))
(bind-poly VBO_create VBO_create_adhoc_W1ZCTyosaTMyKixpNjRd "")
(register-lib-func xtmgl-objects VBO_create_adhoc_W1ZCTyosZmxvYXQqLGk2NCxpMzJd [VBO*,float*,i64,i32]* 0 "" '(let ((VBO_create_adhoc_19 (lambda (buf:float* buflen usage) (let ((vbo:VBO* (halloc)) (id:GLuint* (salloc))) (glGenBuffers 1 id) (gl_print_error "Error creating VBO") (tfill! vbo (pref id 0) GL_FLOAT (* buflen 4) (cast buf GLvoid*)) (glBindBuffer GL_ARRAY_BUFFER (VBO_id vbo)) (glBufferData GL_ARRAY_BUFFER (VBO_size vbo) (VBO_data vbo) usage) (gl_print_error "Error setting VBO data") (printf "Created ") (print vbo) (printf "\n") vbo)))) VBO_create_adhoc_19))
(bind-poly VBO_create VBO_create_adhoc_W1ZCTyosZmxvYXQqLGk2NCxpMzJd "")
(register-lib-func xtmgl-objects VBO_create_adhoc_W1ZCTyosaTMyKixpNjQsaTMyXQ [VBO*,i32*,i64,i32]* 0 "" '(let ((VBO_create_adhoc_20 (lambda (buf:i32* buflen usage) (let ((vbo:VBO* (halloc)) (id:GLuint* (salloc))) (glGenBuffers 1 id) (gl_print_error "Error creating VBO") (tfill! vbo (pref id 0) GL_INT (* buflen 4) (cast buf GLvoid*)) (glBindBuffer GL_ARRAY_BUFFER (VBO_id vbo)) (glBufferData GL_ARRAY_BUFFER (VBO_size vbo) (VBO_data vbo) usage) (gl_print_error "Error setting VBO data") (printf "Created ") (print vbo) (printf "\n") vbo)))) VBO_create_adhoc_20))
(bind-poly VBO_create VBO_create_adhoc_W1ZCTyosaTMyKixpNjQsaTMyXQ "")
(register-lib-func xtmgl-objects VBO_update_data_adhoc_W3ZvaWQsVkJPKl0 [void,VBO*]* 0 "update the full buffer" '(let ((VBO_update_data_adhoc_21 (lambda (vbo:VBO*) (glBindBuffer GL_ARRAY_BUFFER (VBO_id vbo)) (gl_print_error "Error binding VBO") (glBufferSubData GL_ARRAY_BUFFER 0 (VBO_size vbo) (VBO_data vbo)) (gl_print_error "Error updating VBO subdata") (glBindBuffer GL_ARRAY_BUFFER 0)))) VBO_update_data_adhoc_21))
(bind-poly VBO_update_data VBO_update_data_adhoc_W3ZvaWQsVkJPKl0 "")
(register-lib-func xtmgl-objects VBO_delete_adhoc_W3ZvaWQsVkJPKl0 [void,VBO*]* 0 "" '(let ((VBO_delete_adhoc_22 (lambda (vbo:VBO*) (let ((id:GLuint* (salloc))) (pset! id 0 (VBO_id vbo)) (glDeleteBuffers 1 id) (gl_print_error "Error deleting VBO") (free vbo))))) VBO_delete_adhoc_22))
(bind-poly VBO_delete VBO_delete_adhoc_W3ZvaWQsVkJPKl0 "")
(register-lib-type xtmgl-objects VAO <i32> "")
(register-lib-func xtmgl-objects VAO_adhoc_W1ZBTyosaTMyXQ [VAO*,i32]* 0 "" '(let ((VAO_adhoc_23 (lambda (arg_0) (let ((obj (zalloc))) (tset! obj 0 arg_0) obj)))) VAO_adhoc_23))
(bind-poly VAO VAO_adhoc_W1ZBTyosaTMyXQ "")
(register-lib-func xtmgl-objects VAO_z_adhoc_W1ZBTyosaTMyXQ [VAO*,i32]* 0 "" '(let ((VAO_z_adhoc_24 (lambda (arg_0) (let ((obj (zalloc))) (tset! obj 0 arg_0) obj)))) VAO_z_adhoc_24))
(bind-poly VAO_z VAO_z_adhoc_W1ZBTyosaTMyXQ "")
(register-lib-func xtmgl-objects VAO_h_adhoc_W1ZBTyosaTMyXQ [VAO*,i32]* 0 "" '(let ((VAO_h_adhoc_25 (lambda (arg_0) (let ((obj (halloc))) (tset! obj 0 arg_0) obj)))) VAO_h_adhoc_25))
(bind-poly VAO_h VAO_h_adhoc_W1ZBTyosaTMyXQ "")
(register-lib-func xtmgl-objects VAO_val_adhoc_W1ZBTyxpMzJd [VAO,i32]* 0 "" '(let ((VAO_val_adhoc_26 (lambda (arg_0) (let ((obj:VAO* (salloc))) (tfill! obj arg_0) (pref obj 0))))) VAO_val_adhoc_26))
(bind-poly VAO_val VAO_val_adhoc_W1ZBTyxpMzJd "")
(register-lib-func xtmgl-objects hcopy_adhoc_W1ZBTyosVkFPKl0 [VAO*,VAO*]* 0 "" '(let ((hcopy_adhoc_27 (lambda (x:VAO*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) obj)))) hcopy_adhoc_27))
(bind-poly hcopy hcopy_adhoc_W1ZBTyosVkFPKl0 "")
(register-lib-func xtmgl-objects hfree_adhoc_W3ZvaWQsVkFPKl0 [void,VAO*]* 0 "" '(let ((hfree_adhoc_28 (lambda (x:VAO*) () (free x) void))) hfree_adhoc_28))
(bind-poly hfree hfree_adhoc_W3ZvaWQsVkFPKl0 "")
(register-lib-func xtmgl-objects zcopy_adhoc_W1ZBTyosVkFPKixtem9uZSosbXpvbmUqXQ [VAO*,VAO*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_29 (lambda (x:VAO* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (pop_zone) obj)) x)))) zcopy_adhoc_29))
(bind-poly zcopy zcopy_adhoc_W1ZBTyosVkFPKixtem9uZSosbXpvbmUqXQ "")
(register-lib-func xtmgl-objects VAO_id_adhoc_W2kzMixWQU8qXQ [i32,VAO*]* 0 "" '(let ((VAO_id_adhoc_30 (lambda (vao:VAO*) (tref vao 0)))) VAO_id_adhoc_30))
(bind-poly VAO_id VAO_id_adhoc_W2kzMixWQU8qXQ "")
(register-lib-func xtmgl-objects print_adhoc_W3ZvaWQsVkFPKl0 [void,VAO*]* 0 "" '(let ((print_adhoc_31 (lambda (vao:VAO*) (if (null? vao) (printf "<VAO: 0x0>") (printf "<VAO: id %d>" (tref vao 0))) void))) print_adhoc_31))
(bind-poly print print_adhoc_W3ZvaWQsVkFPKl0 "")
(register-lib-func xtmgl-objects toString_adhoc_W1N0cmluZyosVkFPKl0 [String*,VAO*]* 0 "" '(let ((toString_adhoc_32 (lambda (vao:VAO*) (let ((s:i8* (salloc 256))) (if (null? vao) (sprintf s "<VAO: 0x0>") (sprintf s "<VAO: id %d>" (tref vao 0))) (String s))))) toString_adhoc_32))
(bind-poly toString toString_adhoc_W1N0cmluZyosVkFPKl0 "")
(register-lib-func xtmgl-objects VAO_create_adhoc_W1ZBTypd [VAO*]* 0 "" '(let ((VAO_create_adhoc_33 (lambda () (let ((vao:VAO* (halloc)) (id:GLuint* (salloc))) (glGenVertexArrays 1 id) (gl_print_error "Error creating VAO") (tset! vao 0 (pref id 0)) vao)))) VAO_create_adhoc_33))
(bind-poly VAO_create VAO_create_adhoc_W1ZBTypd "")
(register-lib-func xtmgl-objects VAO_bind_attribute_adhoc_W3ZvaWQsVkFPKixWQk8qLGkzMixpMzIsaTMyLGkzMl0 [void,VAO*,VBO*,i32,i32,i32,i32]* 0 "" '(let ((VAO_bind_attribute_adhoc_34 (lambda (vao:VAO* vbo:VBO* index size stride offset) (glBindVertexArray (VAO_id vao)) (gl_print_error "Error binding VAO") (glBindBuffer GL_ARRAY_BUFFER (VBO_id vbo)) (gl_print_error "Error binding VBO") (let ((component_size 4)) (glVertexAttribPointer index size (VBO_type vbo) GL_FALSE (* component_size stride) (pref-ptr (cast null GLvoid*) (* component_size offset)))) (gl_print_error "Error binding VAO attribute") (glEnableVertexAttribArray index) (gl_print_error "Error enabling VAO attribute") (glBindVertexArray 0)))) VAO_bind_attribute_adhoc_34))
(bind-poly VAO_bind_attribute VAO_bind_attribute_adhoc_W3ZvaWQsVkFPKixWQk8qLGkzMixpMzIsaTMyLGkzMl0 "")
(register-lib-func xtmgl-objects VAO_bind_attribute_adhoc_W3ZvaWQsVkFPKixWQk8qLGkzMixpMzJd [void,VAO*,VBO*,i32,i32]* 0 "" '(let ((VAO_bind_attribute_adhoc_35 (lambda (vao vbo index size) (VAO_bind_attribute:[void,VAO*,VBO*,i32,i32,i32,i32]* vao vbo index size 0 0)))) VAO_bind_attribute_adhoc_35))
(bind-poly VAO_bind_attribute VAO_bind_attribute_adhoc_W3ZvaWQsVkFPKixWQk8qLGkzMixpMzJd "")
(register-lib-func xtmgl-objects VAO_bind_and_draw_arrays_adhoc_W3ZvaWQsVkFPKixpMzIsaTMyLGkzMl0 [void,VAO*,i32,i32,i32]* 0 "" '(let ((VAO_bind_and_draw_arrays_adhoc_36 (lambda (vao:VAO* draw_mode first_element count) (glBindVertexArray (VAO_id vao)) (gl_print_error "Error binding vertex array") (glDrawArrays draw_mode first_element count) (gl_print_error "Error drawing vertex array") (glBindVertexArray 0)))) VAO_bind_and_draw_arrays_adhoc_36))
(bind-poly VAO_bind_and_draw_arrays VAO_bind_and_draw_arrays_adhoc_W3ZvaWQsVkFPKixpMzIsaTMyLGkzMl0 "")
(register-lib-func xtmgl-objects VAO_delete_adhoc_W3ZvaWQsVkFPKl0 [void,VAO*]* 0 "" '(let ((VAO_delete_adhoc_37 (lambda (vao:VAO*) (let ((id:GLuint* (salloc))) (pset! id 0 (VAO_id vao)) (glDeleteVertexArrays 1 id) (gl_print_error "Error deleting VAO") (free vao))))) VAO_delete_adhoc_37))
(bind-poly VAO_delete VAO_delete_adhoc_W3ZvaWQsVkFPKl0 "")
(register-lib-func xtmgl-objects VAO_create_ss_quad_adhoc_W1ZBTypd [VAO*]* 0 "" '(let ((VAO_create_ss_quad_adhoc_38 (lambda () (let ((ss_quad_pos_st:float* (salloc 16))) (pfill! ss_quad_pos_st -1.0000000000000000000 -1.0000000000000000000 0.00000000000000000000 0.00000000000000000000 -1.0000000000000000000 1.0000000000000000000 0.00000000000000000000 1.0000000000000000000 1.0000000000000000000 -1.0000000000000000000 1.0000000000000000000 0.00000000000000000000 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000) (let ((vbo (VBO_create ss_quad_pos_st 16)) (vao (VAO_create))) (VAO_bind_attribute vao vbo 0 2 4 0) (VAO_bind_attribute vao vbo 1 2 4 2) vao))))) VAO_create_ss_quad_adhoc_38))
(bind-poly VAO_create_ss_quad VAO_create_ss_quad_adhoc_W1ZBTypd "")
(bind-alias Texture i32 "")
(register-lib-func xtmgl-objects Texture_create_adhoc_W2kzMl0 [i32]* 0 "" '(let ((Texture_create_adhoc_39 (lambda () (let ((id:GLuint* (salloc))) (glGenTextures 1 id) (gl_print_error "Error creating Texture") (pref id 0))))) Texture_create_adhoc_39))
(bind-poly Texture_create Texture_create_adhoc_W2kzMl0 "")
(register-lib-func xtmgl-objects Texture_delete_adhoc_W3ZvaWQsaTMyXQ [void,i32]* 0 "" '(let ((Texture_delete_adhoc_40 (lambda (tex:Texture) (let ((id:GLuint* (salloc))) (pset! id 0 tex) (glDeleteTextures 1 id) (gl_print_error "Error deleting Texture"))))) Texture_delete_adhoc_40))
(bind-poly Texture_delete Texture_delete_adhoc_W3ZvaWQsaTMyXQ "")
(register-lib-func xtmgl-objects Texture_bind_data_adhoc_W2kxLGkzMixmbG9hdCosaTMyLGkzMixpMzIsaTMyLGkzMl0 [i1,i32,float*,i32,i32,i32,i32,i32]* 0 "this just uses texture slot 0 (GL_TEXTURE0) - it should probably\r\nallow the texture slot to be specified" '(let ((Texture_bind_data_adhoc_41 (lambda (tex:Texture data:float* width height chan:i32 wrap filter) (if (null? data) (begin (println "Error: data is null.") #f) (let ((format (cond ((= chan 1) GL_RED) ((= chan 3) GL_RGB) ((= chan 4) GL_RGBA) (else 0:i32)))) (if (= format 0) (begin (println "Error: only chan must be 1, 3 or 4.") #f) (begin (glActiveTexture GL_TEXTURE0) (glBindTexture GL_TEXTURE_2D tex) (glTexImage2D GL_TEXTURE_2D 0 format width height 0 format GL_FLOAT (convert data)) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S wrap) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T wrap) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER filter) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER filter) (gl_print_error "couldn't Texture_bind_image") #t))))))) Texture_bind_data_adhoc_41))
(bind-poly Texture_bind_data Texture_bind_data_adhoc_W2kxLGkzMixmbG9hdCosaTMyLGkzMixpMzIsaTMyLGkzMl0 "")
(register-lib-func xtmgl-objects Texture_bind_data_adhoc_W2kxLGkzMixpOCosaTMyLGkzMixpMzIsaTMyLGkzMl0 [i1,i32,i8*,i32,i32,i32,i32,i32]* 0 "this just uses texture slot 0 (GL_TEXTURE0) - it should probably\r\nallow the texture slot to be specified" '(let ((Texture_bind_data_adhoc_42 (lambda (tex:Texture data:i8* width height chan:i32 wrap filter) (if (null? data) (begin (println "Error: data is null.") #f) (let ((format (cond ((= chan 1) GL_RED) ((= chan 3) GL_RGB) ((= chan 4) GL_RGBA) (else 0:i32)))) (if (= format 0) (begin (println "Error: only chan must be 1, 3 or 4.") #f) (begin (glActiveTexture GL_TEXTURE0) (glBindTexture GL_TEXTURE_2D tex) (glTexImage2D GL_TEXTURE_2D 0 format width height 0 format GL_UNSIGNED_BYTE data) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S wrap) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T wrap) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER filter) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER filter) (gl_print_error "couldn't Texture_bind_image") #t))))))) Texture_bind_data_adhoc_42))
(bind-poly Texture_bind_data Texture_bind_data_adhoc_W2kxLGkzMixpOCosaTMyLGkzMixpMzIsaTMyLGkzMl0 "")
(register-lib-func xtmgl-objects Texture_bind_image_adhoc_W2kzMixpMzIsaTgqXQ [i32,i32,i8*]* 0 "" '(let ((Texture_bind_image_adhoc_43 (lambda (tex:Texture filename) (stbi_set_flip_vertically_on_load 1) (let ((width_ptr:i32* (salloc)) (height_ptr:i32* (salloc)) (comp_ptr:i32* (salloc)) (data (stbi_load filename width_ptr height_ptr comp_ptr 4))) (if (null? data) (begin (println (stbi_failure_reason)) -1) (begin (glActiveTexture GL_TEXTURE0) (glBindTexture GL_TEXTURE_2D tex) (glTexImage2D GL_TEXTURE_2D 0 GL_RGBA (pref width_ptr 0) (pref height_ptr 0) 0 GL_RGBA GL_UNSIGNED_BYTE data) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR) (gl_print_error "couldn't Texture_bind_image") tex)))))) Texture_bind_image_adhoc_43))
(bind-poly Texture_bind_image Texture_bind_image_adhoc_W2kzMixpMzIsaTgqXQ "")
(register-lib-type xtmgl-objects Shader <i32,i32> "")
(register-lib-func xtmgl-objects Shader_adhoc_W1NoYWRlciosaTMyLGkzMl0 [Shader*,i32,i32]* 0 "" '(let ((Shader_adhoc_44 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) Shader_adhoc_44))
(bind-poly Shader Shader_adhoc_W1NoYWRlciosaTMyLGkzMl0 "")
(register-lib-func xtmgl-objects Shader_z_adhoc_W1NoYWRlciosaTMyLGkzMl0 [Shader*,i32,i32]* 0 "" '(let ((Shader_z_adhoc_45 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) Shader_z_adhoc_45))
(bind-poly Shader_z Shader_z_adhoc_W1NoYWRlciosaTMyLGkzMl0 "")
(register-lib-func xtmgl-objects Shader_h_adhoc_W1NoYWRlciosaTMyLGkzMl0 [Shader*,i32,i32]* 0 "" '(let ((Shader_h_adhoc_46 (lambda (arg_0 arg_1) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) Shader_h_adhoc_46))
(bind-poly Shader_h Shader_h_adhoc_W1NoYWRlciosaTMyLGkzMl0 "")
(register-lib-func xtmgl-objects toString_adhoc_W1N0cmluZyosU2hhZGVyKl0 [String*,Shader*]* 0 "" '(let ((toString_adhoc_47 (lambda (x:Shader*) (if (null? x) (sprintout "<Shader:null>") (sprintout "<Shader:" (tref x 0) "," (tref x 1) ">"))))) toString_adhoc_47))
(bind-poly toString toString_adhoc_W1N0cmluZyosU2hhZGVyKl0 "")
(register-lib-func xtmgl-objects print_adhoc_W3ZvaWQsU2hhZGVyKl0 [void,Shader*]* 0 "" '(let ((print_adhoc_48 (lambda (x:Shader*) (if (null? x) (printout "<Shader:null>") (printout "<Shader:" (tref x 0) "," (tref x 1) ">")) void))) print_adhoc_48))
(bind-poly print print_adhoc_W3ZvaWQsU2hhZGVyKl0 "")
(register-lib-func xtmgl-objects Shader_val_adhoc_W1NoYWRlcixpMzIsaTMyXQ [Shader,i32,i32]* 0 "" '(let ((Shader_val_adhoc_49 (lambda (arg_0 arg_1) (let ((obj:Shader* (salloc))) (tfill! obj arg_0 arg_1) (pref obj 0))))) Shader_val_adhoc_49))
(bind-poly Shader_val Shader_val_adhoc_W1NoYWRlcixpMzIsaTMyXQ "")
(register-lib-func xtmgl-objects hcopy_adhoc_W1NoYWRlciosU2hhZGVyKl0 [Shader*,Shader*]* 0 "" '(let ((hcopy_adhoc_50 (lambda (x:Shader*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) obj)))) hcopy_adhoc_50))
(bind-poly hcopy hcopy_adhoc_W1NoYWRlciosU2hhZGVyKl0 "")
(register-lib-func xtmgl-objects hfree_adhoc_W3ZvaWQsU2hhZGVyKl0 [void,Shader*]* 0 "" '(let ((hfree_adhoc_51 (lambda (x:Shader*) () () (free x) void))) hfree_adhoc_51))
(bind-poly hfree hfree_adhoc_W3ZvaWQsU2hhZGVyKl0 "")
(register-lib-func xtmgl-objects zcopy_adhoc_W1NoYWRlciosU2hhZGVyKixtem9uZSosbXpvbmUqXQ [Shader*,Shader*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_52 (lambda (x:Shader* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (begin (tset! obj 1 (tref x 1))) (pop_zone) obj)) x)))) zcopy_adhoc_52))
(bind-poly zcopy zcopy_adhoc_W1NoYWRlciosU2hhZGVyKixtem9uZSosbXpvbmUqXQ "")
(bind-alias ShaderProgram i32 "")
(register-lib-func xtmgl-objects Shader_id_adhoc_W2kzMixTaGFkZXIqXQ [i32,Shader*]* 0 "" '(let ((Shader_id_adhoc_53 (lambda (shader:Shader*) (tref shader 0)))) Shader_id_adhoc_53))
(bind-poly Shader_id Shader_id_adhoc_W2kzMixTaGFkZXIqXQ "")
(register-lib-func xtmgl-objects Shader_type_adhoc_W2kzMixTaGFkZXIqXQ [i32,Shader*]* 0 "" '(let ((Shader_type_adhoc_54 (lambda (shader:Shader*) (tref shader 1)))) Shader_type_adhoc_54))
(bind-poly Shader_type Shader_type_adhoc_W2kzMixTaGFkZXIqXQ "")
(register-lib-func xtmgl-objects Shader_print_info_log_adhoc_W2k2NCxTaGFkZXIqXQ [i64,Shader*]* 0 "" '(let ((Shader_print_info_log_adhoc_55 (let ((max_log_length 4096) (logbuf:i8* (zalloc max_log_length))) (lambda (shader:Shader*) (let ((len_ptr (salloc 1 i32))) (glGetShaderInfoLog (Shader_id shader) max_log_length len_ptr logbuf) (printf "%sShader: %s\n" (cond ((= (Shader_type shader) GL_VERTEX_SHADER) "Vert") ((= (Shader_type shader) GL_FRAGMENT_SHADER) "Frag") ((= (Shader_type shader) GL_GEOMETRY_SHADER) "Geom") (else "")) (if (= (pref len_ptr 0) 0) "OK" logbuf)) (if (= (pref len_ptr 0) 0) 0 1)))))) Shader_print_info_log_adhoc_55))
(bind-poly Shader_print_info_log Shader_print_info_log_adhoc_W2k2NCxTaGFkZXIqXQ "")
(register-lib-func xtmgl-objects ShaderProgram_print_info_log_adhoc_W2k2NCxpMzJd [i64,i32]* 0 "" '(let ((ShaderProgram_print_info_log_adhoc_56 (let ((max_log_length 4096) (logbuf:i8* (zalloc max_log_length))) (lambda (program:ShaderProgram) (let ((len_ptr (salloc 1 i32))) (glGetProgramInfoLog program max_log_length len_ptr logbuf) (printf "   Program: %s\n" (if (= (pref len_ptr 0) 0) "OK" logbuf)) (if (= (pref len_ptr 0) 0) 0 1)))))) ShaderProgram_print_info_log_adhoc_56))
(bind-poly ShaderProgram_print_info_log ShaderProgram_print_info_log_adhoc_W2k2NCxpMzJd "")
(register-lib-func xtmgl-objects Shader_create_adhoc_W1NoYWRlciosaTgqLGkzMl0 [Shader*,i8*,i32]* 0 "create (and compile) an OpenGL shader" '(let ((Shader_create_adhoc_57 (lambda (source:i8* type:GLenum) (if (not (or (= type GL_VERTEX_SHADER) (= type GL_FRAGMENT_SHADER) (= type GL_GEOMETRY_SHADER))) (begin (println "Error: shader type must be one of GL_VERTEX_SHADER, GL_FRAGMENT_SHADER or GL_GEOMETRY_SHADER") null) (let ((shader_id (glCreateShader type)) (source_ptr:i8** (salloc)) (shader (Shader shader_id type))) (pset! source_ptr 0 source) (glShaderSource shader_id 1 source_ptr (cast null i32*)) (glCompileShader shader_id) (Shader_print_info_log shader) shader))))) Shader_create_adhoc_57))
(bind-poly Shader_create Shader_create_adhoc_W1NoYWRlciosaTgqLGkzMl0 "")
(register-lib-func xtmgl-objects ShaderProgram_create_adhoc_W2kzMixTaGFkZXIqLFNoYWRlcipd [i32,Shader*,Shader*]* 0 "compile and link shader program (vert and frag shader)" '(let ((ShaderProgram_create_adhoc_58 (lambda (vert:Shader* frag:Shader*) (if (not (and (= (Shader_type vert) GL_VERTEX_SHADER) (= (Shader_type frag) GL_FRAGMENT_SHADER))) (begin (println "Error: input shader types must be vert and frag respectively.") -1) (let ((program (glCreateProgram))) (glAttachShader program (Shader_id vert)) (glAttachShader program (Shader_id frag)) (glLinkProgram program) (ShaderProgram_print_info_log program) program))))) ShaderProgram_create_adhoc_58))
(bind-poly ShaderProgram_create ShaderProgram_create_adhoc_W2kzMixTaGFkZXIqLFNoYWRlcipd "")
(register-lib-func xtmgl-objects ShaderProgram_create_adhoc_W2kzMixTaGFkZXIqLFNoYWRlciosU2hhZGVyKl0 [i32,Shader*,Shader*,Shader*]* 0 "compile and link shader program (vert and frag shader)" '(let ((ShaderProgram_create_adhoc_59 (lambda (vert:Shader* geom:Shader* frag:Shader*) (if (not (and (= (Shader_type vert) GL_VERTEX_SHADER) (= (Shader_type geom) GL_GEOMETRY_SHADER) (= (Shader_type frag) GL_FRAGMENT_SHADER))) (begin (println "Error: input shader types must be vert and frag respectively.") -1) (let ((program (glCreateProgram))) (glAttachShader program (Shader_id vert)) (glAttachShader program (Shader_id geom)) (glAttachShader program (Shader_id frag)) (glLinkProgram program) (ShaderProgram_print_info_log program) program))))) ShaderProgram_create_adhoc_59))
(bind-poly ShaderProgram_create ShaderProgram_create_adhoc_W2kzMixTaGFkZXIqLFNoYWRlciosU2hhZGVyKl0 "")
(register-lib-func xtmgl-objects ShaderProgram_create_adhoc_W2kzMixpOCosaTgqXQ [i32,i8*,i8*]* 0 "compile and link shader program (vert and frag shader source)" '(let ((ShaderProgram_create_adhoc_60 (lambda (vsource:i8* fsource:i8*) (let ((vert (Shader_create vsource GL_VERTEX_SHADER)) (frag (Shader_create fsource GL_FRAGMENT_SHADER))) (if (or (null? vert) (null? frag)) -1 (ShaderProgram_create:[i32,Shader*,Shader*]* vert frag)))))) ShaderProgram_create_adhoc_60))
(bind-poly ShaderProgram_create ShaderProgram_create_adhoc_W2kzMixpOCosaTgqXQ "")
(register-lib-func xtmgl-objects ShaderProgram_create_adhoc_W2kzMixpOCosaTgqLGk4Kl0 [i32,i8*,i8*,i8*]* 0 "compile and link shader program (vert and frag shader source)" '(let ((ShaderProgram_create_adhoc_61 (lambda (vsource:i8* gsource:i8* fsource:i8*) (let ((vert (Shader_create vsource GL_VERTEX_SHADER)) (geom (Shader_create vsource GL_GEOMETRY_SHADER)) (frag (Shader_create fsource GL_FRAGMENT_SHADER))) (if (or (null? vert) (null? geom) (null? frag)) -1 (ShaderProgram_create:[i32,Shader*,Shader*,Shader*]* vert geom frag)))))) ShaderProgram_create_adhoc_61))
(bind-poly ShaderProgram_create ShaderProgram_create_adhoc_W2kzMixpOCosaTgqLGk4Kl0 "")
(register-lib-type xtmgl-objects FBO <i32,i32,i32,i32,i32> "")
(register-lib-func xtmgl-objects FBO_adhoc_W0ZCTyosaTMyLGkzMixpMzIsaTMyLGkzMl0 [FBO*,i32,i32,i32,i32,i32]* 0 "" '(let ((FBO_adhoc_62 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) obj)))) FBO_adhoc_62))
(bind-poly FBO FBO_adhoc_W0ZCTyosaTMyLGkzMixpMzIsaTMyLGkzMl0 "")
(register-lib-func xtmgl-objects FBO_z_adhoc_W0ZCTyosaTMyLGkzMixpMzIsaTMyLGkzMl0 [FBO*,i32,i32,i32,i32,i32]* 0 "" '(let ((FBO_z_adhoc_63 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) obj)))) FBO_z_adhoc_63))
(bind-poly FBO_z FBO_z_adhoc_W0ZCTyosaTMyLGkzMixpMzIsaTMyLGkzMl0 "")
(register-lib-func xtmgl-objects FBO_h_adhoc_W0ZCTyosaTMyLGkzMixpMzIsaTMyLGkzMl0 [FBO*,i32,i32,i32,i32,i32]* 0 "" '(let ((FBO_h_adhoc_64 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) obj)))) FBO_h_adhoc_64))
(bind-poly FBO_h FBO_h_adhoc_W0ZCTyosaTMyLGkzMixpMzIsaTMyLGkzMl0 "")
(register-lib-func xtmgl-objects FBO_val_adhoc_W0ZCTyxpMzIsaTMyLGkzMixpMzIsaTMyXQ [FBO,i32,i32,i32,i32,i32]* 0 "" '(let ((FBO_val_adhoc_65 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4) (let ((obj:FBO* (salloc))) (tfill! obj arg_0 arg_1 arg_2 arg_3 arg_4) (pref obj 0))))) FBO_val_adhoc_65))
(bind-poly FBO_val FBO_val_adhoc_W0ZCTyxpMzIsaTMyLGkzMixpMzIsaTMyXQ "")
(register-lib-func xtmgl-objects hcopy_adhoc_W0ZCTyosRkJPKl0 [FBO*,FBO*]* 0 "" '(let ((hcopy_adhoc_66 (lambda (x:FBO*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) (tset! obj 2 (tref x 2)) (tset! obj 3 (tref x 3)) (tset! obj 4 (tref x 4)) obj)))) hcopy_adhoc_66))
(bind-poly hcopy hcopy_adhoc_W0ZCTyosRkJPKl0 "")
(register-lib-func xtmgl-objects hfree_adhoc_W3ZvaWQsRkJPKl0 [void,FBO*]* 0 "" '(let ((hfree_adhoc_67 (lambda (x:FBO*) () () () () () (free x) void))) hfree_adhoc_67))
(bind-poly hfree hfree_adhoc_W3ZvaWQsRkJPKl0 "")
(register-lib-func xtmgl-objects zcopy_adhoc_W0ZCTyosRkJPKixtem9uZSosbXpvbmUqXQ [FBO*,FBO*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_68 (lambda (x:FBO* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (begin (tset! obj 1 (tref x 1))) (begin (tset! obj 2 (tref x 2))) (begin (tset! obj 3 (tref x 3))) (begin (tset! obj 4 (tref x 4))) (pop_zone) obj)) x)))) zcopy_adhoc_68))
(bind-poly zcopy zcopy_adhoc_W0ZCTyosRkJPKixtem9uZSosbXpvbmUqXQ "")
(register-lib-func xtmgl-objects FBO_id_adhoc_W2kzMixGQk8qXQ [i32,FBO*]* 0 "" '(let ((FBO_id_adhoc_69 (lambda (fbo:FBO*) (tref fbo 0)))) FBO_id_adhoc_69))
(bind-poly FBO_id FBO_id_adhoc_W2kzMixGQk8qXQ "")
(register-lib-func xtmgl-objects FBO_color_texture_adhoc_W2kzMixGQk8qXQ [i32,FBO*]* 0 "" '(let ((FBO_color_texture_adhoc_70 (lambda (fbo:FBO*) (tref fbo 1)))) FBO_color_texture_adhoc_70))
(bind-poly FBO_color_texture FBO_color_texture_adhoc_W2kzMixGQk8qXQ "")
(register-lib-func xtmgl-objects FBO_depth_texture_adhoc_W2kzMixGQk8qXQ [i32,FBO*]* 0 "" '(let ((FBO_depth_texture_adhoc_71 (lambda (fbo:FBO*) (tref fbo 2)))) FBO_depth_texture_adhoc_71))
(bind-poly FBO_depth_texture FBO_depth_texture_adhoc_W2kzMixGQk8qXQ "")
(register-lib-func xtmgl-objects FBO_width_adhoc_W2kzMixGQk8qXQ [i32,FBO*]* 0 "" '(let ((FBO_width_adhoc_72 (lambda (fbo:FBO*) (tref fbo 3)))) FBO_width_adhoc_72))
(bind-poly FBO_width FBO_width_adhoc_W2kzMixGQk8qXQ "")
(register-lib-func xtmgl-objects FBO_height_adhoc_W2kzMixGQk8qXQ [i32,FBO*]* 0 "" '(let ((FBO_height_adhoc_73 (lambda (fbo:FBO*) (tref fbo 4)))) FBO_height_adhoc_73))
(bind-poly FBO_height FBO_height_adhoc_W2kzMixGQk8qXQ "")
(register-lib-func xtmgl-objects print_adhoc_W3ZvaWQsRkJPKl0 [void,FBO*]* 0 "" '(let ((print_adhoc_74 (lambda (fbo:FBO*) (if (null? fbo) (printf "<FBO: 0x0>") (printf "<FBO: id=%d color_tex=%d depth_tex=%d width=%d height=%d>" (FBO_id fbo) (FBO_color_texture fbo) (FBO_depth_texture fbo) (FBO_width fbo) (FBO_height fbo))) void))) print_adhoc_74))
(bind-poly print print_adhoc_W3ZvaWQsRkJPKl0 "")
(register-lib-func xtmgl-objects toString_adhoc_W1N0cmluZyosRkJPKl0 [String*,FBO*]* 0 "" '(let ((toString_adhoc_75 (lambda (fbo:FBO*) (let ((str:i8* (zalloc 256))) (if (null? fbo) (sprintf str "<FBO: 0x0>") (sprintf str "<FBO: id=%d color_tex=%d depth_tex=%d width=%d height=%d>" (FBO_id fbo) (FBO_color_texture fbo) (FBO_depth_texture fbo) (FBO_width fbo) (FBO_height fbo))) (String str))))) toString_adhoc_75))
(bind-poly toString toString_adhoc_W1N0cmluZyosRkJPKl0 "")
(register-lib-func xtmgl-objects FBO_create_adhoc_W0ZCTypd [FBO*]* 0 "" '(let ((FBO_create_adhoc_76 (lambda () (let ((fbo:FBO* (halloc)) (id:GLuint* (salloc))) (glGenFramebuffers 1 id) (gl_print_error "Error creating FBO") (tset! fbo 0 (pref id 0)) fbo)))) FBO_create_adhoc_76))
(bind-poly FBO_create FBO_create_adhoc_W0ZCTypd "")
(register-lib-func xtmgl-objects Texture_create_FBO_depth_texture_adhoc_W2kzMixpMzIsaTMyXQ [i32,i32,i32]* 0 "" '(let ((Texture_create_FBO_depth_texture_adhoc_77 (lambda (width height) (let ((depth_tex (Texture_create))) (glActiveTexture GL_TEXTURE0) (glBindTexture GL_TEXTURE_2D depth_tex) (glTexImage2D GL_TEXTURE_2D 0 GL_DEPTH_COMPONENT width height 0 GL_DEPTH_COMPONENT GL_UNSIGNED_BYTE null) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_NEAREST) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_NEAREST) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE) (glFramebufferTexture2D GL_FRAMEBUFFER GL_DEPTH_ATTACHMENT GL_TEXTURE_2D depth_tex 0) (gl_print_error "Error creating FBO depth texture") depth_tex)))) Texture_create_FBO_depth_texture_adhoc_77))
(bind-poly Texture_create_FBO_depth_texture Texture_create_FBO_depth_texture_adhoc_W2kzMixpMzIsaTMyXQ "")
(register-lib-func xtmgl-objects FBO_create_with_textures_adhoc_W0ZCTyosaTMyLGkzMixpMV0 [FBO*,i32,i32,i1]* 0 "" '(let ((FBO_create_with_textures_adhoc_78 (lambda (width height depth_p:i1) (let ((fbo (FBO_create)) (color_tex (Texture_create)) (depth_tex -1)) (glBindTexture GL_TEXTURE_2D color_tex) (glTexImage2D GL_TEXTURE_2D 0 GL_RGBA width height 0 GL_RGBA GL_UNSIGNED_BYTE null) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_REPEAT) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_REPEAT) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_NEAREST) (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_NEAREST) (glBindFramebuffer GL_FRAMEBUFFER (FBO_id fbo)) (glFramebufferTexture2D GL_FRAMEBUFFER GL_COLOR_ATTACHMENT0 GL_TEXTURE_2D color_tex 0) (if depth_p (set! depth_tex (Texture_create_FBO_depth_texture width height))) (if (<> (glCheckFramebufferStatus GL_FRAMEBUFFER) GL_FRAMEBUFFER_COMPLETE) (begin (println "Error creating framebuffer") (gl_print_error "Error creating FBO & backing textures") null) (begin (tfill! fbo (FBO_id fbo) color_tex depth_tex width height) (glBindFramebuffer GL_FRAMEBUFFER 0) fbo)))))) FBO_create_with_textures_adhoc_78))
(bind-poly FBO_create_with_textures FBO_create_with_textures_adhoc_W0ZCTyosaTMyLGkzMixpMV0 "")
(print-with-colors 'green 'default #t (print "done"))(print " in" (- (clock:clock) *xtmlib-gl-objects-loaded-timer*) "seconds\n")
(define *xtmlib-gl-objects-loaded-timer* (clock:clock))
(set! *impc:compiler:message:level* *impc:aot:prev-compiler-message-level*)
