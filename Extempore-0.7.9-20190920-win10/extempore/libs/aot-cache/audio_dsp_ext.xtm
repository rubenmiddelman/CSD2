(sys:load "libs/external/fft.xtm" 'quiet)
(sys:load "libs/external/sndfile.xtm" 'quiet)
(sys:load-preload-check 'audio_dsp_ext)
(define *xtmlib-audio_dsp_ext-loaded* #t)
(define *xtmlib-audio_dsp_ext-loaded-timer* (clock:clock))
(set! *impc:aot:prev-compiler-message-level* *impc:compiler:message:level*)
(set! *impc:compiler:message:level* 'low)

(print "Loading ")
(print-with-colors 'blue 'default #t (print 'xtmaudio_dsp_ext))
(print " library... ")
(llvm:compile-ir (sys:slurp-file "libs/aot-cache/xtmaudio_dsp_ext.ll"));; flush the JIT-compilation queue, so we only get this file's code in the module
(impc:compiler:flush-jit-compilation-queue)
(bind-alias SComplex Complexf "")
(register-lib-func xtmaudio_dsp_ext stft_c_adhoc_W1tmbG9hdCxmbG9hdF0qLGk2NCxpNjQsaTY0XQ [[float,float]*,i64,i64,i64]* 10000000 "" '(let ((stft_c_adhoc_1 (lambda (r:i64 n:i64 k:i64) (if (< k n) (set! k n)) (if (> r n) (set! r n)) (let ((buf:SAMPLE* (alloc n)) (sample_size_in_bytes 4) (spectrum:SComplex* (alloc k)) (pad:SAMPLE* (alloc k)) (segments (/ n r)) (pad_offset (dtoi64 (- (* 0.50000000000000000000 (i64tod k)) (* 0.50000000000000000000 (i64tod n))))) (padbuf (cast (pref-ptr pad pad_offset) i8*)) (f_fftr:FFTR_Config* (fftr_config k)) (n2 (* n 2)) (nhalf (/ n 2)) (i 0) (idx (- segments 1)) (t 0) (t2 0)) (lambda (x) (if (= t2 0) (let ((start (* idx r)) (samps (- n start))) (memcpy padbuf (convert (pref-ptr buf start)) (* sample_size_in_bytes samps)) (memcpy padbuf (convert (pref-ptr buf 0)) (* sample_size_in_bytes start)) (window_hamming (cast padbuf SAMPLE*) n) (fft pad (convert spectrum) f_fftr) (set! idx (% (+ idx 1) segments)))) (pset! buf t x) (set! t (+ t 1)) (if (= t n) (set! t 0)) (set! t2 (+ t2 1)) (if (= t2 r) (set! t2 0)) x))))) stft_c_adhoc_1))
(bind-poly stft_c stft_c_adhoc_W1tmbG9hdCxmbG9hdF0qLGk2NCxpNjQsaTY0XQ "")
(register-lib-func xtmaudio_dsp_ext stft_st_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXRdKixpNjQsaTY0LGk2NF0 [[float,i64,float]*,i64,i64,i64]* 0 "" '(let ((stft_st_c_adhoc_2 (lambda (r n k) (let ((L (stft_c r n k)) (R (stft_c r n k)) (left:SComplex* (L.spectrum)) (right:SComplex* (R.spectrum)) (i 0)) (lambda (chan:i64 x) (if (= chan 0) (L x) (R x))))))) stft_st_c_adhoc_2))
(bind-poly stft_st_c stft_st_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXRdKixpNjQsaTY0LGk2NF0 "")
(register-lib-func xtmaudio_dsp_ext stft_mc_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXRdKixpNjQsaTY0LGk2NCxpNjRd [[float,i64,float]*,i64,i64,i64,i64]* 0 "" '(let ((stft_mc_c_adhoc_3 (lambda (channels:i64 r n k) (let ((fftchans:[float,float]** (alloc channels)) (spectrums:SComplex** (alloc channels)) (i 0)) (dotimes (i channels) (let ((F (stft_c r n k))) (pset! fftchans i F) (pset! spectrums i (F.spectrum)))) (lambda (chan:i64 x) ((pref fftchans chan) x)))))) stft_mc_c_adhoc_3))
(bind-poly stft_mc_c stft_mc_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXRdKixpNjQsaTY0LGk2NCxpNjRd "")
(register-lib-func xtmaudio_dsp_ext creverb_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0qLGk4KixpNjRd [[float,float,float,float]*,i8*,i64]* 0 "" '(let ((creverb_c_adhoc_4 (lambda (filename:i8* len:i64) (let ((ir_len_unpadded (sf_samples_from_file filename)) (ir_len (+ ir_len_unpadded (- len (% ir_len_unpadded len)))) (parts (/ ir_len len)) (po 0) (irs:SComplex* (zalloc (* 2 ir_len))) (ffts:SComplex* (zalloc (* 2 ir_len))) (padlgth (* len 2)) (aorb:i1 #t) (irtaila:SAMPLE* (zalloc len)) (irtailb:SAMPLE* (zalloc len)) (f_fft:FFT_Config* (fft_config padlgth)) (i_fft:IFFT_Config* (ifft_config padlgth)) (f_fftr:FFTR_Config* (fftr_config padlgth)) (i_fftr:IFFTR_Config* (ifftr_config padlgth)) (drya:SAMPLE* (zalloc padlgth)) (dryb:SAMPLE* (zalloc padlgth)) (t1:i64 0) (i:i64 0) (out:SAMPLE 0.00000000000000000000) (j:i64 0) (A:SComplex* (zalloc padlgth)) (B:SComplex* (zalloc padlgth)) (a:SAMPLE* (zalloc padlgth)) (t2:double 0.00000000000000000000) (output:SAMPLE* (zalloc len))) (printf "IR:(%.1f seconds) Partitions(size:%lld num:%lld)\n" (ftod (/ (convert ir_len) (convert SAMPLE_RATE))) len parts) (dotimes (i parts) (memset (cast A i8*) 0 (convert (* 8 padlgth))) (sf_read_file_into_buffer filename output (* i len) len #f) (Complex_bufferize output A len) (fft A (pref-ptr irs (* i padlgth)) f_fft)) (lambda (in:SAMPLE dry:SAMPLE wet:SAMPLE) (set! t2 (clock_clock)) (pset! (if aorb drya dryb) t1 in) (set! out (+ (* dry (pref (if aorb dryb drya) t1)) (* 4.0000000000000000000 wet (+ (pref output t1) (pref (if aorb irtaila irtailb) t1))))) (set! t1 (+ t1 1)) (if (= t1 len) (let ((_fft:SComplex* (pref-ptr ffts (* po padlgth))) (_ir:SComplex* null)) (fft (if aorb drya dryb) B f_fftr) (memcpy (cast _fft i8*) (cast B i8*) (convert (* padlgth 8))) (dotimes (i parts) (set! j (% (+ parts (- po i)) parts)) (set! _fft (pref-ptr ffts (* j padlgth))) (set! _ir (pref-ptr irs (* i padlgth))) (Complex_multiplication_bybuf _fft _ir A padlgth) (Complex_addition_bybuf A B B padlgth)) (ifft B a i_fftr) (let ((scale:SAMPLE (/ 1.0000000000000000000 (convert (* len parts)))) (tail (if aorb irtaila irtailb))) (dotimes (i len) (pset! output i (* (pref a i) scale))) (dotimes (i len) (pset! tail i (* (pref a (+ len i)) scale)))) (set! aorb (if aorb #f #t)) (set! po (% (+ po 1) parts)) (set! t1 0))) out))))) creverb_c_adhoc_4))
(bind-poly creverb_c creverb_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0qLGk4KixpNjRd "")
(register-lib-func xtmaudio_dsp_ext creverb_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0qLGk4Kl0 [[float,float,float,float]*,i8*]* 0 "" '(let ((creverb_c_adhoc_5 (lambda (path:i8*) (creverb_c:[[float,float,float,float]*,i8*,i64]* path (* 4 (convert FRAMES)))))) creverb_c_adhoc_5))
(bind-poly creverb_c creverb_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0qLGk4Kl0 "")
(register-lib-func xtmaudio_dsp_ext creverb_st_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXQsZmxvYXQsZmxvYXRdKixpOCosaTgqLGk2NF0 [[float,i64,float,float,float]*,i8*,i8*,i64]* 0 "" '(let ((creverb_st_c_adhoc_6 (lambda (pathl pathr lgth) (let ((convl (creverb_c pathl lgth)) (convr (creverb_c pathr lgth))) (lambda (chan:i64 in dry wet) (cond ((= chan 0) (convl in dry wet)) ((= chan 1) (convr in dry wet)) (else 0.00000000000000000000))))))) creverb_st_c_adhoc_6))
(bind-poly creverb_st_c creverb_st_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXQsZmxvYXQsZmxvYXRdKixpOCosaTgqLGk2NF0 "")
(register-lib-func xtmaudio_dsp_ext creverb_st_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXQsZmxvYXQsZmxvYXRdKixpOCosaTgqXQ [[float,i64,float,float,float]*,i8*,i8*]* 0 "" '(let ((creverb_st_c_adhoc_7 (lambda (pathl pathr) (creverb_st_c:[[float,i64,float,float,float]*,i8*,i8*,i64]* pathl pathr (* (convert FRAMES) 4))))) creverb_st_c_adhoc_7))
(bind-poly creverb_st_c creverb_st_c_adhoc_W1tmbG9hdCxpNjQsZmxvYXQsZmxvYXQsZmxvYXRdKixpOCosaTgqXQ "")
(print-with-colors 'green 'default #t (print "done"))(print " in" (- (clock:clock) *xtmlib-audio_dsp_ext-loaded-timer*) "seconds\n")
(define *xtmlib-audio_dsp_ext-loaded-timer* (clock:clock))
(set! *impc:compiler:message:level* *impc:aot:prev-compiler-message-level*)
