(sys:load-preload-check 'base)
(define *xtmlib-base-loaded* #t)
(define *xtmlib-base-loaded-timer* (clock:clock))
(set! *impc:aot:prev-compiler-message-level* *impc:compiler:message:level*)
(set! *impc:compiler:message:level* 'low)

(print "Loading ")
(print-with-colors 'blue 'default #t (print 'xtmbase))
(print " library... ")
(llvm:compile-ir (sys:slurp-file "libs/aot-cache/xtmbase.ll"));; flush the JIT-compilation queue, so we only get this file's code in the module
(impc:compiler:flush-jit-compilation-queue)
(bind-alias bool i1 "boolean true/false type")
(bind-alias size_t i64 "useful for working with C libraries")
(bind-alias enum i32 "useful for working with C libraries")
(register-lib-val xtmbase PIf float "pi of float type")
(register-lib-val xtmbase TWOPIf float "2pi of float type")
(register-lib-val xtmbase Ef float "e (base of natural log) of float type")
(register-lib-val xtmbase PI double "pi of double type")
(register-lib-val xtmbase TWOPI double "pi of double type")
(register-lib-val xtmbase E double "e (base of natural log) of double type")
(bind-alias SAMPLE float "audio I/O sample type in the dsp processing chain")
(bind-alias DSP [float,float,i64,i64,float*]* "audio output callback type")
(bind-alias DSPMT [float,float*,i64,i64,float*]* "(multithreaded) audio output callback type")
(bind-alias DSPMC [void,float*,float*,i64,i8*]* "buffered audio output callback type")
(bind-alias DSPMCMT [void,float**,float*,i64,i8*]* "buffered (multithreaded) audio output callback type")
(register-lib-func xtmbase audio_64bit_adhoc_W2kxXQ [i1]* 0 "audiostuff" '(let ((audio_64bit_adhoc_1 (lambda () 0:i1))) audio_64bit_adhoc_1))
(bind-poly audio_64bit audio_64bit_adhoc_W2kxXQ "")
(register-lib-val xtmbase SPI float "pi of type SAMPLE")
(register-lib-val xtmbase STWOPI float "2pi of type SAMPLE")
(register-lib-val xtmbase SE float "e (base of natural log) of type SAMPLE")
(register-ext-val SAMPLE_RATE i32 "audio sample rate")
(register-lib-val xtmbase SAMPLERATE float "audio sample rate")
(call-as-xtlang (set! SAMPLERATE (convert SAMPLE_RATE SAMPLE)) void)
(register-lib-val xtmbase SRs float "audio sample rate")
(call-as-xtlang (set! SRs (convert SAMPLE_RATE SAMPLE)) void)
(register-lib-val xtmbase SRf float "audio sample rate (float)")
(call-as-xtlang (set! SRf (convert SAMPLE_RATE float)) void)
(register-lib-val xtmbase SRd double "audio sample rate (double)")
(call-as-xtlang (set! SRd (convert SAMPLE_RATE double)) void)
(register-lib-val xtmbase SR i64 "audio sample rate (i64)")
(call-as-xtlang (set! SR (convert SAMPLE_RATE i64)) void)
(register-ext-val CHANNELS i32 "number of audio output channels")
(register-ext-val IN_CHANNELS i32 "number of audio input channels")
(register-ext-val NUM_FRAMES i32 "audio signal chain block size")
(register-lib-val xtmbase FRAMES i64 "audio signal chain block size")
(call-as-xtlang (set! FRAMES (convert NUM_FRAMES i64)) void)
(register-lib-val xtmbase NaNf float "single-precision not-a-number (NaN)")
(register-lib-val xtmbase NaN double "double-precision not-a-number (NaN)")
(register-lib-func xtmbase set_float_nans__adhoc_W3ZvaWRd [void]* 0 "" '(let ((set_float_nans__adhoc_2 (lambda () (let ((nan32 2143289344) (nan64 0) (n32:i32* (alloc)) (n64:i64* (alloc))) (pset! n32 0 nan32) (pset! n64 0 nan64) (set! NaNf (pref (cast n32 float*) 0)) (set! NaN (pref (cast n64 double*) 0)) void)))) set_float_nans__adhoc_2))
(bind-poly set_float_nans_ set_float_nans__adhoc_W3ZvaWRd "")
(xtmX (set_float_nans_))
(register-lib-func xtmbase print_return_adhoc_W3ZvaWRd [void]* 0 "" '(let ((print_return_adhoc_3 (lambda () (putchar 10) void))) print_return_adhoc_3))
(bind-poly print_return print_return_adhoc_W3ZvaWRd "")
(register-lib-func xtmbase print_space_adhoc_W3ZvaWRd [void]* 0 "" '(let ((print_space_adhoc_4 (lambda () (putchar 32) void))) print_space_adhoc_4))
(bind-poly print_space print_space_adhoc_W3ZvaWRd "")
(register-lib-func xtmbase print_adhoc_W3ZvaWQsaTFd [void,i1]* 0 "" '(let ((print_adhoc_5 (lambda (x:i1) (printf "%d" x) void))) print_adhoc_5))
(bind-poly print print_adhoc_W3ZvaWQsaTFd "")
(register-lib-func xtmbase print_adhoc_W3ZvaWQsaThd [void,i8]* 0 "" '(let ((print_adhoc_6 (lambda (x:i8) (printf "%d" (convert x i32)) void))) print_adhoc_6))
(bind-poly print print_adhoc_W3ZvaWQsaThd "")
(register-lib-func xtmbase print_adhoc_W3ZvaWQsaTE2XQ [void,i16]* 0 "" '(let ((print_adhoc_7 (lambda (x:i16) (printf "%d" (convert x i32)) void))) print_adhoc_7))
(bind-poly print print_adhoc_W3ZvaWQsaTE2XQ "")
(register-lib-func xtmbase print_adhoc_W3ZvaWQsaTMyXQ [void,i32]* 0 "" '(let ((print_adhoc_8 (lambda (x:i32) (printf "%d" x) void))) print_adhoc_8))
(bind-poly print print_adhoc_W3ZvaWQsaTMyXQ "")
(register-lib-func xtmbase print_adhoc_W3ZvaWQsaTY0XQ [void,i64]* 0 "" '(let ((print_adhoc_9 (lambda (x:i64) (printf "%lld" x) void))) print_adhoc_9))
(bind-poly print print_adhoc_W3ZvaWQsaTY0XQ "")
(register-lib-func xtmbase print_adhoc_W3ZvaWQsZmxvYXRd [void,float]* 0 "" '(let ((print_adhoc_10 (lambda (x:float) (printf "%f" (ftod x)) void))) print_adhoc_10))
(bind-poly print print_adhoc_W3ZvaWQsZmxvYXRd "")
(register-lib-func xtmbase print_adhoc_W3ZvaWQsZG91YmxlXQ [void,double]* 0 "" '(let ((print_adhoc_11 (lambda (x:double) (printf "%f" x) void))) print_adhoc_11))
(bind-poly print print_adhoc_W3ZvaWQsZG91YmxlXQ "")
(bind-func print:[void,!a]* -> (lambda (r a) (and (t:vector? a) (not (t:pointer? a)))) (lambda (vec) (let ((a1 (ref vec))) (printout "/" (vref a1 0)) (doloop (i (- (num-of-elts a1) 1)) (printout "," (vref a1 (+ 1 i)))) (printout "/") void)))
(bind-func print:[void,!a]* -> (lambda (r a) (and (t:vector? a) (t:pointer? a))) (lambda (vec) (printout "/" (vref vec 0)) (doloop (i (- (num-of-elts vec) 1)) (printout "," (vref vec (+ 1 i)))) (printout "/") void))
(bind-func print:[void,!a]* -> (lambda (r a) (and (t:array? a) (not (t:pointer? a)))) (lambda (arr) (let ((a1 (ref arr))) (printout "|" (aref a1 0)) (doloop (i (- (num-of-elts a1) 1)) (printout "," (aref a1 (+ 1 i)))) (printout "|") void)))
(bind-func print:[void,!a]* -> (lambda (r a) (and (t:array? a) (t:pointer? a))) (lambda (arr) (printout "|" (aref arr 0)) (doloop (i (- (num-of-elts arr) 1)) (printout "," (aref arr (+ 1 i)))) (printout "|") void))
(bind-func print:[void,!a]* -> (lambda (r x) (and (t:tuple? x) (t:elts? x 1))) (lambda (tup) (printout "<" (tref tup 0) ">") void))
(bind-func print:[void,!a]* -> (lambda (r x) (and (t:tuple? x) (t:elts? x 2))) (lambda (tup) (printout "<" (tref tup 0) "," (tref tup 1) ">") void))
(bind-func print:[void,!a]* -> (lambda (r x) (and (t:tuple? x) (t:elts? x 3))) (lambda (tup) (printout "<" (tref tup 0) "," (tref tup 1) "," (tref tup 2) ">") void))
(bind-func print:[void,!a]* -> (lambda (r x) (and (t:tuple? x) (t:elts? x 4))) (lambda (tup) (printout "<" (tref tup 0) "," (tref tup 1) "," (tref tup 2) "," (tref tup 3) ">") void))
(bind-func print:[void,!a]* -> (lambda (r x) (and (t:tuple? x) (t:elts? x 5))) (lambda (tup) (printout "<" (tref tup 0) "," (tref tup 1) "," (tref tup 2) "," (tref tup 3) "," (tref tup 4) ">") void))
(bind-func print:[void,!a]* -> (lambda (r x) (and (t:tuple? x) (t:elts? x 6))) (lambda (tup) (printout "<" (tref tup 0) "," (tref tup 1) "," (tref tup 2) "," (tref tup 3) "," (tref tup 4) "," (tref tup 4) ">") void))
(bind-func print:[void,!a]* (lambda (x) (printf "_") void))
(bind-macro (size_of type) "return size of type" (begin (if (symbol? type) (set! type (symbol->string type))) (impc:ir:get-type-size (impc:ir:get-type-from-pretty-str type))))
(bind-macro (inc x y) "increment variable by y" `(set! ,x (+ ,x ,y)))
(bind-macro (dec x y) "decrement variable by y" `(set! ,x (- ,x ,y)))
(bind-macro (min x y) "minimum of x and y" `(if (< ,x ,y) ,x ,y))
(bind-macro (max x y) "maximum of x and y" `(if (> ,x ,y) ,x ,y))
(bind-macro (clamp x minval maxval) "clamp input value to range" `(if (> ,x ,maxval) ,maxval (if (< ,x ,minval) ,minval ,x)))
(bind-macro (logn x base) "log with arbitrary base" `(/ (log ,x) (log ,base)))
(bind-macro (deg2rad degrees) "convert angle in degrees to radians" `(/ ,degrees 57.295779500000001860))
(bind-macro (rad2deg radians) "convert angle in radians to degrees" `(* 57.295779500000001860 ,radians))
(bind-macro (evenp x) "returns #t for even integers, #f otherwise" `(if (= (bitwise-and ,x 1) 0) 1:i1 0:i1))
(bind-macro (oddp x) "returns #t for odd integers, #f otherwise" `(if (= (bitwise-and ,x 1) 0) 0:i1 1:i1))
(bind-macro (tbind data . args) "simple tuple binding\r\n\r\n(let ((tuple:<i32,double,i32,i64>* (alloc))\r\n      ((var1 0) (var2 0.0)))\r\n  (tbind tuple _ var2 _ var1)\r\n\r\n  would match var2 to the double, and var1 to the i64" (cons 'begin (map (lambda (x n) (if (not (eq? x '_)) `(set! ,x (tref ,data ,n)))) args (make-list-with-proc (length args) (lambda (i) (real->integer i))))))
(bind-macro (get_native_name closure-name . type) "return native function name for closure" (let* ((pair (regex:type-split (symbol->string closure-name) ":")) (base (if (null? (cdr pair)) "" (impc:ir:get-base-type (cadr pair))))) (if (and (not (null? (cdr pair))) (impc:ti:typealias-exists? base)) (set! base (impc:ir:get-base-type (impc:ir:pretty-print-type (impc:ti:get-typealias-type base))))) (set! closure-name (symbol->string closure-name)) (if (not (null? (cdr pair))) (string-append (car pair) "_adhoc_" (cname-encode base) "_native") (if (null? type) (if (and (impc:ti:polyfunc-exists? closure-name) (= (length (impc:ti:get-polyfunc-candidate-types closure-name)) 1)) (let* ((t (impc:ir:pretty-print-type (car (impc:ti:get-polyfunc-candidate-types closure-name)))) (bt (impc:ir:get-base-type t)) (fullname (string-append closure-name "_adhoc_" (cname-encode bt) "_native"))) fullname) (impc:compiler:print-compiler-error "Try forcing a type? Ambiguous call to get_native_fptr" (string->symbol closure-name))) (let* ((bt (impc:ir:get-base-type (symbol->string (car type)))) (fullname (string-append closure-name "_adhoc_" (cname-encode bt) "_native"))) fullname)))))
(bind-macro (get_native_fptr closure-name . type) "return native function pointer for closure" (if (null? type) `(llvm_get_function_ptr (get_native_name ,closure-name)) `(llvm_get_function_ptr (get_native_name ,closure-name ,(car type)))))
(bind-macro (-> value . args) "a \"thread-first\" macro\r\n\r\nThis macro can help make code more readable by removing nesting.\r\nThreads the first expr passed to the macro into the first position in\r\nthe second sexp. Recursively continues to thread the resultant sexp\r\ninto any further sexp arguments." (if (null? args) value (let loop ((thread-items args) (transformed value)) (if (null? thread-items) transformed (loop (cdr thread-items) (insert-at-index 1 (car thread-items) transformed))))))
(bind-macro (->> value . args) "a \"thread-last\" macro\r\n\r\nThis macro can help make code more readable by removing nesting.\r\nThreads the first expr passed to the macro into the last position in\r\nthe second sexp. Recursively continues to thread the resultant sexp\r\ninto any further sexp arguments." (if (null? args) value (let loop ((thread-items args) (transformed value)) (if (null? thread-items) transformed (loop (cdr thread-items) (insert-at-index (length (car thread-items)) (car thread-items) transformed))))))
(bind-poly random imp_randf "polymorphic (pseudo)random number generation")
(bind-poly random imp_randd "")
(bind-poly random imp_rand1_i32 "")
(bind-poly random imp_rand2_i32 "")
(bind-poly random imp_rand1_i64 "")
(bind-poly random imp_rand2_i64 "")
(bind-poly random imp_rand1_f "")
(bind-poly random imp_rand2_f "")
(bind-poly random imp_rand1_d "")
(bind-poly random imp_rand2_d "")
(bind-poly tan tan "")
(bind-poly tan tanf "")
(bind-poly acos acos "")
(bind-poly acos acosf "")
(bind-poly asin asin "")
(bind-poly asin asinf "")
(bind-poly atan atan "")
(bind-poly atan atanf "")
(bind-poly atan2 atan2 "")
(bind-poly atan2 atan2f "")
(bind-poly cosh cosh "")
(bind-poly cosh coshf "")
(bind-poly sinh sinh "")
(bind-poly sinh sinhf "")
(bind-poly tanh tanh "")
(bind-poly tanh tanhf "")
(register-lib-func xtmbase print_adhoc_W3ZvaWQsbXpvbmUqXQ [void,mzone*]* 0 "" '(let ((print_adhoc_12 (lambda (z) (llvm_zone_print z) void))) print_adhoc_12))
(bind-poly print print_adhoc_W3ZvaWQsbXpvbmUqXQ "")
(register-lib-func xtmbase Zone_adhoc_W216b25lKixpNjRd [mzone*,i64]* 0 "" '(let ((Zone_adhoc_13 (lambda (size) (llvm_zone_create size)))) Zone_adhoc_13))
(bind-poly Zone Zone_adhoc_W216b25lKixpNjRd "")
(register-lib-func xtmbase reset_zone_adhoc_W216b25lKixtem9uZSpd [mzone*,mzone*]* 0 "" '(let ((reset_zone_adhoc_14 (lambda (z) (llvm_zone_reset z)))) reset_zone_adhoc_14))
(bind-poly reset_zone reset_zone_adhoc_W216b25lKixtem9uZSpd "")
(register-lib-func xtmbase destroy_zone_adhoc_W3ZvaWQsbXpvbmUqXQ [void,mzone*]* 0 "" '(let ((destroy_zone_adhoc_15 (lambda (z) (llvm_zone_destroy z)))) destroy_zone_adhoc_15))
(bind-poly destroy_zone destroy_zone_adhoc_W3ZvaWQsbXpvbmUqXQ "")
(register-lib-func xtmbase peek_zone_adhoc_W216b25lKl0 [mzone*]* 0 "" '(let ((peek_zone_adhoc_16 (lambda () (llvm_peek_zone_stack)))) peek_zone_adhoc_16))
(bind-poly peek_zone peek_zone_adhoc_W216b25lKl0 "")
(register-lib-func xtmbase zcopy_adhoc_W2kxLGkxLG16b25lKixtem9uZSpd [i1,i1,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_17 (lambda (x:i1 fromz:mzone* toz:mzone*) x))) zcopy_adhoc_17))
(bind-poly zcopy zcopy_adhoc_W2kxLGkxLG16b25lKixtem9uZSpd "")
(register-lib-func xtmbase zcopy_adhoc_W2k4LGk4LG16b25lKixtem9uZSpd [i8,i8,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_18 (lambda (x:i8 fromz:mzone* toz:mzone*) x))) zcopy_adhoc_18))
(bind-poly zcopy zcopy_adhoc_W2k4LGk4LG16b25lKixtem9uZSpd "")
(register-lib-func xtmbase zcopy_adhoc_W2kzMixpMzIsbXpvbmUqLG16b25lKl0 [i32,i32,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_19 (lambda (x:i32 fromz:mzone* toz:mzone*) x))) zcopy_adhoc_19))
(bind-poly zcopy zcopy_adhoc_W2kzMixpMzIsbXpvbmUqLG16b25lKl0 "")
(register-lib-func xtmbase zcopy_adhoc_W2k2NCxpNjQsbXpvbmUqLG16b25lKl0 [i64,i64,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_20 (lambda (x:i64 fromz:mzone* toz:mzone*) x))) zcopy_adhoc_20))
(bind-poly zcopy zcopy_adhoc_W2k2NCxpNjQsbXpvbmUqLG16b25lKl0 "")
(register-lib-func xtmbase zcopy_adhoc_W2Zsb2F0LGZsb2F0LG16b25lKixtem9uZSpd [float,float,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_21 (lambda (x:float fromz:mzone* toz:mzone*) x))) zcopy_adhoc_21))
(bind-poly zcopy zcopy_adhoc_W2Zsb2F0LGZsb2F0LG16b25lKixtem9uZSpd "")
(register-lib-func xtmbase zcopy_adhoc_W2RvdWJsZSxkb3VibGUsbXpvbmUqLG16b25lKl0 [double,double,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_22 (lambda (x:double fromz:mzone* toz:mzone*) x))) zcopy_adhoc_22))
(bind-poly zcopy zcopy_adhoc_W2RvdWJsZSxkb3VibGUsbXpvbmUqLG16b25lKl0 "")
(bind-func zcopy:[!a,!a,mzone*,mzone*]* (lambda (x fromz toz) (if (llvm_ptr_in_zone fromz (convert x)) (let ((size (obj-size x 1)) (newdat (convert (llvm_zone_malloc toz size)))) (memcpy (convert newdat) (convert x) size) newdat) x)))
(register-lib-type xtmbase String <i64,i8*> "xtlang's string type\r\n\r\nTuple contains <string_length,pointer_to_data>\r\n\r\nShould be created, modified and destroyed with the String_* library functions.\r\n\r\nSecond item in tuple is a char* c-style string ")
(register-lib-func xtmbase String_adhoc_W1N0cmluZyosaTY0LGk4Kl0 [String*,i64,i8*]* 0 "" '(let ((String_adhoc_23 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) String_adhoc_23))
(bind-poly String String_adhoc_W1N0cmluZyosaTY0LGk4Kl0 "")
(register-lib-func xtmbase String_z_adhoc_W1N0cmluZyosaTY0LGk4Kl0 [String*,i64,i8*]* 0 "" '(let ((String_z_adhoc_24 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) String_z_adhoc_24))
(bind-poly String_z String_z_adhoc_W1N0cmluZyosaTY0LGk4Kl0 "")
(register-lib-func xtmbase String_h_adhoc_W1N0cmluZyosaTY0LGk4Kl0 [String*,i64,i8*]* 0 "" '(let ((String_h_adhoc_25 (lambda (arg_0 arg_1) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) String_h_adhoc_25))
(bind-poly String_h String_h_adhoc_W1N0cmluZyosaTY0LGk4Kl0 "")
(register-lib-func xtmbase String_val_adhoc_W1N0cmluZyxpNjQsaTgqXQ [String,i64,i8*]* 0 "" '(let ((String_val_adhoc_26 (lambda (arg_0 arg_1) (let ((obj:String* (salloc))) (tfill! obj arg_0 arg_1) (pref obj 0))))) String_val_adhoc_26))
(bind-poly String_val String_val_adhoc_W1N0cmluZyxpNjQsaTgqXQ "")
(register-lib-func xtmbase hcopy_adhoc_W1N0cmluZyosU3RyaW5nKl0 [String*,String*]* 0 "" '(let ((hcopy_adhoc_27 (lambda (x:String*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) obj)))) hcopy_adhoc_27))
(bind-poly hcopy hcopy_adhoc_W1N0cmluZyosU3RyaW5nKl0 "")
(register-lib-func xtmbase hfree_adhoc_W3ZvaWQsU3RyaW5nKl0 [void,String*]* 0 "" '(let ((hfree_adhoc_28 (lambda (x:String*) () () (free x) void))) hfree_adhoc_28))
(bind-poly hfree hfree_adhoc_W3ZvaWQsU3RyaW5nKl0 "")
(register-lib-func xtmbase zcopy_adhoc_W1N0cmluZyosU3RyaW5nKixtem9uZSosbXpvbmUqXQ [String*,String*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_29 (lambda (x:String* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (if (llvm_ptr_in_zone fromz (cast (tref x 1) i8*)) (let ((newptr:i8* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 1) i8*) 1) (tset! obj 1 newptr)) (tset! obj 1 (tref x 1))) (pop_zone) obj)) x)))) zcopy_adhoc_29))
(bind-poly zcopy zcopy_adhoc_W1N0cmluZyosU3RyaW5nKixtem9uZSosbXpvbmUqXQ "")
(register-lib-func xtmbase String_adhoc_W1N0cmluZyosaTgqXQ [String*,i8*]* 0 "Create an xtlang String type from a c string (char array)\r\n\r\nUse via the polymorphic Str function\r\n\r\nAllocates (zone) memory to store the string.\r\nAllocation size will be (+ (strlen cstr) 1)\r\n\r\n@param cstr - character array from which to generate a new String\r\n@return - the new String*\r\n" '(let ((String_adhoc_30 (lambda (cstr) (let ((len (strlen cstr)) (buf:i8* (zalloc (+ len 1)))) (memcpy buf cstr (+ len 1)) (String_z len buf))))) String_adhoc_30))
(bind-poly String String_adhoc_W1N0cmluZyosaTgqXQ "")
(register-lib-func xtmbase Str_adhoc_W1N0cmluZyosaTgqXQ [String*,i8*]* 0 "" '(let ((Str_adhoc_31 (lambda (cstr:i8*) (String cstr)))) Str_adhoc_31))
(bind-poly Str Str_adhoc_W1N0cmluZyosaTgqXQ "")
(register-lib-func xtmbase String_h_adhoc_W1N0cmluZyosaTgqXQ [String*,i8*]* 0 "Create an xtlang String type from a c string (char array)\r\n\r\nUse via the polymorphic Str function\r\n\r\nAllocates (zone) memory to store the string.\r\nAllocation size will be (+ (strlen cstr) 1)\r\n\r\n@param cstr - character array from which to generate a new String\r\n@return - the new String*\r\n" '(let ((String_h_adhoc_32 (lambda (cstr) (let ((len (strlen cstr)) (buf:i8* (halloc (+ len 1)))) (memcpy buf cstr (+ len 1)) (String_h:[String*,i64,i8*]* len buf))))) String_h_adhoc_32))
(bind-poly String_h String_h_adhoc_W1N0cmluZyosaTgqXQ "")
(register-lib-func xtmbase String_free_adhoc_W3ZvaWQsU3RyaW5nKl0 [void,String*]* 0 "Free an xtlang String\r\n\r\nFrees both the underlying character array and the tuple container. The\r\nstring must have been a heap-allocated (halloc).\r\n\r\n@param s - String to be deleted\r\n" '(let ((String_free_adhoc_33 (lambda (s:String*) (free (tref s 1)) (free s) void))) String_free_adhoc_33))
(bind-poly String_free String_free_adhoc_W3ZvaWQsU3RyaW5nKl0 "")
(register-lib-func xtmbase print_adhoc_W3ZvaWQsU3RyaW5nKl0 [void,String*]* 0 "Prints all characters in a given string object.\r\n\r\nOverloads and should be used via the `println` function\r\nIf the string is empty will print a zero length string\r\n\r\n@param s - String to be printed\r\n" '(let ((print_adhoc_34 (lambda (s) (if (null? s) (begin (printf "") void) (begin (printf "'%s'" (tref s 1)) void))))) print_adhoc_34))
(bind-poly print print_adhoc_W3ZvaWQsU3RyaW5nKl0 "")
(register-lib-func xtmbase toString_adhoc_W1N0cmluZyosU3RyaW5nKl0 [String*,String*]* 0 "convert String to String\r\n\r\nThis is just the identity function, since a String is already a String." '(let ((toString_adhoc_35 (lambda (s) s))) toString_adhoc_35))
(bind-poly toString toString_adhoc_W1N0cmluZyosU3RyaW5nKl0 "")
(register-lib-func xtmbase String_strlen_adhoc_W2k2NCxTdHJpbmcqXQ [i64,String*]* 0 "Takes a String* and calls strlen on the data pointer\r\n\r\n@param s - the String*\r\n@return length - length (via strlen)" '(let ((String_strlen_adhoc_36 (lambda (s:String*) (strlen (tref s 1))))) String_strlen_adhoc_36))
(bind-poly String_strlen String_strlen_adhoc_W2k2NCxTdHJpbmcqXQ "")
(register-lib-func xtmbase length_adhoc_W2k2NCxTdHJpbmcqXQ [i64,String*]* 0 "Takes a (null-terminated) String* and returns the string length\r\n\r\n@param s - the String*\r\n@return length - length (via strlen)" '(let ((length_adhoc_37 (lambda (s:String*) (tref s 0)))) length_adhoc_37))
(bind-poly length length_adhoc_W2k2NCxTdHJpbmcqXQ "")
(register-lib-func xtmbase validate_adhoc_W2kxLFN0cmluZypd [i1,String*]* 0 "Check that the String's length matches that returned by strlen\r\n\r\n@param s - the String*\r\n@return bool" '(let ((validate_adhoc_38 (lambda (s:String*) (= (tref s 0) (strlen (tref s 1)))))) validate_adhoc_38))
(bind-poly validate validate_adhoc_W2kxLFN0cmluZypd "")
(register-lib-func xtmbase cstring_adhoc_W2k4KixTdHJpbmcqXQ [i8*,String*]* 0 "Return an i8* pointer to the underlying char array\r\n\r\n@param s\r\n@return c_str - the underlying i8 'char' array" '(let ((cstring_adhoc_39 (lambda (s:String*) (tref s 1)))) cstring_adhoc_39))
(bind-poly cstring cstring_adhoc_W2k4KixTdHJpbmcqXQ "")
(register-lib-func xtmbase String_adhoc_W1N0cmluZyosU3RyaW5nKl0 [String*,String*]* 0 "Create a new xtlang String type from an existing String\r\n\r\n@param s - pointer to the String to copy\r\n@return - the new String*\r\n" '(let ((String_adhoc_40 (lambda (s:String*) (String:[String*,i8*]* (tref s 1))))) String_adhoc_40))
(bind-poly String String_adhoc_W1N0cmluZyosU3RyaW5nKl0 "")
(register-lib-func xtmbase substring_adhoc_W1N0cmluZyosU3RyaW5nKixpNjQsaTY0XQ [String*,String*,i64,i64]* 0 "Create a new xtlang String which is a substring of an existing one\r\n\r\nIf `start' and `end' are out of range, return null\r\n\r\n@param s - pointer to an existing String\r\n@param start - substring start index\r\n@param end - substring end index\r\n@return - the new String*\r\n" '(let ((substring_adhoc_41 (lambda (s:String* start end) (if (or (< start 0) (< end start) (> end (tref s 0))) null (let ((buf:i8* (zalloc (+ (- end start) 1))) (i 0)) (dotimes (i (- end start)) (pset! buf i (pref (tref s 1) (+ i start)))) (pset! buf (- end start) 0) (Str buf)))))) substring_adhoc_41))
(bind-poly substring substring_adhoc_W1N0cmluZyosU3RyaW5nKixpNjQsaTY0XQ "")
(register-lib-func xtmbase cat2_adhoc_W1N0cmluZyosU3RyaW5nKixTdHJpbmcqXQ [String*,String*,String*]* 0 "Concatenate 2 Strings\r\n\r\nIf one string is null, the alternate String will be returned.\r\nIf both strings are null an empty String will be returned\r\n\r\n@param s1 - first string to be concatenated\r\n@param s2 - second string to be concatenated\r\n@return - pointer to new String\r\n" '(let ((cat2_adhoc_42 (lambda (s1:String* s2:String*) (if (null? s2) (String s1) (if (null? s1) (String s2) (let ((size (+ (tref s1 0) (tref s2 0))) (news:i8* (zalloc (+ 1 size)))) (strcpy news (tref s1 1)) (strncat news (tref s2 1) size) (String news))))))) cat2_adhoc_42))
(bind-poly cat2 cat2_adhoc_W1N0cmluZyosU3RyaW5nKixTdHJpbmcqXQ "")
(bind-macro (cat . args) "concatenate Strings or Symbols" (let loop ((rem (cdr args)) (ret (car args))) (if (null? rem) ret (loop (cdr rem) (list 'cat2 ret (car rem))))))
(register-lib-func xtmbase equal_adhoc_W2kxLFN0cmluZyosU3RyaW5nKl0 [i1,String*,String*]* 0 "Equality test for String\r\n\r\n@param s1 - first string\r\n@param s2 - second string\r\n@return - true/false\r\n" '(let ((equal_adhoc_43 (lambda (s1:String* s2:String*) (if (= (strcmp (tref s1 1) (tref s2 1)) 0) 1:i1 0:i1)))) equal_adhoc_43))
(bind-poly equal equal_adhoc_W2kxLFN0cmluZyosU3RyaW5nKl0 "")
(register-lib-func xtmbase trim_adhoc_W1N0cmluZyosU3RyaW5nKl0 [String*,String*]* 0 "" '(let ((trim_adhoc_44 (lambda (e:String*) (let ((s (tref e 1)) (len (tref e 0)) (i 0) (start -1) (end 0)) (while (and (< i len) (= (pref s i) 32)) (inc i 1)) (set! start i) (set! i (- len 1)) (while (and (> i -1) (= (pref s i) 32)) (dec i 1)) (set! end (+ 1 i)) (substring e start end))))) trim_adhoc_44))
(bind-poly trim trim_adhoc_W1N0cmluZyosU3RyaW5nKl0 "")
(register-lib-func xtmbase levenshtein_adhoc_W2k2NCxTdHJpbmcqLFN0cmluZypd [i64,String*,String*]* 0 "Returns the levenshtein distance between two strings\r\n\r\n@param s1 - string 1\r\n@param s1 - string 2\r\n@return - levenshetein distance\r\n" '(let ((levenshtein_adhoc_45 (lambda (s1:String* s2:String*) (let ((i 0) (j 0) (s1cstr (cstring s1)) (s1len:size_t (length s1)) (s2cstr (cstring s2)) (s2len:size_t (length s2)) (row:i64* (salloc (+ s1len 1))) (prev_row:i64* (salloc (+ s1len 1))) (min3 (lambda (a:i64 b c) (if (< a b) (if (< a c) a c) (if (< b c) b c))))) (dotimes (i (+ s2len 1)) (pset! prev_row i i)) (dotimes (i s1len) (pset! row 0 (+ i 1)) (dotimes (j s2len) (pset! row (+ j 1) (min3 (+ (pref row j) 1) (+ 1 (pref prev_row (+ j 1))) (+ (pref prev_row j) (if (= (pref s1cstr j) (pref s2cstr i)) 0 1))))) (let ((tmp_row:i64* null)) (set! tmp_row prev_row) (set! prev_row row) (set! row tmp_row))) (pref prev_row s2len))))) levenshtein_adhoc_45))
(bind-poly levenshtein levenshtein_adhoc_W2k2NCxTdHJpbmcqLFN0cmluZypd "")
(register-lib-func xtmbase similarity_adhoc_W2RvdWJsZSxTdHJpbmcqLFN0cmluZypd [double,String*,String*]* 0 "" '(let ((similarity_adhoc_46 (lambda (s1:String* s2:String*) (/ 1.0000000000000000000 (i64tod (+ 1 (levenshtein s1 s2))))))) similarity_adhoc_46))
(bind-poly similarity similarity_adhoc_W2RvdWJsZSxTdHJpbmcqLFN0cmluZypd "")
(register-lib-func xtmbase replace_adhoc_W1N0cmluZyosaTgqLGk4KixpOCpd [String*,i8*,i8*,i8*]* 0 "" '(let ((replace_adhoc_47 (lambda (orig:i8* rep:i8* with:i8*) (if (null? (strstr orig rep)) (Str orig) (let ((origl (strlen orig)) (repl (strlen rep)) (withl (strlen with)) (pos (strstr orig rep)) (start (- (ptrtoi64 pos) (ptrtoi64 orig))) (newstr:i8* (salloc (+ 1 (strlen orig) (- withl repl))))) (memset newstr 0 (+ 1 (strlen orig) (- withl repl))) (strncpy newstr orig start) (strncpy (pref-ptr newstr start) with withl) (strncpy (pref-ptr newstr (+ start withl)) (pref-ptr orig (+ start repl)) (- origl (+ start repl))) (Str newstr)))))) replace_adhoc_47))
(bind-poly replace replace_adhoc_W1N0cmluZyosaTgqLGk4KixpOCpd "")
(register-lib-func xtmbase replace_adhoc_W1N0cmluZyosU3RyaW5nKixpOCosaTgqXQ [String*,String*,i8*,i8*]* 0 "" '(let ((replace_adhoc_48 (lambda (orig:String* rep:i8* with:i8*) (replace:[String*,i8*,i8*,i8*]* (cstring orig) rep with)))) replace_adhoc_48))
(bind-poly replace replace_adhoc_W1N0cmluZyosU3RyaW5nKixpOCosaTgqXQ "")
(register-lib-func xtmbase replace_adhoc_W1N0cmluZyosU3RyaW5nKixpOCosU3RyaW5nKl0 [String*,String*,i8*,String*]* 0 "" '(let ((replace_adhoc_49 (lambda (orig:String* rep:i8* with:String*) (replace:[String*,i8*,i8*,i8*]* (cstring orig) rep (cstring with))))) replace_adhoc_49))
(bind-poly replace replace_adhoc_W1N0cmluZyosU3RyaW5nKixpOCosU3RyaW5nKl0 "")
(register-lib-func xtmbase replace_adhoc_W1N0cmluZyosU3RyaW5nKixTdHJpbmcqLFN0cmluZypd [String*,String*,String*,String*]* 0 "" '(let ((replace_adhoc_50 (lambda (orig:String* rep:String* with:String*) (replace:[String*,i8*,i8*,i8*]* (cstring orig) (cstring rep) (cstring with))))) replace_adhoc_50))
(bind-poly replace replace_adhoc_W1N0cmluZyosU3RyaW5nKixTdHJpbmcqLFN0cmluZypd "")
(register-lib-func xtmbase replace_all_adhoc_W1N0cmluZyosaTgqLGk4KixpOCpd [String*,i8*,i8*,i8*]* 0 "" '(let ((replace_all_adhoc_51 (lambda (orig:i8* rep:i8* with:i8*) (let ((s1:String* (Str orig)) (s2:String* (Str with)) (cnt 0)) (while (and (not (equal s1 s2)) (< cnt 100)) (set! s2 s1) (set! s1 (replace s1 rep with)) (set! cnt (+ cnt 1))) s1)))) replace_all_adhoc_51))
(bind-poly replace_all replace_all_adhoc_W1N0cmluZyosaTgqLGk4KixpOCpd "")
(register-lib-func xtmbase replace_all_adhoc_W1N0cmluZyosU3RyaW5nKixpOCosaTgqXQ [String*,String*,i8*,i8*]* 0 "" '(let ((replace_all_adhoc_52 (lambda (orig:String* rep:i8* with:i8*) (replace_all:[String*,i8*,i8*,i8*]* (cstring orig) rep with)))) replace_all_adhoc_52))
(bind-poly replace_all replace_all_adhoc_W1N0cmluZyosU3RyaW5nKixpOCosaTgqXQ "")
(register-lib-func xtmbase replace_all_adhoc_W1N0cmluZyosU3RyaW5nKixpOCosU3RyaW5nKl0 [String*,String*,i8*,String*]* 0 "" '(let ((replace_all_adhoc_53 (lambda (orig:String* rep:i8* with:String*) (replace_all:[String*,i8*,i8*,i8*]* (cstring orig) rep (cstring with))))) replace_all_adhoc_53))
(bind-poly replace_all replace_all_adhoc_W1N0cmluZyosU3RyaW5nKixpOCosU3RyaW5nKl0 "")
(register-lib-func xtmbase replace_all_adhoc_W1N0cmluZyosU3RyaW5nKixTdHJpbmcqLFN0cmluZypd [String*,String*,String*,String*]* 0 "" '(let ((replace_all_adhoc_54 (lambda (orig:String* rep:String* with:String*) (replace_all:[String*,i8*,i8*,i8*]* (cstring orig) (cstring rep) (cstring with))))) replace_all_adhoc_54))
(bind-poly replace_all replace_all_adhoc_W1N0cmluZyosU3RyaW5nKixTdHJpbmcqLFN0cmluZypd "")
(bind-func equal:[bool,!a,!a]* (lambda (a b) (= a b)))
(bind-func equal:[bool,!a,!b]* (lambda (a b) #f))
(register-lib-func xtmbase format_return_adhoc_W1N0cmluZypd [String*]* 0 "" '(let ((format_return_adhoc_55 (lambda () (let ((str:i8* (salloc 256))) (sprintf str "\n") (String str))))) format_return_adhoc_55))
(bind-poly format_return format_return_adhoc_W1N0cmluZypd "")
(register-lib-func xtmbase format_space_adhoc_W1N0cmluZypd [String*]* 0 "" '(let ((format_space_adhoc_56 (lambda () (String " ")))) format_space_adhoc_56))
(bind-poly format_space format_space_adhoc_W1N0cmluZypd "")
(register-lib-func xtmbase format_adhoc_W1N0cmluZyosaTFd [String*,i1]* 0 "" '(let ((format_adhoc_57 (lambda (x:i1) (let ((str:i8* (salloc 256))) (sprintf str "%d" x) (String str))))) format_adhoc_57))
(bind-poly format format_adhoc_W1N0cmluZyosaTFd "")
(register-lib-func xtmbase format_adhoc_W1N0cmluZyosaThd [String*,i8]* 0 "" '(let ((format_adhoc_58 (lambda (x:i8) (let ((str:i8* (salloc 256))) (sprintf str "%d" x) (String str))))) format_adhoc_58))
(bind-poly format format_adhoc_W1N0cmluZyosaThd "")
(register-lib-func xtmbase format_adhoc_W1N0cmluZyosaTE2XQ [String*,i16]* 0 "" '(let ((format_adhoc_59 (lambda (x:i16) (let ((str:i8* (salloc 256))) (sprintf str "%d" x) (String str))))) format_adhoc_59))
(bind-poly format format_adhoc_W1N0cmluZyosaTE2XQ "")
(register-lib-func xtmbase format_adhoc_W1N0cmluZyosaTMyXQ [String*,i32]* 0 "" '(let ((format_adhoc_60 (lambda (x:i32) (let ((str:i8* (salloc 256))) (sprintf str "%d" x) (String str))))) format_adhoc_60))
(bind-poly format format_adhoc_W1N0cmluZyosaTMyXQ "")
(register-lib-func xtmbase format_adhoc_W1N0cmluZyosaTY0XQ [String*,i64]* 0 "" '(let ((format_adhoc_61 (lambda (x:i64) (let ((str:i8* (salloc 256))) (sprintf str "%lld" x) (String str))))) format_adhoc_61))
(bind-poly format format_adhoc_W1N0cmluZyosaTY0XQ "")
(register-lib-func xtmbase format_adhoc_W1N0cmluZyosZmxvYXRd [String*,float]* 0 "" '(let ((format_adhoc_62 (lambda (x:float) (let ((str:i8* (salloc 256))) (sprintf str "%f" (ftod x)) (String str))))) format_adhoc_62))
(bind-poly format format_adhoc_W1N0cmluZyosZmxvYXRd "")
(register-lib-func xtmbase format_adhoc_W1N0cmluZyosZG91YmxlXQ [String*,double]* 0 "" '(let ((format_adhoc_63 (lambda (x:double) (let ((str:i8* (salloc 256))) (sprintf str "%f" x) (String str))))) format_adhoc_63))
(bind-poly format format_adhoc_W1N0cmluZyosZG91YmxlXQ "")
(register-lib-func xtmbase format_adhoc_W1N0cmluZyosU3RyaW5nKl0 [String*,String*]* 0 "" '(let ((format_adhoc_64 (lambda (x) x))) format_adhoc_64))
(bind-poly format format_adhoc_W1N0cmluZyosU3RyaW5nKl0 "")
(register-lib-func xtmbase toString_return_adhoc_W1N0cmluZypd [String*]* 0 "" '(let ((toString_return_adhoc_65 (lambda () (String "\n")))) toString_return_adhoc_65))
(bind-poly toString_return toString_return_adhoc_W1N0cmluZypd "")
(register-lib-func xtmbase toString_space_adhoc_W1N0cmluZypd [String*]* 0 "" '(let ((toString_space_adhoc_66 (lambda () (String " ")))) toString_space_adhoc_66))
(bind-poly toString_space toString_space_adhoc_W1N0cmluZypd "")
(register-lib-func xtmbase toString_adhoc_W1N0cmluZyosaTFd [String*,i1]* 0 "" '(let ((toString_adhoc_67 (lambda (x:i1) (let ((s:i8* (salloc 256))) (sprintf s "%d" x) (String s))))) toString_adhoc_67))
(bind-poly toString toString_adhoc_W1N0cmluZyosaTFd "")
(register-lib-func xtmbase toString_adhoc_W1N0cmluZyosaThd [String*,i8]* 0 "" '(let ((toString_adhoc_68 (lambda (x:i8) (let ((s:i8* (salloc 256))) (sprintf s "%d" x) (String s))))) toString_adhoc_68))
(bind-poly toString toString_adhoc_W1N0cmluZyosaThd "")
(register-lib-func xtmbase toString_adhoc_W1N0cmluZyosaTE2XQ [String*,i16]* 0 "" '(let ((toString_adhoc_69 (lambda (x:i16) (let ((s:i8* (salloc 256))) (sprintf s "%d" x) (String s))))) toString_adhoc_69))
(bind-poly toString toString_adhoc_W1N0cmluZyosaTE2XQ "")
(register-lib-func xtmbase toString_adhoc_W1N0cmluZyosaTMyXQ [String*,i32]* 0 "" '(let ((toString_adhoc_70 (lambda (x:i32) (let ((s:i8* (salloc 256))) (sprintf s "%d" x) (String s))))) toString_adhoc_70))
(bind-poly toString toString_adhoc_W1N0cmluZyosaTMyXQ "")
(register-lib-func xtmbase toString_adhoc_W1N0cmluZyosaTY0XQ [String*,i64]* 0 "" '(let ((toString_adhoc_71 (lambda (x:i64) (let ((st:i8* (salloc 256))) (sprintf st "%lld" x) (String st))))) toString_adhoc_71))
(bind-poly toString toString_adhoc_W1N0cmluZyosaTY0XQ "")
(register-lib-func xtmbase toString_adhoc_W1N0cmluZyosZmxvYXRd [String*,float]* 0 "" '(let ((toString_adhoc_72 (lambda (x:float) (let ((st:i8* (salloc 256))) (sprintf st "%f" (ftod x)) (String st))))) toString_adhoc_72))
(bind-poly toString toString_adhoc_W1N0cmluZyosZmxvYXRd "")
(register-lib-func xtmbase toString_adhoc_W1N0cmluZyosZG91YmxlXQ [String*,double]* 0 "" '(let ((toString_adhoc_73 (lambda (x:double) (let ((st:i8* (salloc 256))) (sprintf st "%f" x) (String st))))) toString_adhoc_73))
(bind-poly toString toString_adhoc_W1N0cmluZyosZG91YmxlXQ "")
(bind-func toString:[String*,!a]* (lambda (x) (String "_")))
(register-lib-func xtmbase print_adhoc_W3ZvaWQsaTgqXQ [void,i8*]* 0 "" '(let ((print_adhoc_74 (lambda (x:i8*) (printf "%p" x) void))) print_adhoc_74))
(bind-poly print print_adhoc_W3ZvaWQsaTgqXQ "")
(register-lib-func xtmbase toString_adhoc_W1N0cmluZyosaTgqXQ [String*,i8*]* 0 "" '(let ((toString_adhoc_75 (lambda (x:i8*) (let ((s:i8* (salloc 256))) (sprintf s "%p" x) (String s))))) toString_adhoc_75))
(bind-poly toString toString_adhoc_W1N0cmluZyosaTgqXQ "")
(bind-type Box <!a> "a generic 'Box' type")
(bind-func Box:[Box{!ga_16}*,!ga_16]* (lambda (arg_0) (let ((obj (zalloc))) (tset! obj 0 arg_0) obj)))
(bind-func Box_z:[Box{!ga_16}*,!ga_16]* (lambda (arg_0) (let ((obj (zalloc))) (tset! obj 0 arg_0) obj)))
(bind-func Box_h:[Box{!ga_16}*,!ga_16]* (lambda (arg_0) (let ((obj (halloc))) (tset! obj 0 arg_0) obj)))
(bind-func toString:[String*,Box:<!ga_16>*]* (lambda (x) (if (null? x) (sprintout "<Box:null") (sprintout "<Box:" (tref x 0) ">"))))
(bind-func print:[void,Box:<!ga_16>*]* (lambda (x) (if (null? x) (printout "<Box:null") (printout "<Box:" (tref x 0) ">")) void))
(bind-func unbox:[!a,Box:<!ga_16>*]* (lambda (b) (tref b 0)))
(bind-func print:[void,Box:<!ga_16>*]* (lambda (b) (printout "<Box '" (tref b 0) "'>") void))
(register-lib-type xtmbase Symbol <i64,i8*> "xtlang's symbol type\r\n\r\nTuple contains <symbol_length,characters>\r\n\r\nShould be created, modified and desymoyed with the Symbol_* library functions.\r\n\r\nSecond item in tuple is a char* c-style symbol ")
(register-lib-func xtmbase Symbol_adhoc_W1N5bWJvbCosaTY0LGk4Kl0 [Symbol*,i64,i8*]* 0 "" '(let ((Symbol_adhoc_76 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) Symbol_adhoc_76))
(bind-poly Symbol Symbol_adhoc_W1N5bWJvbCosaTY0LGk4Kl0 "")
(register-lib-func xtmbase Symbol_z_adhoc_W1N5bWJvbCosaTY0LGk4Kl0 [Symbol*,i64,i8*]* 0 "" '(let ((Symbol_z_adhoc_77 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) Symbol_z_adhoc_77))
(bind-poly Symbol_z Symbol_z_adhoc_W1N5bWJvbCosaTY0LGk4Kl0 "")
(register-lib-func xtmbase Symbol_h_adhoc_W1N5bWJvbCosaTY0LGk4Kl0 [Symbol*,i64,i8*]* 0 "" '(let ((Symbol_h_adhoc_78 (lambda (arg_0 arg_1) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) Symbol_h_adhoc_78))
(bind-poly Symbol_h Symbol_h_adhoc_W1N5bWJvbCosaTY0LGk4Kl0 "")
(register-lib-func xtmbase Symbol_val_adhoc_W1N5bWJvbCxpNjQsaTgqXQ [Symbol,i64,i8*]* 0 "" '(let ((Symbol_val_adhoc_79 (lambda (arg_0 arg_1) (let ((obj:Symbol* (salloc))) (tfill! obj arg_0 arg_1) (pref obj 0))))) Symbol_val_adhoc_79))
(bind-poly Symbol_val Symbol_val_adhoc_W1N5bWJvbCxpNjQsaTgqXQ "")
(register-lib-func xtmbase hcopy_adhoc_W1N5bWJvbCosU3ltYm9sKl0 [Symbol*,Symbol*]* 0 "" '(let ((hcopy_adhoc_80 (lambda (x:Symbol*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) obj)))) hcopy_adhoc_80))
(bind-poly hcopy hcopy_adhoc_W1N5bWJvbCosU3ltYm9sKl0 "")
(register-lib-func xtmbase hfree_adhoc_W3ZvaWQsU3ltYm9sKl0 [void,Symbol*]* 0 "" '(let ((hfree_adhoc_81 (lambda (x:Symbol*) () () (free x) void))) hfree_adhoc_81))
(bind-poly hfree hfree_adhoc_W3ZvaWQsU3ltYm9sKl0 "")
(register-lib-func xtmbase zcopy_adhoc_W1N5bWJvbCosU3ltYm9sKixtem9uZSosbXpvbmUqXQ [Symbol*,Symbol*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_82 (lambda (x:Symbol* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (if (llvm_ptr_in_zone fromz (cast (tref x 1) i8*)) (let ((newptr:i8* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 1) i8*) 1) (tset! obj 1 newptr)) (tset! obj 1 (tref x 1))) (pop_zone) obj)) x)))) zcopy_adhoc_82))
(bind-poly zcopy zcopy_adhoc_W1N5bWJvbCosU3ltYm9sKixtem9uZSosbXpvbmUqXQ "")
(register-lib-func xtmbase Symbol_free_adhoc_W3ZvaWQsU3ltYm9sKl0 [void,Symbol*]* 0 "Free an xtlang Symbol\r\n\r\nFrees both the underlying character array and the tuple container.\r\n@param sym - Symbol to be deleted\r\n" '(let ((Symbol_free_adhoc_83 (lambda (sym:Symbol*) (free (tref sym 1)) (free sym) void))) Symbol_free_adhoc_83))
(bind-poly Symbol_free Symbol_free_adhoc_W3ZvaWQsU3ltYm9sKl0 "")
(register-lib-func xtmbase print_adhoc_W3ZvaWQsU3ltYm9sKl0 [void,Symbol*]* 0 "Prints all characters in a given symbol object.\r\n\r\nOverloads and should be used via the `println` function\r\nIf the symbol is empty will print a zero length symbol\r\n\r\n@param sym - Symbol to be printed\r\n" '(let ((print_adhoc_84 (lambda (x) (if (null? x) (begin (printf "") void) (begin (printf "%s" (tref x 1)) void))))) print_adhoc_84))
(bind-poly print print_adhoc_W3ZvaWQsU3ltYm9sKl0 "")
(register-lib-func xtmbase toString_adhoc_W1N0cmluZyosU3ltYm9sKl0 [String*,Symbol*]* 0 "convert Symbol to String" '(let ((toString_adhoc_85 (lambda (x) (String (tref x 0) (tref x 1))))) toString_adhoc_85))
(bind-poly toString toString_adhoc_W1N0cmluZyosU3ltYm9sKl0 "")
(register-lib-func xtmbase length_adhoc_W2k2NCxTeW1ib2wqXQ [i64,Symbol*]* 0 "Takes a (null-terminated) Symbol* and returns the symbol length\r\n\r\n@param sym - the Symbol*\r\n@return length - length (via symlen)" '(let ((length_adhoc_86 (lambda (sym:Symbol*) (strlen (tref sym 1))))) length_adhoc_86))
(bind-poly length length_adhoc_W2k2NCxTeW1ib2wqXQ "")
(register-lib-func xtmbase size_adhoc_W2k2NCxTeW1ib2wqXQ [i64,Symbol*]* 0 "Takes a Symbol* and returns the size of allocated memory\r\n\r\nNot necessarily the same as length -\r\n@param sym - the Symbol\r\n@return size - size of alloc'ed memory" '(let ((size_adhoc_87 (lambda (sym:Symbol*) (tref sym 0)))) size_adhoc_87))
(bind-poly size size_adhoc_W2k2NCxTeW1ib2wqXQ "")
(register-lib-func xtmbase cstring_adhoc_W2k4KixTeW1ib2wqXQ [i8*,Symbol*]* 0 "Return an i8* pointer to the underlying char array\r\n\r\n@param sym\r\n@return c_sym - the underlying i8 'char' array" '(let ((cstring_adhoc_88 (lambda (sym:Symbol*) (tref sym 1)))) cstring_adhoc_88))
(bind-poly cstring cstring_adhoc_W2k4KixTeW1ib2wqXQ "")
(register-lib-func xtmbase Symbol_adhoc_W1N5bWJvbCosaTgqXQ [Symbol*,i8*]* 0 "Create an xtlang Symbol type from a c string (char array)\r\n\r\nUse via the polymorphic Str function\r\n\r\n@param s - character array from which to generate a new Symbol\r\n@return - the new Symbol*\r\n" '(let ((Symbol_adhoc_89 (lambda (s) (let ((len (strlen s)) (str (Symbol_z len s))) str)))) Symbol_adhoc_89))
(bind-poly Symbol Symbol_adhoc_W1N5bWJvbCosaTgqXQ "")
(register-lib-func xtmbase Symbol_adhoc_W1N5bWJvbCosU3ltYm9sKl0 [Symbol*,Symbol*]* 0 "Create a new xtlang Symbol type from an existing Symbol\r\n\r\nUse via the polymorphic Str function\r\n\r\n@param s - pointer to the Symbol to copy\r\n@return - the new Symbol*\r\n" '(let ((Symbol_adhoc_90 (lambda (str:Symbol*) (let ((len (length str)) (new_str (Symbol_z len (cstring str)))) new_str)))) Symbol_adhoc_90))
(bind-poly Symbol Symbol_adhoc_W1N5bWJvbCosU3ltYm9sKl0 "")
(register-lib-func xtmbase equal_adhoc_W2kxLFN5bWJvbCosU3ltYm9sKl0 [i1,Symbol*,Symbol*]* 0 "Equality test for Symbol\r\n\r\n@param s1 - first symbol\r\n@param s2 - second symbol\r\n@return - true/false\r\n" '(let ((equal_adhoc_91 (lambda (s1:Symbol* s2:Symbol*) (if (= (strcmp (tref s1 1) (tref s2 1)) 0) 1:i1 0:i1)))) equal_adhoc_91))
(bind-poly equal equal_adhoc_W2kxLFN5bWJvbCosU3ltYm9sKl0 "")
(register-lib-func xtmbase cat2_adhoc_W1N5bWJvbCosU3ltYm9sKixTeW1ib2wqXQ [Symbol*,Symbol*,Symbol*]* 0 "Concatenate 2 Symbols!\r\n\r\nIf one symbol is null, the alternate symbol will be returned.\r\nIf both symbols are null an empty symbol will be returned\r\n\r\n@param s1 - first string to be concatenated\r\n@param s2 - second string to be concatenated\r\n@return - pointer to new Symbol\r\n" '(let ((cat2_adhoc_92 (lambda (s1:Symbol* s2:Symbol*) (if (null? s2) (Symbol s1) (if (null? s1) (Symbol s2) (let ((size (+ (tref s1 0) (tref s2 0))) (news:i8* (zalloc (+ 1 size)))) (strcpy news (tref s1 1)) (strncat news (tref s2 1) size) (Symbol news))))))) cat2_adhoc_92))
(bind-poly cat2 cat2_adhoc_W1N5bWJvbCosU3ltYm9sKixTeW1ib2wqXQ "")
(print-with-colors 'green 'default #t (print "done"))(print " in" (- (clock:clock) *xtmlib-base-loaded-timer*) "seconds\n")
(define *xtmlib-base-loaded-timer* (clock:clock))
(set! *impc:compiler:message:level* *impc:aot:prev-compiler-message-level*)
