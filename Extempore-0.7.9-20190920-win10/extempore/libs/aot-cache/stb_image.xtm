(sys:load "libs/base/base.xtm" 'quiet)
(sys:load-preload-check 'stb_image)
(define *xtmlib-stb_image-loaded* #t)
(define *xtmlib-stb_image-loaded-timer* (clock:clock))
(set! *impc:aot:prev-compiler-message-level* *impc:compiler:message:level*)
(set! *impc:compiler:message:level* 'low)

(print "Loading ")
(print-with-colors 'blue 'default #t (print 'xtmstb_image))
(print " library... ")
(bind-dylib libstb_image (list "stb_image.dll"))(if (not 'libstb_image) (begin (print-with-colors '*impc:compiler:pretty-print-error-color* 'default #t (print "Error")) (print ": could not load the " 'libstb_image " dynamic library - perhaps you can install it through your package manager?\n") (error "")))
(bind-external-dylib-declarations "libstb_image" "xtmstb_image")
(llvm:compile-ir (sys:slurp-file "libs/aot-cache/xtmstb_image.ll"));; flush the JIT-compilation queue, so we only get this file's code in the module
(impc:compiler:flush-jit-compilation-queue)
(bind-alias stbi_io_callbacks i8 "")
(bind-alias stbi_uc i8 "")
(llvm:bind-symbol libstb_image "stbi_load")
(bind-lib libstb_image stbi_load [stbi_uc*,i8*,i32*,i32*,i32*,i32]*)
(llvm:bind-symbol libstb_image "stbi_load_from_memory")
(bind-lib libstb_image stbi_load_from_memory [stbi_uc*,stbi_uc*,i32,i32*,i32*,i32*,i32]*)
(llvm:bind-symbol libstb_image "stbi_load_from_callbacks")
(bind-lib libstb_image stbi_load_from_callbacks [stbi_uc*,stbi_io_callbacks*,i8*,i32*,i32*,i32*,i32]*)
(llvm:bind-symbol libstb_image "stbi_loadf")
(bind-lib libstb_image stbi_loadf [float*,i8*,i32*,i32*,i32*,i32]*)
(llvm:bind-symbol libstb_image "stbi_loadf_from_memory")
(bind-lib libstb_image stbi_loadf_from_memory [float*,stbi_uc*,i32,i32*,i32*,i32*,i32]*)
(llvm:bind-symbol libstb_image "stbi_loadf_from_callbacks")
(bind-lib libstb_image stbi_loadf_from_callbacks [float*,stbi_io_callbacks*,i8*,i32*,i32*,i32*,i32]*)
(llvm:bind-symbol libstb_image "stbi_hdr_to_ldr_gamma")
(bind-lib libstb_image stbi_hdr_to_ldr_gamma [void,float]*)
(llvm:bind-symbol libstb_image "stbi_hdr_to_ldr_scale")
(bind-lib libstb_image stbi_hdr_to_ldr_scale [void,float]*)
(llvm:bind-symbol libstb_image "stbi_ldr_to_hdr_gamma")
(bind-lib libstb_image stbi_ldr_to_hdr_gamma [void,float]*)
(llvm:bind-symbol libstb_image "stbi_ldr_to_hdr_scale")
(bind-lib libstb_image stbi_ldr_to_hdr_scale [void,float]*)
(llvm:bind-symbol libstb_image "stbi_is_hdr_from_callbacks")
(bind-lib libstb_image stbi_is_hdr_from_callbacks [i32,stbi_io_callbacks*,i8*]*)
(llvm:bind-symbol libstb_image "stbi_is_hdr_from_memory")
(bind-lib libstb_image stbi_is_hdr_from_memory [i32,stbi_uc*,i32]*)
(llvm:bind-symbol libstb_image "stbi_is_hdr")
(bind-lib libstb_image stbi_is_hdr [i32,i8*]*)
(llvm:bind-symbol libstb_image "stbi_failure_reason")
(bind-lib libstb_image stbi_failure_reason [i8*]*)
(llvm:bind-symbol libstb_image "stbi_image_free")
(bind-lib libstb_image stbi_image_free [void,i8*]*)
(llvm:bind-symbol libstb_image "stbi_info_from_memory")
(bind-lib libstb_image stbi_info_from_memory [i32,stbi_uc*,i32,i32*,i32*,i32*]*)
(llvm:bind-symbol libstb_image "stbi_info_from_callbacks")
(bind-lib libstb_image stbi_info_from_callbacks [i32,stbi_io_callbacks*,i8*,i32*,i32*,i32*]*)
(llvm:bind-symbol libstb_image "stbi_info")
(bind-lib libstb_image stbi_info [i32,i8*,i32*,i32*,i32*]*)
(llvm:bind-symbol libstb_image "stbi_set_unpremultiply_on_load")
(bind-lib libstb_image stbi_set_unpremultiply_on_load [void,i32]*)
(llvm:bind-symbol libstb_image "stbi_convert_iphone_png_to_rgb")
(bind-lib libstb_image stbi_convert_iphone_png_to_rgb [void,i32]*)
(llvm:bind-symbol libstb_image "stbi_set_flip_vertically_on_load")
(bind-lib libstb_image stbi_set_flip_vertically_on_load [void,i32]*)
(llvm:bind-symbol libstb_image "stbi_zlib_decode_malloc_guesssize")
(bind-lib libstb_image stbi_zlib_decode_malloc_guesssize [i8*,i8*,i32,i32,i32*]*)
(llvm:bind-symbol libstb_image "stbi_zlib_decode_malloc_guesssize_headerflag")
(bind-lib libstb_image stbi_zlib_decode_malloc_guesssize_headerflag [i8*,i8*,i32,i32,i32*,i32]*)
(llvm:bind-symbol libstb_image "stbi_zlib_decode_malloc")
(bind-lib libstb_image stbi_zlib_decode_malloc [i8*,i8*,i32,i32*]*)
(llvm:bind-symbol libstb_image "stbi_zlib_decode_buffer")
(bind-lib libstb_image stbi_zlib_decode_buffer [i32,i8*,i32,i8*,i32]*)
(llvm:bind-symbol libstb_image "stbi_zlib_decode_noheader_malloc")
(bind-lib libstb_image stbi_zlib_decode_noheader_malloc [i8*,i8*,i32,i32*]*)
(llvm:bind-symbol libstb_image "stbi_zlib_decode_noheader_buffer")
(bind-lib libstb_image stbi_zlib_decode_noheader_buffer [i32,i8*,i32,i8*,i32]*)
(llvm:bind-symbol libstb_image "stbir_resize_uint8")
(bind-lib libstb_image stbir_resize_uint8 [i32,i8*,i32,i32,i32,i8*,i32,i32,i32,i32]*)
(llvm:bind-symbol libstb_image "stbir_resize_float")
(bind-lib libstb_image stbir_resize_float [i32,float*,i32,i32,i32,float*,i32,i32,i32,i32]*)
(register-lib-val xtmstb_image STBIR_ALPHA_CHANNEL_NONE i32 "")
(register-lib-val xtmstb_image STBIR_FLAG_ALPHA_PREMULTIPLIED i32 "")
(register-lib-val xtmstb_image STBIR_FLAG_ALPHA_USES_COLORSPACE i32 "")
(llvm:bind-symbol libstb_image "stbir_resize_uint8_srgb")
(bind-lib libstb_image stbir_resize_uint8_srgb [i32,i8*,i32,i32,i32,i8*,i32,i32,i32,i32,i32,i32]*)
(bind-alias stbir_edge i32 "")
(register-lib-val xtmstb_image STBIR_EDGE_CLAMP i32 "")
(register-lib-val xtmstb_image STBIR_EDGE_REFLECT i32 "")
(register-lib-val xtmstb_image STBIR_EDGE_WRAP i32 "")
(register-lib-val xtmstb_image STBIR_EDGE_ZERO i32 "")
(llvm:bind-symbol libstb_image "stbir_resize_uint8_srgb_edgemode")
(bind-lib libstb_image stbir_resize_uint8_srgb_edgemode [i32,i8*,i32,i32,i32,i8*,i32,i32,i32,i32,i32,i32,stbir_edge]*)
(llvm:bind-symbol libstb_image "stbi_write_png")
(bind-lib libstb_image stbi_write_png [i32,i8*,i32,i32,i32,i8*,i32]*)
(llvm:bind-symbol libstb_image "stbi_write_bmp")
(bind-lib libstb_image stbi_write_bmp [i32,i8*,i32,i32,i32,i8*]*)
(llvm:bind-symbol libstb_image "stbi_write_tga")
(bind-lib libstb_image stbi_write_tga [i32,i8*,i32,i32,i32,i8*]*)
(llvm:bind-symbol libstb_image "stbi_write_hdr")
(bind-lib libstb_image stbi_write_hdr [i32,i8*,i32,i32,i32,float*]*)
(register-lib-func xtmstb_image stbi_flip_vertically_adhoc_W3ZvaWQsaTMyLGkzMixpMzIsaTgqXQ [void,i32,i32,i32,i8*]* 0 "" '(let ((stbi_flip_vertically_adhoc_1 (lambda (width:i32 height:i32 ncomp:i32 data:i8*) (let ((stride (* ncomp width)) (tmp 0)) (doloop (i (/ height 2)) (doloop (j stride) (set! tmp (pref data (+ (* i stride) j))) (pset! data (+ (* i stride) j) (pref data (+ (* (- height i 1) stride) j))) (pset! data (+ (* (- height i 1) stride) j) tmp))))))) stbi_flip_vertically_adhoc_1))
(bind-poly stbi_flip_vertically stbi_flip_vertically_adhoc_W3ZvaWQsaTMyLGkzMixpMzIsaTgqXQ "")
(print-with-colors 'green 'default #t (print "done"))(print " in" (- (clock:clock) *xtmlib-stb_image-loaded-timer*) "seconds\n")
(define *xtmlib-stb_image-loaded-timer* (clock:clock))
(set! *impc:compiler:message:level* *impc:aot:prev-compiler-message-level*)
