(sys:load "libs/base/base.xtm" 'quiet)
(sys:load "libs/core/math.xtm" 'quiet)
(sys:load-preload-check 'fft)
(define *xtmlib-fft-loaded* #t)
(define *xtmlib-fft-loaded-timer* (clock:clock))
(set! *impc:aot:prev-compiler-message-level* *impc:compiler:message:level*)
(set! *impc:compiler:message:level* 'low)

(print "Loading ")
(print-with-colors 'blue 'default #t (print 'xtmfft))
(print " library... ")
(bind-dylib libkiss_fft (list "kiss_fft.dll"))(if (not 'libkiss_fft) (begin (print-with-colors '*impc:compiler:pretty-print-error-color* 'default #t (print "Error")) (print ": could not load the " 'libkiss_fft " dynamic library - perhaps you can install it through your package manager?\n") (error "")))
(bind-external-dylib-declarations "libkiss_fft" "xtmfft")
(llvm:compile-ir (sys:slurp-file "libs/aot-cache/xtmfft.ll"));; flush the JIT-compilation queue, so we only get this file's code in the module
(impc:compiler:flush-jit-compilation-queue)
(bind-alias kiss_fft_scalar float "")
(bind-alias kiss_fft_cpx Complexf "")
(bind-alias kiss_fft_cfg i8* "")
(llvm:bind-symbol libkiss_fft "kiss_fft_alloc")
(bind-lib libkiss_fft kiss_fft_alloc [kiss_fft_cfg,i32,i32,i8*,size_t*]*)
(llvm:bind-symbol libkiss_fft "kiss_fft")
(bind-lib libkiss_fft kiss_fft [void,kiss_fft_cfg,kiss_fft_cpx*,kiss_fft_cpx*]*)
(llvm:bind-symbol libkiss_fft "kiss_fft_stride")
(bind-lib libkiss_fft kiss_fft_stride [void,kiss_fft_cfg,kiss_fft_cpx*,kiss_fft_cpx*,i32]*)
(llvm:bind-symbol libkiss_fft "kiss_fft_cleanup")
(bind-lib libkiss_fft kiss_fft_cleanup [void]*)
(llvm:bind-symbol libkiss_fft "kiss_fft_next_fast_size")
(bind-lib libkiss_fft kiss_fft_next_fast_size [i32,i32]*)
(llvm:bind-symbol libkiss_fft "kfc_fft")
(bind-lib libkiss_fft kfc_fft [void,i32,kiss_fft_cpx*,kiss_fft_cpx*]*)
(llvm:bind-symbol libkiss_fft "kfc_ifft")
(bind-lib libkiss_fft kfc_ifft [void,i32,kiss_fft_cpx*,kiss_fft_cpx*]*)
(llvm:bind-symbol libkiss_fft "kfc_cleanup")
(bind-lib libkiss_fft kfc_cleanup [void]*)
(bind-alias kiss_fftnd_cfg i8* "")
(llvm:bind-symbol libkiss_fft "kiss_fftnd_alloc")
(bind-lib libkiss_fft kiss_fftnd_alloc [kiss_fftnd_cfg,i32*,i32,i32,i8*,size_t*]*)
(llvm:bind-symbol libkiss_fft "kiss_fftnd")
(bind-lib libkiss_fft kiss_fftnd [void,kiss_fftnd_cfg,kiss_fft_cpx*,kiss_fft_cpx*]*)
(bind-alias kiss_fftndr_cfg i8* "")
(llvm:bind-symbol libkiss_fft "kiss_fftndr_alloc")
(bind-lib libkiss_fft kiss_fftndr_alloc [kiss_fftndr_cfg,i32*,i32,i32,i8*,size_t*]*)
(llvm:bind-symbol libkiss_fft "kiss_fftndr")
(bind-lib libkiss_fft kiss_fftndr [void,kiss_fftndr_cfg,kiss_fft_scalar*,kiss_fft_cpx*]*)
(llvm:bind-symbol libkiss_fft "kiss_fftndri")
(bind-lib libkiss_fft kiss_fftndri [void,kiss_fftndr_cfg,kiss_fft_cpx*,kiss_fft_scalar*]*)
(bind-alias kiss_fftr_cfg i8* "")
(llvm:bind-symbol libkiss_fft "kiss_fftr_alloc")
(bind-lib libkiss_fft kiss_fftr_alloc [kiss_fftr_cfg,i32,i32,i8*,size_t*]*)
(llvm:bind-symbol libkiss_fft "kiss_fftr")
(bind-lib libkiss_fft kiss_fftr [void,kiss_fftr_cfg,kiss_fft_scalar*,kiss_fft_cpx*]*)
(llvm:bind-symbol libkiss_fft "kiss_fftri")
(bind-lib libkiss_fft kiss_fftri [void,kiss_fftr_cfg,kiss_fft_cpx*,kiss_fft_scalar*]*)
(register-lib-type xtmfft FFT_Config <i8*> "")
(register-lib-func xtmfft FFT_Config_adhoc_W0ZGVF9Db25maWcqLGk4Kl0 [FFT_Config*,i8*]* 0 "" '(let ((FFT_Config_adhoc_1 (lambda (arg_0) (let ((obj (zalloc))) (tset! obj 0 arg_0) obj)))) FFT_Config_adhoc_1))
(bind-poly FFT_Config FFT_Config_adhoc_W0ZGVF9Db25maWcqLGk4Kl0 "")
(register-lib-func xtmfft FFT_Config_z_adhoc_W0ZGVF9Db25maWcqLGk4Kl0 [FFT_Config*,i8*]* 0 "" '(let ((FFT_Config_z_adhoc_2 (lambda (arg_0) (let ((obj (zalloc))) (tset! obj 0 arg_0) obj)))) FFT_Config_z_adhoc_2))
(bind-poly FFT_Config_z FFT_Config_z_adhoc_W0ZGVF9Db25maWcqLGk4Kl0 "")
(register-lib-func xtmfft FFT_Config_h_adhoc_W0ZGVF9Db25maWcqLGk4Kl0 [FFT_Config*,i8*]* 0 "" '(let ((FFT_Config_h_adhoc_3 (lambda (arg_0) (let ((obj (halloc))) (tset! obj 0 arg_0) obj)))) FFT_Config_h_adhoc_3))
(bind-poly FFT_Config_h FFT_Config_h_adhoc_W0ZGVF9Db25maWcqLGk4Kl0 "")
(register-lib-func xtmfft toString_adhoc_W1N0cmluZyosRkZUX0NvbmZpZypd [String*,FFT_Config*]* 0 "" '(let ((toString_adhoc_4 (lambda (x:FFT_Config*) (if (null? x) (sprintout "<FFT_Config:null>") (sprintout "<FFT_Config:" (tref x 0) ">"))))) toString_adhoc_4))
(bind-poly toString toString_adhoc_W1N0cmluZyosRkZUX0NvbmZpZypd "")
(register-lib-func xtmfft print_adhoc_W3ZvaWQsRkZUX0NvbmZpZypd [void,FFT_Config*]* 0 "" '(let ((print_adhoc_5 (lambda (x:FFT_Config*) (if (null? x) (printout "<FFT_Config:null>") (printout "<FFT_Config:" (tref x 0) ">")) void))) print_adhoc_5))
(bind-poly print print_adhoc_W3ZvaWQsRkZUX0NvbmZpZypd "")
(register-lib-func xtmfft FFT_Config_val_adhoc_W0ZGVF9Db25maWcsaTgqXQ [FFT_Config,i8*]* 0 "" '(let ((FFT_Config_val_adhoc_6 (lambda (arg_0) (let ((obj:FFT_Config* (salloc))) (tfill! obj arg_0) (pref obj 0))))) FFT_Config_val_adhoc_6))
(bind-poly FFT_Config_val FFT_Config_val_adhoc_W0ZGVF9Db25maWcsaTgqXQ "")
(register-lib-func xtmfft hcopy_adhoc_W0ZGVF9Db25maWcqLEZGVF9Db25maWcqXQ [FFT_Config*,FFT_Config*]* 0 "" '(let ((hcopy_adhoc_7 (lambda (x:FFT_Config*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) obj)))) hcopy_adhoc_7))
(bind-poly hcopy hcopy_adhoc_W0ZGVF9Db25maWcqLEZGVF9Db25maWcqXQ "")
(register-lib-func xtmfft hfree_adhoc_W3ZvaWQsRkZUX0NvbmZpZypd [void,FFT_Config*]* 0 "" '(let ((hfree_adhoc_8 (lambda (x:FFT_Config*) () (free x) void))) hfree_adhoc_8))
(bind-poly hfree hfree_adhoc_W3ZvaWQsRkZUX0NvbmZpZypd "")
(register-lib-func xtmfft zcopy_adhoc_W0ZGVF9Db25maWcqLEZGVF9Db25maWcqLG16b25lKixtem9uZSpd [FFT_Config*,FFT_Config*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_9 (lambda (x:FFT_Config* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (if (llvm_ptr_in_zone fromz (cast (tref x 0) i8*)) (let ((newptr:i8* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 0) i8*) 1) (tset! obj 0 newptr)) (tset! obj 0 (tref x 0))) (pop_zone) obj)) x)))) zcopy_adhoc_9))
(bind-poly zcopy zcopy_adhoc_W0ZGVF9Db25maWcqLEZGVF9Db25maWcqLG16b25lKixtem9uZSpd "")
(register-lib-func xtmfft fft_config_adhoc_W0ZGVF9Db25maWcqLGk2NF0 [FFT_Config*,i64]* 0 "" '(let ((fft_config_adhoc_10 (lambda (len) (let ((sz:i64 0) (findSize (kiss_fft_alloc (i64toi32 len) 0 null (ref sz))) (config:i8* (alloc sz)) (res:kiss_fft_cfg (kiss_fft_alloc (i64toi32 len) 0 config (ref sz)))) (if (null? res) (println "error constructing fft config!")) (FFT_Config res))))) fft_config_adhoc_10))
(bind-poly fft_config fft_config_adhoc_W0ZGVF9Db25maWcqLGk2NF0 "")
(register-lib-type xtmfft FFTR_Config <i8*> "")
(register-lib-func xtmfft FFTR_Config_adhoc_W0ZGVFJfQ29uZmlnKixpOCpd [FFTR_Config*,i8*]* 0 "" '(let ((FFTR_Config_adhoc_11 (lambda (arg_0) (let ((obj (zalloc))) (tset! obj 0 arg_0) obj)))) FFTR_Config_adhoc_11))
(bind-poly FFTR_Config FFTR_Config_adhoc_W0ZGVFJfQ29uZmlnKixpOCpd "")
(register-lib-func xtmfft FFTR_Config_z_adhoc_W0ZGVFJfQ29uZmlnKixpOCpd [FFTR_Config*,i8*]* 0 "" '(let ((FFTR_Config_z_adhoc_12 (lambda (arg_0) (let ((obj (zalloc))) (tset! obj 0 arg_0) obj)))) FFTR_Config_z_adhoc_12))
(bind-poly FFTR_Config_z FFTR_Config_z_adhoc_W0ZGVFJfQ29uZmlnKixpOCpd "")
(register-lib-func xtmfft FFTR_Config_h_adhoc_W0ZGVFJfQ29uZmlnKixpOCpd [FFTR_Config*,i8*]* 0 "" '(let ((FFTR_Config_h_adhoc_13 (lambda (arg_0) (let ((obj (halloc))) (tset! obj 0 arg_0) obj)))) FFTR_Config_h_adhoc_13))
(bind-poly FFTR_Config_h FFTR_Config_h_adhoc_W0ZGVFJfQ29uZmlnKixpOCpd "")
(register-lib-func xtmfft toString_adhoc_W1N0cmluZyosRkZUUl9Db25maWcqXQ [String*,FFTR_Config*]* 0 "" '(let ((toString_adhoc_14 (lambda (x:FFTR_Config*) (if (null? x) (sprintout "<FFTR_Config:null>") (sprintout "<FFTR_Config:" (tref x 0) ">"))))) toString_adhoc_14))
(bind-poly toString toString_adhoc_W1N0cmluZyosRkZUUl9Db25maWcqXQ "")
(register-lib-func xtmfft print_adhoc_W3ZvaWQsRkZUUl9Db25maWcqXQ [void,FFTR_Config*]* 0 "" '(let ((print_adhoc_15 (lambda (x:FFTR_Config*) (if (null? x) (printout "<FFTR_Config:null>") (printout "<FFTR_Config:" (tref x 0) ">")) void))) print_adhoc_15))
(bind-poly print print_adhoc_W3ZvaWQsRkZUUl9Db25maWcqXQ "")
(register-lib-func xtmfft FFTR_Config_val_adhoc_W0ZGVFJfQ29uZmlnLGk4Kl0 [FFTR_Config,i8*]* 0 "" '(let ((FFTR_Config_val_adhoc_16 (lambda (arg_0) (let ((obj:FFTR_Config* (salloc))) (tfill! obj arg_0) (pref obj 0))))) FFTR_Config_val_adhoc_16))
(bind-poly FFTR_Config_val FFTR_Config_val_adhoc_W0ZGVFJfQ29uZmlnLGk4Kl0 "")
(register-lib-func xtmfft hcopy_adhoc_W0ZGVFJfQ29uZmlnKixGRlRSX0NvbmZpZypd [FFTR_Config*,FFTR_Config*]* 0 "" '(let ((hcopy_adhoc_17 (lambda (x:FFTR_Config*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) obj)))) hcopy_adhoc_17))
(bind-poly hcopy hcopy_adhoc_W0ZGVFJfQ29uZmlnKixGRlRSX0NvbmZpZypd "")
(register-lib-func xtmfft hfree_adhoc_W3ZvaWQsRkZUUl9Db25maWcqXQ [void,FFTR_Config*]* 0 "" '(let ((hfree_adhoc_18 (lambda (x:FFTR_Config*) () (free x) void))) hfree_adhoc_18))
(bind-poly hfree hfree_adhoc_W3ZvaWQsRkZUUl9Db25maWcqXQ "")
(register-lib-func xtmfft zcopy_adhoc_W0ZGVFJfQ29uZmlnKixGRlRSX0NvbmZpZyosbXpvbmUqLG16b25lKl0 [FFTR_Config*,FFTR_Config*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_19 (lambda (x:FFTR_Config* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (if (llvm_ptr_in_zone fromz (cast (tref x 0) i8*)) (let ((newptr:i8* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 0) i8*) 1) (tset! obj 0 newptr)) (tset! obj 0 (tref x 0))) (pop_zone) obj)) x)))) zcopy_adhoc_19))
(bind-poly zcopy zcopy_adhoc_W0ZGVFJfQ29uZmlnKixGRlRSX0NvbmZpZyosbXpvbmUqLG16b25lKl0 "")
(register-lib-func xtmfft fftr_config_adhoc_W0ZGVFJfQ29uZmlnKixpNjRd [FFTR_Config*,i64]* 0 "" '(let ((fftr_config_adhoc_20 (lambda (len) (let ((sz:i64 0) (findSize (kiss_fftr_alloc (i64toi32 len) 0 null (ref sz))) (config:i8* (alloc sz)) (res:kiss_fft_cfg (kiss_fftr_alloc (i64toi32 len) 0 config (ref sz)))) (if (null? res) (println "error constructing fftr config!")) (FFTR_Config res))))) fftr_config_adhoc_20))
(bind-poly fftr_config fftr_config_adhoc_W0ZGVFJfQ29uZmlnKixpNjRd "")
(register-lib-func xtmfft fft_adhoc_W3ZvaWQsQ29tcGxleGYqLENvbXBsZXhmKixGRlRfQ29uZmlnKl0 [void,Complexf*,Complexf*,FFT_Config*]* 0 "calculate the FFT of an input signal" '(let ((fft_adhoc_21 (lambda (in:kiss_fft_cpx* out:kiss_fft_cpx* config:FFT_Config*) (kiss_fft (tref config 0) in out) void))) fft_adhoc_21))
(bind-poly fft fft_adhoc_W3ZvaWQsQ29tcGxleGYqLENvbXBsZXhmKixGRlRfQ29uZmlnKl0 "")
(register-lib-func xtmfft fft_adhoc_W3ZvaWQsZmxvYXQqLENvbXBsZXhmKixGRlRSX0NvbmZpZypd [void,float*,Complexf*,FFTR_Config*]* 0 "calculate the FFT of a real-valued input signal" '(let ((fft_adhoc_22 (lambda (in:kiss_fft_scalar* out:kiss_fft_cpx* config:FFTR_Config*) (kiss_fftr (tref config 0) in out) void))) fft_adhoc_22))
(bind-poly fft fft_adhoc_W3ZvaWQsZmxvYXQqLENvbXBsZXhmKixGRlRSX0NvbmZpZypd "")
(register-lib-type xtmfft IFFT_Config <i8*> "")
(register-lib-func xtmfft IFFT_Config_adhoc_W0lGRlRfQ29uZmlnKixpOCpd [IFFT_Config*,i8*]* 0 "" '(let ((IFFT_Config_adhoc_23 (lambda (arg_0) (let ((obj (zalloc))) (tset! obj 0 arg_0) obj)))) IFFT_Config_adhoc_23))
(bind-poly IFFT_Config IFFT_Config_adhoc_W0lGRlRfQ29uZmlnKixpOCpd "")
(register-lib-func xtmfft IFFT_Config_z_adhoc_W0lGRlRfQ29uZmlnKixpOCpd [IFFT_Config*,i8*]* 0 "" '(let ((IFFT_Config_z_adhoc_24 (lambda (arg_0) (let ((obj (zalloc))) (tset! obj 0 arg_0) obj)))) IFFT_Config_z_adhoc_24))
(bind-poly IFFT_Config_z IFFT_Config_z_adhoc_W0lGRlRfQ29uZmlnKixpOCpd "")
(register-lib-func xtmfft IFFT_Config_h_adhoc_W0lGRlRfQ29uZmlnKixpOCpd [IFFT_Config*,i8*]* 0 "" '(let ((IFFT_Config_h_adhoc_25 (lambda (arg_0) (let ((obj (halloc))) (tset! obj 0 arg_0) obj)))) IFFT_Config_h_adhoc_25))
(bind-poly IFFT_Config_h IFFT_Config_h_adhoc_W0lGRlRfQ29uZmlnKixpOCpd "")
(register-lib-func xtmfft toString_adhoc_W1N0cmluZyosSUZGVF9Db25maWcqXQ [String*,IFFT_Config*]* 0 "" '(let ((toString_adhoc_26 (lambda (x:IFFT_Config*) (if (null? x) (sprintout "<IFFT_Config:null>") (sprintout "<IFFT_Config:" (tref x 0) ">"))))) toString_adhoc_26))
(bind-poly toString toString_adhoc_W1N0cmluZyosSUZGVF9Db25maWcqXQ "")
(register-lib-func xtmfft print_adhoc_W3ZvaWQsSUZGVF9Db25maWcqXQ [void,IFFT_Config*]* 0 "" '(let ((print_adhoc_27 (lambda (x:IFFT_Config*) (if (null? x) (printout "<IFFT_Config:null>") (printout "<IFFT_Config:" (tref x 0) ">")) void))) print_adhoc_27))
(bind-poly print print_adhoc_W3ZvaWQsSUZGVF9Db25maWcqXQ "")
(register-lib-func xtmfft IFFT_Config_val_adhoc_W0lGRlRfQ29uZmlnLGk4Kl0 [IFFT_Config,i8*]* 0 "" '(let ((IFFT_Config_val_adhoc_28 (lambda (arg_0) (let ((obj:IFFT_Config* (salloc))) (tfill! obj arg_0) (pref obj 0))))) IFFT_Config_val_adhoc_28))
(bind-poly IFFT_Config_val IFFT_Config_val_adhoc_W0lGRlRfQ29uZmlnLGk4Kl0 "")
(register-lib-func xtmfft hcopy_adhoc_W0lGRlRfQ29uZmlnKixJRkZUX0NvbmZpZypd [IFFT_Config*,IFFT_Config*]* 0 "" '(let ((hcopy_adhoc_29 (lambda (x:IFFT_Config*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) obj)))) hcopy_adhoc_29))
(bind-poly hcopy hcopy_adhoc_W0lGRlRfQ29uZmlnKixJRkZUX0NvbmZpZypd "")
(register-lib-func xtmfft hfree_adhoc_W3ZvaWQsSUZGVF9Db25maWcqXQ [void,IFFT_Config*]* 0 "" '(let ((hfree_adhoc_30 (lambda (x:IFFT_Config*) () (free x) void))) hfree_adhoc_30))
(bind-poly hfree hfree_adhoc_W3ZvaWQsSUZGVF9Db25maWcqXQ "")
(register-lib-func xtmfft zcopy_adhoc_W0lGRlRfQ29uZmlnKixJRkZUX0NvbmZpZyosbXpvbmUqLG16b25lKl0 [IFFT_Config*,IFFT_Config*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_31 (lambda (x:IFFT_Config* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (if (llvm_ptr_in_zone fromz (cast (tref x 0) i8*)) (let ((newptr:i8* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 0) i8*) 1) (tset! obj 0 newptr)) (tset! obj 0 (tref x 0))) (pop_zone) obj)) x)))) zcopy_adhoc_31))
(bind-poly zcopy zcopy_adhoc_W0lGRlRfQ29uZmlnKixJRkZUX0NvbmZpZyosbXpvbmUqLG16b25lKl0 "")
(register-lib-func xtmfft ifft_config_adhoc_W0lGRlRfQ29uZmlnKixpNjRd [IFFT_Config*,i64]* 0 "" '(let ((ifft_config_adhoc_32 (lambda (len) (let ((sz:i64 0) (findSize (kiss_fft_alloc (i64toi32 len) 1 null (ref sz))) (config:i8* (alloc sz)) (res (kiss_fft_alloc (i64toi32 len) 1 config (ref sz)))) (if (null? res) (println "error constructing ifft config!")) (IFFT_Config res))))) ifft_config_adhoc_32))
(bind-poly ifft_config ifft_config_adhoc_W0lGRlRfQ29uZmlnKixpNjRd "")
(register-lib-type xtmfft IFFTR_Config <i8*> "")
(register-lib-func xtmfft IFFTR_Config_adhoc_W0lGRlRSX0NvbmZpZyosaTgqXQ [IFFTR_Config*,i8*]* 0 "" '(let ((IFFTR_Config_adhoc_33 (lambda (arg_0) (let ((obj (zalloc))) (tset! obj 0 arg_0) obj)))) IFFTR_Config_adhoc_33))
(bind-poly IFFTR_Config IFFTR_Config_adhoc_W0lGRlRSX0NvbmZpZyosaTgqXQ "")
(register-lib-func xtmfft IFFTR_Config_z_adhoc_W0lGRlRSX0NvbmZpZyosaTgqXQ [IFFTR_Config*,i8*]* 0 "" '(let ((IFFTR_Config_z_adhoc_34 (lambda (arg_0) (let ((obj (zalloc))) (tset! obj 0 arg_0) obj)))) IFFTR_Config_z_adhoc_34))
(bind-poly IFFTR_Config_z IFFTR_Config_z_adhoc_W0lGRlRSX0NvbmZpZyosaTgqXQ "")
(register-lib-func xtmfft IFFTR_Config_h_adhoc_W0lGRlRSX0NvbmZpZyosaTgqXQ [IFFTR_Config*,i8*]* 0 "" '(let ((IFFTR_Config_h_adhoc_35 (lambda (arg_0) (let ((obj (halloc))) (tset! obj 0 arg_0) obj)))) IFFTR_Config_h_adhoc_35))
(bind-poly IFFTR_Config_h IFFTR_Config_h_adhoc_W0lGRlRSX0NvbmZpZyosaTgqXQ "")
(register-lib-func xtmfft toString_adhoc_W1N0cmluZyosSUZGVFJfQ29uZmlnKl0 [String*,IFFTR_Config*]* 0 "" '(let ((toString_adhoc_36 (lambda (x:IFFTR_Config*) (if (null? x) (sprintout "<IFFTR_Config:null>") (sprintout "<IFFTR_Config:" (tref x 0) ">"))))) toString_adhoc_36))
(bind-poly toString toString_adhoc_W1N0cmluZyosSUZGVFJfQ29uZmlnKl0 "")
(register-lib-func xtmfft print_adhoc_W3ZvaWQsSUZGVFJfQ29uZmlnKl0 [void,IFFTR_Config*]* 0 "" '(let ((print_adhoc_37 (lambda (x:IFFTR_Config*) (if (null? x) (printout "<IFFTR_Config:null>") (printout "<IFFTR_Config:" (tref x 0) ">")) void))) print_adhoc_37))
(bind-poly print print_adhoc_W3ZvaWQsSUZGVFJfQ29uZmlnKl0 "")
(register-lib-func xtmfft IFFTR_Config_val_adhoc_W0lGRlRSX0NvbmZpZyxpOCpd [IFFTR_Config,i8*]* 0 "" '(let ((IFFTR_Config_val_adhoc_38 (lambda (arg_0) (let ((obj:IFFTR_Config* (salloc))) (tfill! obj arg_0) (pref obj 0))))) IFFTR_Config_val_adhoc_38))
(bind-poly IFFTR_Config_val IFFTR_Config_val_adhoc_W0lGRlRSX0NvbmZpZyxpOCpd "")
(register-lib-func xtmfft hcopy_adhoc_W0lGRlRSX0NvbmZpZyosSUZGVFJfQ29uZmlnKl0 [IFFTR_Config*,IFFTR_Config*]* 0 "" '(let ((hcopy_adhoc_39 (lambda (x:IFFTR_Config*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) obj)))) hcopy_adhoc_39))
(bind-poly hcopy hcopy_adhoc_W0lGRlRSX0NvbmZpZyosSUZGVFJfQ29uZmlnKl0 "")
(register-lib-func xtmfft hfree_adhoc_W3ZvaWQsSUZGVFJfQ29uZmlnKl0 [void,IFFTR_Config*]* 0 "" '(let ((hfree_adhoc_40 (lambda (x:IFFTR_Config*) () (free x) void))) hfree_adhoc_40))
(bind-poly hfree hfree_adhoc_W3ZvaWQsSUZGVFJfQ29uZmlnKl0 "")
(register-lib-func xtmfft zcopy_adhoc_W0lGRlRSX0NvbmZpZyosSUZGVFJfQ29uZmlnKixtem9uZSosbXpvbmUqXQ [IFFTR_Config*,IFFTR_Config*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_41 (lambda (x:IFFTR_Config* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (if (llvm_ptr_in_zone fromz (cast (tref x 0) i8*)) (let ((newptr:i8* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 0) i8*) 1) (tset! obj 0 newptr)) (tset! obj 0 (tref x 0))) (pop_zone) obj)) x)))) zcopy_adhoc_41))
(bind-poly zcopy zcopy_adhoc_W0lGRlRSX0NvbmZpZyosSUZGVFJfQ29uZmlnKixtem9uZSosbXpvbmUqXQ "")
(register-lib-func xtmfft ifftr_config_adhoc_W0lGRlRSX0NvbmZpZyosaTY0XQ [IFFTR_Config*,i64]* 0 "" '(let ((ifftr_config_adhoc_42 (lambda (len) (let ((sz:i64 0) (findSize (kiss_fftr_alloc (i64toi32 len) 1 null (ref sz))) (config:i8* (alloc sz)) (res (kiss_fftr_alloc (i64toi32 len) 1 config (ref sz)))) (if (null? res) (println "error constructing ifftr config!")) (IFFTR_Config res))))) ifftr_config_adhoc_42))
(bind-poly ifftr_config ifftr_config_adhoc_W0lGRlRSX0NvbmZpZyosaTY0XQ "")
(register-lib-func xtmfft ifft_adhoc_W3ZvaWQsQ29tcGxleGYqLENvbXBsZXhmKixJRkZUX0NvbmZpZypd [void,Complexf*,Complexf*,IFFT_Config*]* 0 "calculate the inverse FFT of a signal" '(let ((ifft_adhoc_43 (lambda (in:kiss_fft_cpx* out:kiss_fft_cpx* config:IFFT_Config*) (kiss_fft (tref config 0) in out) void))) ifft_adhoc_43))
(bind-poly ifft ifft_adhoc_W3ZvaWQsQ29tcGxleGYqLENvbXBsZXhmKixJRkZUX0NvbmZpZypd "")
(register-lib-func xtmfft ifft_adhoc_W3ZvaWQsQ29tcGxleGYqLGZsb2F0KixJRkZUUl9Db25maWcqXQ [void,Complexf*,float*,IFFTR_Config*]* 0 "calculate the FFT of a real-valued input signal" '(let ((ifft_adhoc_44 (lambda (in:kiss_fft_cpx* out:kiss_fft_scalar* config:IFFTR_Config*) (kiss_fftri (tref config 0) in out) void))) ifft_adhoc_44))
(bind-poly ifft ifft_adhoc_W3ZvaWQsQ29tcGxleGYqLGZsb2F0KixJRkZUUl9Db25maWcqXQ "")
(print-with-colors 'green 'default #t (print "done"))(print " in" (- (clock:clock) *xtmlib-fft-loaded-timer*) "seconds\n")
(define *xtmlib-fft-loaded-timer* (clock:clock))
(set! *impc:compiler:message:level* *impc:aot:prev-compiler-message-level*)
