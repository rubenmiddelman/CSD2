(sys:load "libs/base/base.xtm" 'quiet)
(sys:load-preload-check 'glfw3)
(define *xtmlib-glfw3-loaded* #t)
(define *xtmlib-glfw3-loaded-timer* (clock:clock))
(set! *impc:aot:prev-compiler-message-level* *impc:compiler:message:level*)
(set! *impc:compiler:message:level* 'low)

(print "Loading ")
(print-with-colors 'blue 'default #t (print 'xtmglfw3))
(print " library... ")
(bind-dylib libglfw (list "glfw3.dll"))(if (not 'libglfw) (begin (print-with-colors '*impc:compiler:pretty-print-error-color* 'default #t (print "Error")) (print ": could not load the " 'libglfw " dynamic library - perhaps you can install it through your package manager?\n") (error "")))
(bind-external-dylib-declarations "libglfw" "xtmglfw3")
(llvm:compile-ir (sys:slurp-file "libs/aot-cache/xtmglfw3.ll"));; flush the JIT-compilation queue, so we only get this file's code in the module
(impc:compiler:flush-jit-compilation-queue)
(bind-alias GLFWmonitor i8 "")
(bind-alias GLFWwindow i8 "")
(bind-alias GLFWcursor i8 "")
(register-lib-val xtmglfw3 GLFW_VERSION_MAJOR i32 "")
(register-lib-val xtmglfw3 GLFW_VERSION_MINOR i32 "")
(register-lib-val xtmglfw3 GLFW_VERSION_REVISION i32 "")
(register-lib-val xtmglfw3 GLFW_TRUE i32 "")
(register-lib-val xtmglfw3 GLFW_FALSE i32 "")
(register-lib-val xtmglfw3 GLFW_RELEASE i32 "")
(register-lib-val xtmglfw3 GLFW_PRESS i32 "")
(register-lib-val xtmglfw3 GLFW_REPEAT i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_UNKNOWN i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_SPACE i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_APOSTROPHE i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_COMMA i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_MINUS i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_PERIOD i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_SLASH i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_0 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_1 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_2 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_3 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_4 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_5 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_6 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_7 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_8 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_9 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_SEMICOLON i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_EQUAL i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_A i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_B i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_C i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_D i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_E i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_G i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_H i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_I i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_J i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_K i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_L i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_M i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_N i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_O i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_P i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_Q i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_R i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_S i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_T i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_U i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_V i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_W i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_X i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_Y i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_Z i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_LEFT_BRACKET i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_BACKSLASH i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_RIGHT_BRACKET i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_GRAVE_ACCENT i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_WORLD_1 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_WORLD_2 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_ESCAPE i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_ENTER i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_TAB i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_BACKSPACE i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_INSERT i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_DELETE i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_RIGHT i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_LEFT i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_DOWN i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_UP i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_PAGE_UP i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_PAGE_DOWN i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_HOME i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_END i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_CAPS_LOCK i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_SCROLL_LOCK i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_NUM_LOCK i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_PRINT_SCREEN i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_PAUSE i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F1 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F2 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F3 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F4 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F5 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F6 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F7 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F8 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F9 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F10 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F11 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F12 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F13 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F14 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F15 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F16 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F17 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F18 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F19 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F20 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F21 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F22 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F23 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F24 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_F25 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_KP_0 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_KP_1 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_KP_2 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_KP_3 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_KP_4 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_KP_5 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_KP_6 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_KP_7 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_KP_8 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_KP_9 i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_KP_DECIMAL i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_KP_DIVIDE i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_KP_MULTIPLY i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_KP_SUBTRACT i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_KP_ADD i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_KP_ENTER i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_KP_EQUAL i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_LEFT_SHIFT i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_LEFT_CONTROL i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_LEFT_ALT i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_LEFT_SUPER i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_RIGHT_SHIFT i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_RIGHT_CONTROL i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_RIGHT_ALT i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_RIGHT_SUPER i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_MENU i32 "")
(register-lib-val xtmglfw3 GLFW_KEY_LAST i32 "")
(call-as-xtlang (set! GLFW_KEY_LAST (convert GLFW_KEY_MENU i32)) void)
(register-lib-val xtmglfw3 GLFW_MOD_SHIFT i32 "")
(register-lib-val xtmglfw3 GLFW_MOD_CONTROL i32 "")
(register-lib-val xtmglfw3 GLFW_MOD_ALT i32 "")
(register-lib-val xtmglfw3 GLFW_MOD_SUPER i32 "")
(register-lib-val xtmglfw3 GLFW_MOUSE_BUTTON_1 i32 "")
(register-lib-val xtmglfw3 GLFW_MOUSE_BUTTON_2 i32 "")
(register-lib-val xtmglfw3 GLFW_MOUSE_BUTTON_3 i32 "")
(register-lib-val xtmglfw3 GLFW_MOUSE_BUTTON_4 i32 "")
(register-lib-val xtmglfw3 GLFW_MOUSE_BUTTON_5 i32 "")
(register-lib-val xtmglfw3 GLFW_MOUSE_BUTTON_6 i32 "")
(register-lib-val xtmglfw3 GLFW_MOUSE_BUTTON_7 i32 "")
(register-lib-val xtmglfw3 GLFW_MOUSE_BUTTON_8 i32 "")
(register-lib-val xtmglfw3 GLFW_MOUSE_BUTTON_LAST i32 "")
(call-as-xtlang (set! GLFW_MOUSE_BUTTON_LAST (convert GLFW_MOUSE_BUTTON_8 i32)) void)
(register-lib-val xtmglfw3 GLFW_MOUSE_BUTTON_LEFT i32 "")
(call-as-xtlang (set! GLFW_MOUSE_BUTTON_LEFT (convert GLFW_MOUSE_BUTTON_1 i32)) void)
(register-lib-val xtmglfw3 GLFW_MOUSE_BUTTON_RIGHT i32 "")
(call-as-xtlang (set! GLFW_MOUSE_BUTTON_RIGHT (convert GLFW_MOUSE_BUTTON_2 i32)) void)
(register-lib-val xtmglfw3 GLFW_MOUSE_BUTTON_MIDDLE i32 "")
(call-as-xtlang (set! GLFW_MOUSE_BUTTON_MIDDLE (convert GLFW_MOUSE_BUTTON_3 i32)) void)
(register-lib-val xtmglfw3 GLFW_JOYSTICK_1 i32 "")
(register-lib-val xtmglfw3 GLFW_JOYSTICK_2 i32 "")
(register-lib-val xtmglfw3 GLFW_JOYSTICK_3 i32 "")
(register-lib-val xtmglfw3 GLFW_JOYSTICK_4 i32 "")
(register-lib-val xtmglfw3 GLFW_JOYSTICK_5 i32 "")
(register-lib-val xtmglfw3 GLFW_JOYSTICK_6 i32 "")
(register-lib-val xtmglfw3 GLFW_JOYSTICK_7 i32 "")
(register-lib-val xtmglfw3 GLFW_JOYSTICK_8 i32 "")
(register-lib-val xtmglfw3 GLFW_JOYSTICK_9 i32 "")
(register-lib-val xtmglfw3 GLFW_JOYSTICK_10 i32 "")
(register-lib-val xtmglfw3 GLFW_JOYSTICK_11 i32 "")
(register-lib-val xtmglfw3 GLFW_JOYSTICK_12 i32 "")
(register-lib-val xtmglfw3 GLFW_JOYSTICK_13 i32 "")
(register-lib-val xtmglfw3 GLFW_JOYSTICK_14 i32 "")
(register-lib-val xtmglfw3 GLFW_JOYSTICK_15 i32 "")
(register-lib-val xtmglfw3 GLFW_JOYSTICK_16 i32 "")
(register-lib-val xtmglfw3 GLFW_JOYSTICK_LAST i32 "")
(call-as-xtlang (set! GLFW_JOYSTICK_LAST (convert GLFW_JOYSTICK_16 i32)) void)
(register-lib-val xtmglfw3 GLFW_NOT_INITIALIZED i32 "")
(register-lib-val xtmglfw3 GLFW_NO_CURRENT_CONTEXT i32 "")
(register-lib-val xtmglfw3 GLFW_INVALID_ENUM i32 "")
(register-lib-val xtmglfw3 GLFW_INVALID_VALUE i32 "")
(register-lib-val xtmglfw3 GLFW_OUT_OF_MEMORY i32 "")
(register-lib-val xtmglfw3 GLFW_API_UNAVAILABLE i32 "")
(register-lib-val xtmglfw3 GLFW_VERSION_UNAVAILABLE i32 "")
(register-lib-val xtmglfw3 GLFW_PLATFORM_ERROR i32 "")
(register-lib-val xtmglfw3 GLFW_FORMAT_UNAVAILABLE i32 "")
(register-lib-val xtmglfw3 GLFW_NO_WINDOW_CONTEXT i32 "")
(register-lib-val xtmglfw3 GLFW_FOCUSED i32 "")
(register-lib-val xtmglfw3 GLFW_ICONIFIED i32 "")
(register-lib-val xtmglfw3 GLFW_RESIZABLE i32 "")
(register-lib-val xtmglfw3 GLFW_VISIBLE i32 "")
(register-lib-val xtmglfw3 GLFW_DECORATED i32 "")
(register-lib-val xtmglfw3 GLFW_AUTO_ICONIFY i32 "")
(register-lib-val xtmglfw3 GLFW_FLOATING i32 "")
(register-lib-val xtmglfw3 GLFW_MAXIMIZED i32 "")
(register-lib-val xtmglfw3 GLFW_RED_BITS i32 "")
(register-lib-val xtmglfw3 GLFW_GREEN_BITS i32 "")
(register-lib-val xtmglfw3 GLFW_BLUE_BITS i32 "")
(register-lib-val xtmglfw3 GLFW_ALPHA_BITS i32 "")
(register-lib-val xtmglfw3 GLFW_DEPTH_BITS i32 "")
(register-lib-val xtmglfw3 GLFW_STENCIL_BITS i32 "")
(register-lib-val xtmglfw3 GLFW_ACCUM_RED_BITS i32 "")
(register-lib-val xtmglfw3 GLFW_ACCUM_GREEN_BITS i32 "")
(register-lib-val xtmglfw3 GLFW_ACCUM_BLUE_BITS i32 "")
(register-lib-val xtmglfw3 GLFW_ACCUM_ALPHA_BITS i32 "")
(register-lib-val xtmglfw3 GLFW_AUX_BUFFERS i32 "")
(register-lib-val xtmglfw3 GLFW_STEREO i32 "")
(register-lib-val xtmglfw3 GLFW_SAMPLES i32 "")
(register-lib-val xtmglfw3 GLFW_SRGB_CAPABLE i32 "")
(register-lib-val xtmglfw3 GLFW_REFRESH_RATE i32 "")
(register-lib-val xtmglfw3 GLFW_DOUBLEBUFFER i32 "")
(register-lib-val xtmglfw3 GLFW_CLIENT_API i32 "")
(register-lib-val xtmglfw3 GLFW_CONTEXT_VERSION_MAJOR i32 "")
(register-lib-val xtmglfw3 GLFW_CONTEXT_VERSION_MINOR i32 "")
(register-lib-val xtmglfw3 GLFW_CONTEXT_REVISION i32 "")
(register-lib-val xtmglfw3 GLFW_CONTEXT_ROBUSTNESS i32 "")
(register-lib-val xtmglfw3 GLFW_OPENGL_FORWARD_COMPAT i32 "")
(register-lib-val xtmglfw3 GLFW_OPENGL_DEBUG_CONTEXT i32 "")
(register-lib-val xtmglfw3 GLFW_OPENGL_PROFILE i32 "")
(register-lib-val xtmglfw3 GLFW_CONTEXT_RELEASE_BEHAVIOR i32 "")
(register-lib-val xtmglfw3 GLFW_CONTEXT_NO_ERROR i32 "")
(register-lib-val xtmglfw3 GLFW_CONTEXT_CREATION_API i32 "")
(register-lib-val xtmglfw3 GLFW_NO_API i32 "")
(register-lib-val xtmglfw3 GLFW_OPENGL_API i32 "")
(register-lib-val xtmglfw3 GLFW_OPENGL_ES_API i32 "")
(register-lib-val xtmglfw3 GLFW_NO_ROBUSTNESS i32 "")
(register-lib-val xtmglfw3 GLFW_NO_RESET_NOTIFICATION i32 "")
(register-lib-val xtmglfw3 GLFW_LOSE_CONTEXT_ON_RESET i32 "")
(register-lib-val xtmglfw3 GLFW_OPENGL_ANY_PROFILE i32 "")
(register-lib-val xtmglfw3 GLFW_OPENGL_CORE_PROFILE i32 "")
(register-lib-val xtmglfw3 GLFW_OPENGL_COMPAT_PROFILE i32 "")
(register-lib-val xtmglfw3 GLFW_CURSOR i32 "")
(register-lib-val xtmglfw3 GLFW_STICKY_KEYS i32 "")
(register-lib-val xtmglfw3 GLFW_STICKY_MOUSE_BUTTONS i32 "")
(register-lib-val xtmglfw3 GLFW_CURSOR_NORMAL i32 "")
(register-lib-val xtmglfw3 GLFW_CURSOR_HIDDEN i32 "")
(register-lib-val xtmglfw3 GLFW_CURSOR_DISABLED i32 "")
(register-lib-val xtmglfw3 GLFW_ANY_RELEASE_BEHAVIOR i32 "")
(register-lib-val xtmglfw3 GLFW_RELEASE_BEHAVIOR_FLUSH i32 "")
(register-lib-val xtmglfw3 GLFW_RELEASE_BEHAVIOR_NONE i32 "")
(register-lib-val xtmglfw3 GLFW_NATIVE_CONTEXT_API i32 "")
(register-lib-val xtmglfw3 GLFW_EGL_CONTEXT_API i32 "")
(register-lib-val xtmglfw3 GLFW_ARROW_CURSOR i32 "")
(register-lib-val xtmglfw3 GLFW_IBEAM_CURSOR i32 "")
(register-lib-val xtmglfw3 GLFW_CROSSHAIR_CURSOR i32 "")
(register-lib-val xtmglfw3 GLFW_HAND_CURSOR i32 "")
(register-lib-val xtmglfw3 GLFW_HRESIZE_CURSOR i32 "")
(register-lib-val xtmglfw3 GLFW_VRESIZE_CURSOR i32 "")
(register-lib-val xtmglfw3 GLFW_CONNECTED i32 "")
(register-lib-val xtmglfw3 GLFW_DISCONNECTED i32 "")
(register-lib-val xtmglfw3 GLFW_DONT_CARE i32 "")
(bind-alias GLFWglproc [void]* "")
(bind-alias GLFWvkproc [void]* "")
(bind-alias GLFWerrorfun [void,i32,i8*]* "")
(bind-alias GLFWwindowposfun [void,i8*,i32,i32]* "")
(bind-alias GLFWwindowsizefun [void,i8*,i32,i32]* "")
(bind-alias GLFWwindowclosefun [void,i8*]* "")
(bind-alias GLFWwindowrefreshfun [void,i8*]* "")
(bind-alias GLFWwindowfocusfun [void,i8*,i32]* "")
(bind-alias GLFWwindowiconifyfun [void,i8*,i32]* "")
(bind-alias GLFWframebuffersizefun [void,i8*,i32,i32]* "")
(bind-alias GLFWmousebuttonfun [void,i8*,i32,i32,i32]* "")
(bind-alias GLFWcursorposfun [void,i8*,double,double]* "")
(bind-alias GLFWcursorenterfun [void,i8*,i32]* "")
(bind-alias GLFWscrollfun [void,i8*,double,double]* "")
(bind-alias GLFWkeyfun [void,i8*,i32,i32,i32,i32]* "")
(bind-alias GLFWcharfun [void,i8*,i32]* "")
(bind-alias GLFWcharmodsfun [void,i8*,i32,i32]* "")
(bind-alias GLFWdropfun [void,i8*,i32,i8**]* "")
(bind-alias GLFWmonitorfun [void,i8*,i32]* "")
(bind-alias GLFWjoystickfun [void,i32,i32]* "")
(register-lib-type xtmglfw3 GLFWvidmode <i32,i32,i32,i32,i32,i32> "@member width - index 0\r\n@member height - index 1\r\n@member redBits - index 2\r\n@member greenBits - index 3\r\n@member blueBits - index 4\r\n@member refreshRate - index 5")
(register-lib-func xtmglfw3 GLFWvidmode_adhoc_W0dMRld2aWRtb2RlKixpMzIsaTMyLGkzMixpMzIsaTMyLGkzMl0 [GLFWvidmode*,i32,i32,i32,i32,i32,i32]* 0 "" '(let ((GLFWvidmode_adhoc_1 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) obj)))) GLFWvidmode_adhoc_1))
(bind-poly GLFWvidmode GLFWvidmode_adhoc_W0dMRld2aWRtb2RlKixpMzIsaTMyLGkzMixpMzIsaTMyLGkzMl0 "")
(register-lib-func xtmglfw3 GLFWvidmode_z_adhoc_W0dMRld2aWRtb2RlKixpMzIsaTMyLGkzMixpMzIsaTMyLGkzMl0 [GLFWvidmode*,i32,i32,i32,i32,i32,i32]* 0 "" '(let ((GLFWvidmode_z_adhoc_2 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) obj)))) GLFWvidmode_z_adhoc_2))
(bind-poly GLFWvidmode_z GLFWvidmode_z_adhoc_W0dMRld2aWRtb2RlKixpMzIsaTMyLGkzMixpMzIsaTMyLGkzMl0 "")
(register-lib-func xtmglfw3 GLFWvidmode_h_adhoc_W0dMRld2aWRtb2RlKixpMzIsaTMyLGkzMixpMzIsaTMyLGkzMl0 [GLFWvidmode*,i32,i32,i32,i32,i32,i32]* 0 "" '(let ((GLFWvidmode_h_adhoc_3 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) obj)))) GLFWvidmode_h_adhoc_3))
(bind-poly GLFWvidmode_h GLFWvidmode_h_adhoc_W0dMRld2aWRtb2RlKixpMzIsaTMyLGkzMixpMzIsaTMyLGkzMl0 "")
(register-lib-func xtmglfw3 toString_adhoc_W1N0cmluZyosR0xGV3ZpZG1vZGUqXQ [String*,GLFWvidmode*]* 0 "" '(let ((toString_adhoc_4 (lambda (x:GLFWvidmode*) (if (null? x) (sprintout "<GLFWvidmode:null>") (sprintout "<GLFWvidmode:" (tref x 0) "," (tref x 1) "," (tref x 2) "," (tref x 3) "," (tref x 4) "," (tref x 5) ">"))))) toString_adhoc_4))
(bind-poly toString toString_adhoc_W1N0cmluZyosR0xGV3ZpZG1vZGUqXQ "")
(register-lib-func xtmglfw3 print_adhoc_W3ZvaWQsR0xGV3ZpZG1vZGUqXQ [void,GLFWvidmode*]* 0 "" '(let ((print_adhoc_5 (lambda (x:GLFWvidmode*) (if (null? x) (printout "<GLFWvidmode:null>") (printout "<GLFWvidmode:" (tref x 0) "," (tref x 1) "," (tref x 2) "," (tref x 3) "," (tref x 4) "," (tref x 5) ">")) void))) print_adhoc_5))
(bind-poly print print_adhoc_W3ZvaWQsR0xGV3ZpZG1vZGUqXQ "")
(register-lib-func xtmglfw3 GLFWvidmode_val_adhoc_W0dMRld2aWRtb2RlLGkzMixpMzIsaTMyLGkzMixpMzIsaTMyXQ [GLFWvidmode,i32,i32,i32,i32,i32,i32]* 0 "" '(let ((GLFWvidmode_val_adhoc_6 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5) (let ((obj:GLFWvidmode* (salloc))) (tfill! obj arg_0 arg_1 arg_2 arg_3 arg_4 arg_5) (pref obj 0))))) GLFWvidmode_val_adhoc_6))
(bind-poly GLFWvidmode_val GLFWvidmode_val_adhoc_W0dMRld2aWRtb2RlLGkzMixpMzIsaTMyLGkzMixpMzIsaTMyXQ "")
(register-lib-func xtmglfw3 hcopy_adhoc_W0dMRld2aWRtb2RlKixHTEZXdmlkbW9kZSpd [GLFWvidmode*,GLFWvidmode*]* 0 "" '(let ((hcopy_adhoc_7 (lambda (x:GLFWvidmode*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) (tset! obj 2 (tref x 2)) (tset! obj 3 (tref x 3)) (tset! obj 4 (tref x 4)) (tset! obj 5 (tref x 5)) obj)))) hcopy_adhoc_7))
(bind-poly hcopy hcopy_adhoc_W0dMRld2aWRtb2RlKixHTEZXdmlkbW9kZSpd "")
(register-lib-func xtmglfw3 hfree_adhoc_W3ZvaWQsR0xGV3ZpZG1vZGUqXQ [void,GLFWvidmode*]* 0 "" '(let ((hfree_adhoc_8 (lambda (x:GLFWvidmode*) () () () () () () (free x) void))) hfree_adhoc_8))
(bind-poly hfree hfree_adhoc_W3ZvaWQsR0xGV3ZpZG1vZGUqXQ "")
(register-lib-func xtmglfw3 zcopy_adhoc_W0dMRld2aWRtb2RlKixHTEZXdmlkbW9kZSosbXpvbmUqLG16b25lKl0 [GLFWvidmode*,GLFWvidmode*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_9 (lambda (x:GLFWvidmode* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (begin (tset! obj 1 (tref x 1))) (begin (tset! obj 2 (tref x 2))) (begin (tset! obj 3 (tref x 3))) (begin (tset! obj 4 (tref x 4))) (begin (tset! obj 5 (tref x 5))) (pop_zone) obj)) x)))) zcopy_adhoc_9))
(bind-poly zcopy zcopy_adhoc_W0dMRld2aWRtb2RlKixHTEZXdmlkbW9kZSosbXpvbmUqLG16b25lKl0 "")
(register-lib-type xtmglfw3 GLFWgammaramp <i16*,i16*,i16*,i32> "@member red - index 0\r\n@member green - index 1\r\n@member blue - index 2\r\n@member size - index 3")
(register-lib-func xtmglfw3 GLFWgammaramp_adhoc_W0dMRldnYW1tYXJhbXAqLGkxNiosaTE2KixpMTYqLGkzMl0 [GLFWgammaramp*,i16*,i16*,i16*,i32]* 0 "" '(let ((GLFWgammaramp_adhoc_10 (lambda (arg_0 arg_1 arg_2 arg_3) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) obj)))) GLFWgammaramp_adhoc_10))
(bind-poly GLFWgammaramp GLFWgammaramp_adhoc_W0dMRldnYW1tYXJhbXAqLGkxNiosaTE2KixpMTYqLGkzMl0 "")
(register-lib-func xtmglfw3 GLFWgammaramp_z_adhoc_W0dMRldnYW1tYXJhbXAqLGkxNiosaTE2KixpMTYqLGkzMl0 [GLFWgammaramp*,i16*,i16*,i16*,i32]* 0 "" '(let ((GLFWgammaramp_z_adhoc_11 (lambda (arg_0 arg_1 arg_2 arg_3) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) obj)))) GLFWgammaramp_z_adhoc_11))
(bind-poly GLFWgammaramp_z GLFWgammaramp_z_adhoc_W0dMRldnYW1tYXJhbXAqLGkxNiosaTE2KixpMTYqLGkzMl0 "")
(register-lib-func xtmglfw3 GLFWgammaramp_h_adhoc_W0dMRldnYW1tYXJhbXAqLGkxNiosaTE2KixpMTYqLGkzMl0 [GLFWgammaramp*,i16*,i16*,i16*,i32]* 0 "" '(let ((GLFWgammaramp_h_adhoc_12 (lambda (arg_0 arg_1 arg_2 arg_3) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) obj)))) GLFWgammaramp_h_adhoc_12))
(bind-poly GLFWgammaramp_h GLFWgammaramp_h_adhoc_W0dMRldnYW1tYXJhbXAqLGkxNiosaTE2KixpMTYqLGkzMl0 "")
(register-lib-func xtmglfw3 toString_poly_W1N0cmluZyosaTE2Kl0q [String*,i16*]* 0 "" '(lambda (x) (String "_")))
(bind-poly toString toString_poly_W1N0cmluZyosaTE2Kl0q "")
(register-lib-func xtmglfw3 toString_adhoc_W1N0cmluZyosR0xGV2dhbW1hcmFtcCpd [String*,GLFWgammaramp*]* 0 "" '(let ((toString_adhoc_13 (lambda (x:GLFWgammaramp*) (if (null? x) (sprintout "<GLFWgammaramp:null>") (sprintout "<GLFWgammaramp:" (tref x 0) "," (tref x 1) "," (tref x 2) "," (tref x 3) ">"))))) toString_adhoc_13))
(bind-poly toString toString_adhoc_W1N0cmluZyosR0xGV2dhbW1hcmFtcCpd "")
(register-lib-func xtmglfw3 print_poly_W3ZvaWQsaTE2Kl0q [void,i16*]* 0 "" '(lambda (x) (printf "_") void))
(bind-poly print print_poly_W3ZvaWQsaTE2Kl0q "")
(register-lib-func xtmglfw3 print_adhoc_W3ZvaWQsR0xGV2dhbW1hcmFtcCpd [void,GLFWgammaramp*]* 0 "" '(let ((print_adhoc_15 (lambda (x:GLFWgammaramp*) (if (null? x) (printout "<GLFWgammaramp:null>") (printout "<GLFWgammaramp:" (tref x 0) "," (tref x 1) "," (tref x 2) "," (tref x 3) ">")) void))) print_adhoc_15))
(bind-poly print print_adhoc_W3ZvaWQsR0xGV2dhbW1hcmFtcCpd "")
(register-lib-func xtmglfw3 GLFWgammaramp_val_adhoc_W0dMRldnYW1tYXJhbXAsaTE2KixpMTYqLGkxNiosaTMyXQ [GLFWgammaramp,i16*,i16*,i16*,i32]* 0 "" '(let ((GLFWgammaramp_val_adhoc_17 (lambda (arg_0 arg_1 arg_2 arg_3) (let ((obj:GLFWgammaramp* (salloc))) (tfill! obj arg_0 arg_1 arg_2 arg_3) (pref obj 0))))) GLFWgammaramp_val_adhoc_17))
(bind-poly GLFWgammaramp_val GLFWgammaramp_val_adhoc_W0dMRldnYW1tYXJhbXAsaTE2KixpMTYqLGkxNiosaTMyXQ "")
(register-lib-func xtmglfw3 hcopy_adhoc_W0dMRldnYW1tYXJhbXAqLEdMRldnYW1tYXJhbXAqXQ [GLFWgammaramp*,GLFWgammaramp*]* 0 "" '(let ((hcopy_adhoc_18 (lambda (x:GLFWgammaramp*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) (tset! obj 2 (tref x 2)) (tset! obj 3 (tref x 3)) obj)))) hcopy_adhoc_18))
(bind-poly hcopy hcopy_adhoc_W0dMRldnYW1tYXJhbXAqLEdMRldnYW1tYXJhbXAqXQ "")
(register-lib-func xtmglfw3 hfree_adhoc_W3ZvaWQsR0xGV2dhbW1hcmFtcCpd [void,GLFWgammaramp*]* 0 "" '(let ((hfree_adhoc_19 (lambda (x:GLFWgammaramp*) () () () () (free x) void))) hfree_adhoc_19))
(bind-poly hfree hfree_adhoc_W3ZvaWQsR0xGV2dhbW1hcmFtcCpd "")
(register-lib-func xtmglfw3 zcopy_adhoc_W0dMRldnYW1tYXJhbXAqLEdMRldnYW1tYXJhbXAqLG16b25lKixtem9uZSpd [GLFWgammaramp*,GLFWgammaramp*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_20 (lambda (x:GLFWgammaramp* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (if (llvm_ptr_in_zone fromz (cast (tref x 0) i8*)) (let ((newptr:i16* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 0) i8*) 2) (tset! obj 0 newptr)) (tset! obj 0 (tref x 0))) (if (llvm_ptr_in_zone fromz (cast (tref x 1) i8*)) (let ((newptr:i16* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 1) i8*) 2) (tset! obj 1 newptr)) (tset! obj 1 (tref x 1))) (if (llvm_ptr_in_zone fromz (cast (tref x 2) i8*)) (let ((newptr:i16* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 2) i8*) 2) (tset! obj 2 newptr)) (tset! obj 2 (tref x 2))) (begin (tset! obj 3 (tref x 3))) (pop_zone) obj)) x)))) zcopy_adhoc_20))
(bind-poly zcopy zcopy_adhoc_W0dMRldnYW1tYXJhbXAqLEdMRldnYW1tYXJhbXAqLG16b25lKixtem9uZSpd "")
(register-lib-type xtmglfw3 GLFWimage <i32,i32,i8*> "@member width - index 0\r\n@member height - index 1\r\n@member pixels - index 2")
(register-lib-func xtmglfw3 GLFWimage_adhoc_W0dMRldpbWFnZSosaTMyLGkzMixpOCpd [GLFWimage*,i32,i32,i8*]* 0 "" '(let ((GLFWimage_adhoc_21 (lambda (arg_0 arg_1 arg_2) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) obj)))) GLFWimage_adhoc_21))
(bind-poly GLFWimage GLFWimage_adhoc_W0dMRldpbWFnZSosaTMyLGkzMixpOCpd "")
(register-lib-func xtmglfw3 GLFWimage_z_adhoc_W0dMRldpbWFnZSosaTMyLGkzMixpOCpd [GLFWimage*,i32,i32,i8*]* 0 "" '(let ((GLFWimage_z_adhoc_22 (lambda (arg_0 arg_1 arg_2) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) obj)))) GLFWimage_z_adhoc_22))
(bind-poly GLFWimage_z GLFWimage_z_adhoc_W0dMRldpbWFnZSosaTMyLGkzMixpOCpd "")
(register-lib-func xtmglfw3 GLFWimage_h_adhoc_W0dMRldpbWFnZSosaTMyLGkzMixpOCpd [GLFWimage*,i32,i32,i8*]* 0 "" '(let ((GLFWimage_h_adhoc_23 (lambda (arg_0 arg_1 arg_2) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) obj)))) GLFWimage_h_adhoc_23))
(bind-poly GLFWimage_h GLFWimage_h_adhoc_W0dMRldpbWFnZSosaTMyLGkzMixpOCpd "")
(register-lib-func xtmglfw3 toString_adhoc_W1N0cmluZyosR0xGV2ltYWdlKl0 [String*,GLFWimage*]* 0 "" '(let ((toString_adhoc_24 (lambda (x:GLFWimage*) (if (null? x) (sprintout "<GLFWimage:null>") (sprintout "<GLFWimage:" (tref x 0) "," (tref x 1) "," (tref x 2) ">"))))) toString_adhoc_24))
(bind-poly toString toString_adhoc_W1N0cmluZyosR0xGV2ltYWdlKl0 "")
(register-lib-func xtmglfw3 print_adhoc_W3ZvaWQsR0xGV2ltYWdlKl0 [void,GLFWimage*]* 0 "" '(let ((print_adhoc_25 (lambda (x:GLFWimage*) (if (null? x) (printout "<GLFWimage:null>") (printout "<GLFWimage:" (tref x 0) "," (tref x 1) "," (tref x 2) ">")) void))) print_adhoc_25))
(bind-poly print print_adhoc_W3ZvaWQsR0xGV2ltYWdlKl0 "")
(register-lib-func xtmglfw3 GLFWimage_val_adhoc_W0dMRldpbWFnZSxpMzIsaTMyLGk4Kl0 [GLFWimage,i32,i32,i8*]* 0 "" '(let ((GLFWimage_val_adhoc_26 (lambda (arg_0 arg_1 arg_2) (let ((obj:GLFWimage* (salloc))) (tfill! obj arg_0 arg_1 arg_2) (pref obj 0))))) GLFWimage_val_adhoc_26))
(bind-poly GLFWimage_val GLFWimage_val_adhoc_W0dMRldpbWFnZSxpMzIsaTMyLGk4Kl0 "")
(register-lib-func xtmglfw3 hcopy_adhoc_W0dMRldpbWFnZSosR0xGV2ltYWdlKl0 [GLFWimage*,GLFWimage*]* 0 "" '(let ((hcopy_adhoc_27 (lambda (x:GLFWimage*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) (tset! obj 2 (tref x 2)) obj)))) hcopy_adhoc_27))
(bind-poly hcopy hcopy_adhoc_W0dMRldpbWFnZSosR0xGV2ltYWdlKl0 "")
(register-lib-func xtmglfw3 hfree_adhoc_W3ZvaWQsR0xGV2ltYWdlKl0 [void,GLFWimage*]* 0 "" '(let ((hfree_adhoc_28 (lambda (x:GLFWimage*) () () () (free x) void))) hfree_adhoc_28))
(bind-poly hfree hfree_adhoc_W3ZvaWQsR0xGV2ltYWdlKl0 "")
(register-lib-func xtmglfw3 zcopy_adhoc_W0dMRldpbWFnZSosR0xGV2ltYWdlKixtem9uZSosbXpvbmUqXQ [GLFWimage*,GLFWimage*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_29 (lambda (x:GLFWimage* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (begin (tset! obj 1 (tref x 1))) (if (llvm_ptr_in_zone fromz (cast (tref x 2) i8*)) (let ((newptr:i8* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 2) i8*) 1) (tset! obj 2 newptr)) (tset! obj 2 (tref x 2))) (pop_zone) obj)) x)))) zcopy_adhoc_29))
(bind-poly zcopy zcopy_adhoc_W0dMRldpbWFnZSosR0xGV2ltYWdlKixtem9uZSosbXpvbmUqXQ "")
(llvm:bind-symbol libglfw "glfwInit")
(bind-lib libglfw glfwInit [i32]*)
(llvm:bind-symbol libglfw "glfwTerminate")
(bind-lib libglfw glfwTerminate [void]*)
(llvm:bind-symbol libglfw "glfwGetVersion")
(bind-lib libglfw glfwGetVersion [void,i32*,i32*,i32*]*)
(llvm:bind-symbol libglfw "glfwGetVersionString")
(bind-lib libglfw glfwGetVersionString [i8*]*)
(llvm:bind-symbol libglfw "glfwSetErrorCallback")
(bind-lib libglfw glfwSetErrorCallback [GLFWerrorfun,GLFWerrorfun]*)
(llvm:bind-symbol libglfw "glfwGetMonitors")
(bind-lib libglfw glfwGetMonitors [GLFWmonitor**,i32*]*)
(llvm:bind-symbol libglfw "glfwGetPrimaryMonitor")
(bind-lib libglfw glfwGetPrimaryMonitor [GLFWmonitor*]*)
(llvm:bind-symbol libglfw "glfwGetMonitorPos")
(bind-lib libglfw glfwGetMonitorPos [void,GLFWmonitor*,i32*,i32*]*)
(llvm:bind-symbol libglfw "glfwGetMonitorPhysicalSize")
(bind-lib libglfw glfwGetMonitorPhysicalSize [void,GLFWmonitor*,i32*,i32*]*)
(llvm:bind-symbol libglfw "glfwGetMonitorName")
(bind-lib libglfw glfwGetMonitorName [i8*,GLFWmonitor*]*)
(llvm:bind-symbol libglfw "glfwSetMonitorCallback")
(bind-lib libglfw glfwSetMonitorCallback [GLFWmonitorfun,GLFWmonitorfun]*)
(llvm:bind-symbol libglfw "glfwGetVideoModes")
(bind-lib libglfw glfwGetVideoModes [GLFWvidmode*,GLFWmonitor*,i32*]*)
(llvm:bind-symbol libglfw "glfwGetVideoMode")
(bind-lib libglfw glfwGetVideoMode [GLFWvidmode*,GLFWmonitor*]*)
(llvm:bind-symbol libglfw "glfwSetGamma")
(bind-lib libglfw glfwSetGamma [void,GLFWmonitor*,float]*)
(llvm:bind-symbol libglfw "glfwGetGammaRamp")
(bind-lib libglfw glfwGetGammaRamp [GLFWgammaramp*,GLFWmonitor*]*)
(llvm:bind-symbol libglfw "glfwSetGammaRamp")
(bind-lib libglfw glfwSetGammaRamp [void,GLFWmonitor*,GLFWgammaramp*]*)
(llvm:bind-symbol libglfw "glfwDefaultWindowHints")
(bind-lib libglfw glfwDefaultWindowHints [void]*)
(llvm:bind-symbol libglfw "glfwWindowHint")
(bind-lib libglfw glfwWindowHint [void,i32,i32]*)
(llvm:bind-symbol libglfw "glfwCreateWindow")
(bind-lib libglfw glfwCreateWindow [GLFWwindow*,i32,i32,i8*,GLFWmonitor*,GLFWwindow*]*)
(llvm:bind-symbol libglfw "glfwDestroyWindow")
(bind-lib libglfw glfwDestroyWindow [void,GLFWwindow*]*)
(llvm:bind-symbol libglfw "glfwWindowShouldClose")
(bind-lib libglfw glfwWindowShouldClose [i32,GLFWwindow*]*)
(llvm:bind-symbol libglfw "glfwSetWindowShouldClose")
(bind-lib libglfw glfwSetWindowShouldClose [void,GLFWwindow*,i32]*)
(llvm:bind-symbol libglfw "glfwSetWindowTitle")
(bind-lib libglfw glfwSetWindowTitle [void,GLFWwindow*,i8*]*)
(llvm:bind-symbol libglfw "glfwSetWindowIcon")
(bind-lib libglfw glfwSetWindowIcon [void,GLFWwindow*,i32,GLFWimage*]*)
(llvm:bind-symbol libglfw "glfwGetWindowPos")
(bind-lib libglfw glfwGetWindowPos [void,GLFWwindow*,i32*,i32*]*)
(llvm:bind-symbol libglfw "glfwSetWindowPos")
(bind-lib libglfw glfwSetWindowPos [void,GLFWwindow*,i32,i32]*)
(llvm:bind-symbol libglfw "glfwGetWindowSize")
(bind-lib libglfw glfwGetWindowSize [void,GLFWwindow*,i32*,i32*]*)
(llvm:bind-symbol libglfw "glfwSetWindowSizeLimits")
(bind-lib libglfw glfwSetWindowSizeLimits [void,GLFWwindow*,i32,i32,i32,i32]*)
(llvm:bind-symbol libglfw "glfwSetWindowAspectRatio")
(bind-lib libglfw glfwSetWindowAspectRatio [void,GLFWwindow*,i32,i32]*)
(llvm:bind-symbol libglfw "glfwSetWindowSize")
(bind-lib libglfw glfwSetWindowSize [void,GLFWwindow*,i32,i32]*)
(llvm:bind-symbol libglfw "glfwGetFramebufferSize")
(bind-lib libglfw glfwGetFramebufferSize [void,GLFWwindow*,i32*,i32*]*)
(llvm:bind-symbol libglfw "glfwGetWindowFrameSize")
(bind-lib libglfw glfwGetWindowFrameSize [void,GLFWwindow*,i32*,i32*,i32*,i32*]*)
(llvm:bind-symbol libglfw "glfwIconifyWindow")
(bind-lib libglfw glfwIconifyWindow [void,GLFWwindow*]*)
(llvm:bind-symbol libglfw "glfwRestoreWindow")
(bind-lib libglfw glfwRestoreWindow [void,GLFWwindow*]*)
(llvm:bind-symbol libglfw "glfwMaximizeWindow")
(bind-lib libglfw glfwMaximizeWindow [void,GLFWwindow*]*)
(llvm:bind-symbol libglfw "glfwShowWindow")
(bind-lib libglfw glfwShowWindow [void,GLFWwindow*]*)
(llvm:bind-symbol libglfw "glfwHideWindow")
(bind-lib libglfw glfwHideWindow [void,GLFWwindow*]*)
(llvm:bind-symbol libglfw "glfwFocusWindow")
(bind-lib libglfw glfwFocusWindow [void,GLFWwindow*]*)
(llvm:bind-symbol libglfw "glfwGetWindowMonitor")
(bind-lib libglfw glfwGetWindowMonitor [GLFWmonitor*,GLFWwindow*]*)
(llvm:bind-symbol libglfw "glfwSetWindowMonitor")
(bind-lib libglfw glfwSetWindowMonitor [void,GLFWwindow*,GLFWmonitor*,i32,i32,i32,i32,i32]*)
(llvm:bind-symbol libglfw "glfwGetWindowAttrib")
(bind-lib libglfw glfwGetWindowAttrib [i32,GLFWwindow*,i32]*)
(llvm:bind-symbol libglfw "glfwSetWindowUserPointer")
(bind-lib libglfw glfwSetWindowUserPointer [void,GLFWwindow*,i8*]*)
(llvm:bind-symbol libglfw "glfwGetWindowUserPointer")
(bind-lib libglfw glfwGetWindowUserPointer [void,GLFWwindow*]*)
(llvm:bind-symbol libglfw "glfwSetWindowPosCallback")
(bind-lib libglfw glfwSetWindowPosCallback [GLFWwindowposfun,GLFWwindow*,GLFWwindowposfun]*)
(llvm:bind-symbol libglfw "glfwSetWindowSizeCallback")
(bind-lib libglfw glfwSetWindowSizeCallback [GLFWwindowsizefun,GLFWwindow*,GLFWwindowsizefun]*)
(llvm:bind-symbol libglfw "glfwSetWindowCloseCallback")
(bind-lib libglfw glfwSetWindowCloseCallback [GLFWwindowclosefun,GLFWwindow*,GLFWwindowclosefun]*)
(llvm:bind-symbol libglfw "glfwSetWindowRefreshCallback")
(bind-lib libglfw glfwSetWindowRefreshCallback [GLFWwindowrefreshfun,GLFWwindow*,GLFWwindowrefreshfun]*)
(llvm:bind-symbol libglfw "glfwSetWindowFocusCallback")
(bind-lib libglfw glfwSetWindowFocusCallback [GLFWwindowfocusfun,GLFWwindow*,GLFWwindowfocusfun]*)
(llvm:bind-symbol libglfw "glfwSetWindowIconifyCallback")
(bind-lib libglfw glfwSetWindowIconifyCallback [GLFWwindowiconifyfun,GLFWwindow*,GLFWwindowiconifyfun]*)
(llvm:bind-symbol libglfw "glfwSetFramebufferSizeCallback")
(bind-lib libglfw glfwSetFramebufferSizeCallback [GLFWframebuffersizefun,GLFWwindow*,GLFWframebuffersizefun]*)
(llvm:bind-symbol libglfw "glfwPollEvents")
(bind-lib libglfw glfwPollEvents [void]*)
(llvm:bind-symbol libglfw "glfwWaitEvents")
(bind-lib libglfw glfwWaitEvents [void]*)
(llvm:bind-symbol libglfw "glfwWaitEventsTimeout")
(bind-lib libglfw glfwWaitEventsTimeout [void,double]*)
(llvm:bind-symbol libglfw "glfwPostEmptyEvent")
(bind-lib libglfw glfwPostEmptyEvent [void]*)
(llvm:bind-symbol libglfw "glfwGetInputMode")
(bind-lib libglfw glfwGetInputMode [i32,GLFWwindow*,i32]*)
(llvm:bind-symbol libglfw "glfwSetInputMode")
(bind-lib libglfw glfwSetInputMode [void,GLFWwindow*,i32,i32]*)
(llvm:bind-symbol libglfw "glfwGetKeyName")
(bind-lib libglfw glfwGetKeyName [i8*,i32,i32]*)
(llvm:bind-symbol libglfw "glfwGetKey")
(bind-lib libglfw glfwGetKey [i32,GLFWwindow*,i32]*)
(llvm:bind-symbol libglfw "glfwGetMouseButton")
(bind-lib libglfw glfwGetMouseButton [i32,GLFWwindow*,i32]*)
(llvm:bind-symbol libglfw "glfwGetCursorPos")
(bind-lib libglfw glfwGetCursorPos [void,GLFWwindow*,double*,double*]*)
(llvm:bind-symbol libglfw "glfwSetCursorPos")
(bind-lib libglfw glfwSetCursorPos [void,GLFWwindow*,double,double]*)
(llvm:bind-symbol libglfw "glfwCreateCursor")
(bind-lib libglfw glfwCreateCursor [GLFWcursor*,GLFWimage*,i32,i32]*)
(llvm:bind-symbol libglfw "glfwCreateStandardCursor")
(bind-lib libglfw glfwCreateStandardCursor [GLFWcursor*,i32]*)
(llvm:bind-symbol libglfw "glfwDestroyCursor")
(bind-lib libglfw glfwDestroyCursor [void,GLFWcursor*]*)
(llvm:bind-symbol libglfw "glfwSetCursor")
(bind-lib libglfw glfwSetCursor [void,GLFWwindow*,GLFWcursor*]*)
(llvm:bind-symbol libglfw "glfwSetKeyCallback")
(bind-lib libglfw glfwSetKeyCallback [GLFWkeyfun,GLFWwindow*,GLFWkeyfun]*)
(llvm:bind-symbol libglfw "glfwSetCharCallback")
(bind-lib libglfw glfwSetCharCallback [GLFWcharfun,GLFWwindow*,GLFWcharfun]*)
(llvm:bind-symbol libglfw "glfwSetCharModsCallback")
(bind-lib libglfw glfwSetCharModsCallback [GLFWcharmodsfun,GLFWwindow*,GLFWcharmodsfun]*)
(llvm:bind-symbol libglfw "glfwSetMouseButtonCallback")
(bind-lib libglfw glfwSetMouseButtonCallback [GLFWmousebuttonfun,GLFWwindow*,GLFWmousebuttonfun]*)
(llvm:bind-symbol libglfw "glfwSetCursorPosCallback")
(bind-lib libglfw glfwSetCursorPosCallback [GLFWcursorposfun,GLFWwindow*,GLFWcursorposfun]*)
(llvm:bind-symbol libglfw "glfwSetCursorEnterCallback")
(bind-lib libglfw glfwSetCursorEnterCallback [GLFWcursorenterfun,GLFWwindow*,GLFWcursorenterfun]*)
(llvm:bind-symbol libglfw "glfwSetScrollCallback")
(bind-lib libglfw glfwSetScrollCallback [GLFWscrollfun,GLFWwindow*,GLFWscrollfun]*)
(llvm:bind-symbol libglfw "glfwSetDropCallback")
(bind-lib libglfw glfwSetDropCallback [GLFWdropfun,GLFWwindow*,GLFWdropfun]*)
(llvm:bind-symbol libglfw "glfwJoystickPresent")
(bind-lib libglfw glfwJoystickPresent [i32,i32]*)
(llvm:bind-symbol libglfw "glfwGetJoystickAxes")
(bind-lib libglfw glfwGetJoystickAxes [float*,i32,i32*]*)
(llvm:bind-symbol libglfw "glfwGetJoystickButtons")
(bind-lib libglfw glfwGetJoystickButtons [i8*,i32,i32*]*)
(llvm:bind-symbol libglfw "glfwGetJoystickName")
(bind-lib libglfw glfwGetJoystickName [i8*,i32]*)
(llvm:bind-symbol libglfw "glfwSetJoystickCallback")
(bind-lib libglfw glfwSetJoystickCallback [GLFWjoystickfun,GLFWjoystickfun]*)
(llvm:bind-symbol libglfw "glfwSetClipboardString")
(bind-lib libglfw glfwSetClipboardString [void,GLFWwindow*,i8*]*)
(llvm:bind-symbol libglfw "glfwGetClipboardString")
(bind-lib libglfw glfwGetClipboardString [i8*,GLFWwindow*]*)
(llvm:bind-symbol libglfw "glfwGetTime")
(bind-lib libglfw glfwGetTime [double]*)
(llvm:bind-symbol libglfw "glfwSetTime")
(bind-lib libglfw glfwSetTime [void,double]*)
(llvm:bind-symbol libglfw "glfwGetTimerValue")
(bind-lib libglfw glfwGetTimerValue [i64]*)
(llvm:bind-symbol libglfw "glfwGetTimerFrequency")
(bind-lib libglfw glfwGetTimerFrequency [i64]*)
(llvm:bind-symbol libglfw "glfwMakeContextCurrent")
(bind-lib libglfw glfwMakeContextCurrent [void,GLFWwindow*]*)
(llvm:bind-symbol libglfw "glfwGetCurrentContext")
(bind-lib libglfw glfwGetCurrentContext [GLFWwindow*]*)
(llvm:bind-symbol libglfw "glfwSwapBuffers")
(bind-lib libglfw glfwSwapBuffers [void,GLFWwindow*]*)
(llvm:bind-symbol libglfw "glfwSwapInterval")
(bind-lib libglfw glfwSwapInterval [void,i32]*)
(llvm:bind-symbol libglfw "glfwExtensionSupported")
(bind-lib libglfw glfwExtensionSupported [i32,i8*]*)
(llvm:bind-symbol libglfw "glfwGetProcAddress")
(bind-lib libglfw glfwGetProcAddress [GLFWglproc,i8*]*)
(llvm:bind-symbol libglfw "glfwVulkanSupported")
(bind-lib libglfw glfwVulkanSupported [i32]*)
(llvm:bind-symbol libglfw "glfwGetRequiredInstanceExtensions")
(bind-lib libglfw glfwGetRequiredInstanceExtensions [i8**,i32*]*)
(register-lib-func xtmglfw3 glfw_error_callback_adhoc_W3ZvaWQsaTMyLGk4Kl0 [void,i32,i8*]* 0 "" '(let ((glfw_error_callback_adhoc_30 (lambda (err description) (printf "GLFW error %d: %s\n" err description) void))) glfw_error_callback_adhoc_30))
(bind-poly glfw_error_callback glfw_error_callback_adhoc_W3ZvaWQsaTMyLGk4Kl0 "")
(register-lib-func xtmglfw3 glfw_init_adhoc_W2kzMl0 [i32]* 0 "" '(let ((glfw_init_adhoc_31 (lambda () (let ((res (glfwInit))) (if (= res 1) (begin (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback))) res) res))))) glfw_init_adhoc_31))
(bind-poly glfw_init glfw_init_adhoc_W2kzMl0 "")
(register-lib-func xtmglfw3 glfw_terminate_adhoc_W3ZvaWRd [void]* 0 "" '(let ((glfw_terminate_adhoc_32 (lambda () (glfwTerminate)))) glfw_terminate_adhoc_32))
(bind-poly glfw_terminate glfw_terminate_adhoc_W3ZvaWRd "")
(register-lib-func xtmglfw3 glfw_print_version_string_adhoc_W2kzMl0 [i32]* 0 "" '(let ((glfw_print_version_string_adhoc_33 (lambda () (printf "%s\n" (glfwGetVersionString))))) glfw_print_version_string_adhoc_33))
(bind-poly glfw_print_version_string glfw_print_version_string_adhoc_W2kzMl0 "")
(register-lib-func xtmglfw3 glfw_create_fullscreen_window_adhoc_W2k4KixpOCpd [i8*,i8*]* 0 "creates a windowed fullscreen window (i.e. doesn't change video mode)" '(let ((glfw_create_fullscreen_window_adhoc_34 (let ((window_title:i8* (zalloc 128))) (lambda (mon) (sprintf window_title "Extempore OpenGL Window") (let ((monitor mon) (vidmode (glfwGetVideoMode monitor)) (width (tref vidmode 0)) (height (tref vidmode 1)) (res:GLFWwindow* null)) (glfwWindowHint GLFW_DECORATED 0) (glfwWindowHint GLFW_AUTO_ICONIFY 1) (set! res (glfwCreateWindow width height window_title monitor null)) (glfwSetWindowPos res 0 0) res))))) glfw_create_fullscreen_window_adhoc_34))
(bind-poly glfw_create_fullscreen_window glfw_create_fullscreen_window_adhoc_W2k4KixpOCpd "")
(register-lib-func xtmglfw3 glfw_create_fullscreen_window_adhoc_W2k4Kl0 [i8*]* 0 "" '(let ((glfw_create_fullscreen_window_adhoc_35 (lambda () (glfw_create_fullscreen_window:[i8*,i8*]* (glfwGetPrimaryMonitor))))) glfw_create_fullscreen_window_adhoc_35))
(bind-poly glfw_create_fullscreen_window glfw_create_fullscreen_window_adhoc_W2k4Kl0 "")
(register-lib-func xtmglfw3 glfw_create_fullscreen_interaction_window_adhoc_W2k4KixpOCpd [i8*,i8*]* 0 "creates a windowed fullscreen window (i.e. doesn't change video mode)" '(let ((glfw_create_fullscreen_interaction_window_adhoc_36 (let ((window_title:i8* (zalloc 128))) (lambda (mon) (sprintf window_title "Extempore OpenGL Window") (let ((monitor mon) (vidmode (glfwGetVideoMode monitor)) (width (tref vidmode 0)) (height (tref vidmode 1)) (res:GLFWwindow* null)) (glfwWindowHint GLFW_DECORATED 0) (glfwWindowHint GLFW_AUTO_ICONIFY 1) (register_for_window_events) (set! res (glfwCreateWindow width height window_title monitor null)) (glfwSetWindowPos res 0 0) res))))) glfw_create_fullscreen_interaction_window_adhoc_36))
(bind-poly glfw_create_fullscreen_interaction_window glfw_create_fullscreen_interaction_window_adhoc_W2k4KixpOCpd "")
(register-lib-func xtmglfw3 glfw_create_fullscreen_interaction_window_adhoc_W2k4Kl0 [i8*]* 0 "" '(let ((glfw_create_fullscreen_interaction_window_adhoc_37 (lambda () (glfw_create_fullscreen_interaction_window:[i8*,i8*]* (glfwGetPrimaryMonitor))))) glfw_create_fullscreen_interaction_window_adhoc_37))
(bind-poly glfw_create_fullscreen_interaction_window glfw_create_fullscreen_interaction_window_adhoc_W2k4Kl0 "")
(register-lib-func xtmglfw3 glfw_create_window_adhoc_W2k4KixpMzIsaTMyXQ [i8*,i32,i32]* 0 "" '(let ((glfw_create_window_adhoc_38 (let ((window_title:i8* (zalloc 128))) (lambda (width height) (sprintf window_title "Extempore OpenGL Window") (glfwCreateWindow width height window_title null null))))) glfw_create_window_adhoc_38))
(bind-poly glfw_create_window glfw_create_window_adhoc_W2k4KixpMzIsaTMyXQ "")
(register-lib-func xtmglfw3 glfw_create_interaction_window_adhoc_W2k4KixpMzIsaTMyXQ [i8*,i32,i32]* 0 "" '(let ((glfw_create_interaction_window_adhoc_39 (let ((window_title:i8* (zalloc 128))) (lambda (width height) (sprintf window_title "Extempore OpenGL Window") (register_for_window_events) (glfwCreateWindow width height window_title null null))))) glfw_create_interaction_window_adhoc_39))
(bind-poly glfw_create_interaction_window glfw_create_interaction_window_adhoc_W2k4KixpMzIsaTMyXQ "")
(register-lib-func xtmglfw3 glfw_window_should_close_adhoc_W2kzMixpOCpd [i32,i8*]* 0 "" '(let ((glfw_window_should_close_adhoc_40 (lambda (window) (glfwWindowShouldClose window)))) glfw_window_should_close_adhoc_40))
(bind-poly glfw_window_should_close glfw_window_should_close_adhoc_W2kzMixpOCpd "")
(register-lib-func xtmglfw3 glfw_make_context_current_adhoc_W3ZvaWQsaTgqXQ [void,i8*]* 0 "" '(let ((glfw_make_context_current_adhoc_41 (lambda (window) (glfwMakeContextCurrent window)))) glfw_make_context_current_adhoc_41))
(bind-poly glfw_make_context_current glfw_make_context_current_adhoc_W3ZvaWQsaTgqXQ "")
(register-lib-func xtmglfw3 glfw_destroy_window_adhoc_W3ZvaWQsaTgqXQ [void,i8*]* 0 "" '(let ((glfw_destroy_window_adhoc_42 (lambda (window:GLFWwindow*) (if (not (null? window)) (glfwDestroyWindow window) (begin (printf "Error: Window pointer is NULL.\n") void)) void))) glfw_destroy_window_adhoc_42))
(bind-poly glfw_destroy_window glfw_destroy_window_adhoc_W3ZvaWQsaTgqXQ "")
(register-lib-func xtmglfw3 glfw_swap_buffers_adhoc_W3ZvaWQsaTgqXQ [void,i8*]* 0 "" '(let ((glfw_swap_buffers_adhoc_43 (lambda (window:GLFWwindow*) (glfwSwapBuffers window)))) glfw_swap_buffers_adhoc_43))
(bind-poly glfw_swap_buffers glfw_swap_buffers_adhoc_W3ZvaWQsaTgqXQ "")
(register-lib-func xtmglfw3 glfw_poll_events_adhoc_W3ZvaWRd [void]* 0 "" '(let ((glfw_poll_events_adhoc_44 (lambda () (glfwPollEvents)))) glfw_poll_events_adhoc_44))
(bind-poly glfw_poll_events glfw_poll_events_adhoc_W3ZvaWRd "")
(register-lib-func xtmglfw3 glfw_print_video_mode_details_adhoc_W2kzMixHTEZXdmlkbW9kZSpd [i32,GLFWvidmode*]* 0 "" '(let ((glfw_print_video_mode_details_adhoc_45 (lambda (vidmode:GLFWvidmode*) (printf "      width: %i\n     height: %i\n    redBits: %i\n  greenBits: %i\n   blueBits: %i\nrefreshRate: %i\n" (tref vidmode 0) (tref vidmode 1) (tref vidmode 2) (tref vidmode 3) (tref vidmode 4) (tref vidmode 5))))) glfw_print_video_mode_details_adhoc_45))
(bind-poly glfw_print_video_mode_details glfw_print_video_mode_details_adhoc_W2kzMixHTEZXdmlkbW9kZSpd "")
(register-lib-func xtmglfw3 glfw_print_primary_monitor_details_adhoc_W2kzMl0 [i32]* 0 "" '(let ((glfw_print_primary_monitor_details_adhoc_46 (lambda () (let ((monitor (glfwGetPrimaryMonitor))) (if (not (null? monitor)) (glfw_print_video_mode_details (glfwGetVideoMode monitor)) (printf "Error: Monitor pointer is NULL.\n")))))) glfw_print_primary_monitor_details_adhoc_46))
(bind-poly glfw_print_primary_monitor_details glfw_print_primary_monitor_details_adhoc_W2kzMl0 "")
(register-lib-func xtmglfw3 glfw_set_core_profile_adhoc_W3ZvaWRd [void]* 0 "" '(let ((glfw_set_core_profile_adhoc_47 (lambda () (glfwWindowHint GLFW_CONTEXT_VERSION_MAJOR 3) (glfwWindowHint GLFW_CONTEXT_VERSION_MINOR 2) (glfwWindowHint GLFW_OPENGL_FORWARD_COMPAT (convert 1)) (glfwWindowHint GLFW_OPENGL_PROFILE GLFW_OPENGL_CORE_PROFILE)))) glfw_set_core_profile_adhoc_47))
(bind-poly glfw_set_core_profile glfw_set_core_profile_adhoc_W3ZvaWRd "")
(register-lib-func xtmglfw3 glfw_set_compatibility_profile_adhoc_W3ZvaWRd [void]* 0 "" '(let ((glfw_set_compatibility_profile_adhoc_48 (lambda () (glfwWindowHint GLFW_CONTEXT_VERSION_MAJOR 3) (glfwWindowHint GLFW_CONTEXT_VERSION_MINOR 1) (glfwWindowHint GLFW_OPENGL_FORWARD_COMPAT (convert 0)) (glfwWindowHint GLFW_OPENGL_PROFILE GLFW_OPENGL_COMPAT_PROFILE)))) glfw_set_compatibility_profile_adhoc_48))
(bind-poly glfw_set_compatibility_profile glfw_set_compatibility_profile_adhoc_W3ZvaWRd "")
(register-lib-func xtmglfw3 glfw_key_callback_adhoc_W3ZvaWQsaTgqLGkzMixpMzIsaTMyLGkzMl0 [void,i8*,i32,i32,i32,i32]* 0 "" '(let ((glfw_key_callback_adhoc_49 (lambda (window key scancode action mods) (printf "window: %p key: %d scancode: %d action: %d mods: %d\n" window key scancode action mods) void))) glfw_key_callback_adhoc_49))
(bind-poly glfw_key_callback glfw_key_callback_adhoc_W3ZvaWQsaTgqLGkzMixpMzIsaTMyLGkzMl0 "")
(register-lib-func xtmglfw3 glfw_char_callback_adhoc_W3ZvaWQsaTgqLGkzMl0 [void,i8*,i32]* 0 "" '(let ((glfw_char_callback_adhoc_50 (lambda (window codepoint) (printf "window: %p codepoint: %c\n" window codepoint) void))) glfw_char_callback_adhoc_50))
(bind-poly glfw_char_callback glfw_char_callback_adhoc_W3ZvaWQsaTgqLGkzMl0 "")
(register-lib-func xtmglfw3 glfw_window_position_callback_adhoc_W3ZvaWQsaTgqLGkzMixpMzJd [void,i8*,i32,i32]* 0 "" '(let ((glfw_window_position_callback_adhoc_51 (lambda (window xpos ypos) (printf "window position x: %d y: %d\n" xpos ypos) void))) glfw_window_position_callback_adhoc_51))
(bind-poly glfw_window_position_callback glfw_window_position_callback_adhoc_W3ZvaWQsaTgqLGkzMixpMzJd "")
(register-lib-func xtmglfw3 glfw_window_focus_callback_adhoc_W3ZvaWQsaTgqLGkzMl0 [void,i8*,i32]* 0 "" '(let ((glfw_window_focus_callback_adhoc_52 (lambda (window focused) (if (= focused (convert 1)) (printf "window %p gained focus\n" window) (printf "window %p lost focus\n" window)) void))) glfw_window_focus_callback_adhoc_52))
(bind-poly glfw_window_focus_callback glfw_window_focus_callback_adhoc_W3ZvaWQsaTgqLGkzMl0 "")
(register-lib-func xtmglfw3 glfw_cursor_position_callback_adhoc_W3ZvaWQsaTgqLGRvdWJsZSxkb3VibGVd [void,i8*,double,double]* 0 "" '(let ((glfw_cursor_position_callback_adhoc_53 (lambda (window xpos ypos) (printf "cursor position x: %f y: %f\n" xpos ypos) void))) glfw_cursor_position_callback_adhoc_53))
(bind-poly glfw_cursor_position_callback glfw_cursor_position_callback_adhoc_W3ZvaWQsaTgqLGRvdWJsZSxkb3VibGVd "")
(register-lib-func xtmglfw3 glfw_mouse_button_callback_adhoc_W3ZvaWQsaTgqLGkzMixpMzIsaTMyXQ [void,i8*,i32,i32,i32]* 0 "" '(let ((glfw_mouse_button_callback_adhoc_54 (lambda (window button action mods) (printf "window: %p button %d action %d mods %d\n" window button action mods) void))) glfw_mouse_button_callback_adhoc_54))
(bind-poly glfw_mouse_button_callback glfw_mouse_button_callback_adhoc_W3ZvaWQsaTgqLGkzMixpMzIsaTMyXQ "")
(register-lib-func xtmglfw3 glfw_init_and_create_window_adhoc_W2k4KixpMzIsaTMyXQ [i8*,i32,i32]* 0 "" '(let ((glfw_init_and_create_window_adhoc_55 (lambda (width height) (glfw_init) (glfw_set_core_profile) (let ((window (glfw_create_window width height))) (glfwShowWindow window) (glfwMakeContextCurrent window) (glfwSwapInterval 1) (glfwSwapBuffers window) window)))) glfw_init_and_create_window_adhoc_55))
(bind-poly glfw_init_and_create_window glfw_init_and_create_window_adhoc_W2k4KixpMzIsaTMyXQ "")
(register-lib-func xtmglfw3 glfw_init_and_create_compatibility_window_adhoc_W2k4KixpMzIsaTMyXQ [i8*,i32,i32]* 0 "" '(let ((glfw_init_and_create_compatibility_window_adhoc_56 (lambda (width height) (glfw_init) (let ((window (glfw_create_window width height))) (glfwShowWindow window) (glfwMakeContextCurrent window) (glfwSwapInterval 1) (glfwSwapBuffers window) window)))) glfw_init_and_create_compatibility_window_adhoc_56))
(bind-poly glfw_init_and_create_compatibility_window glfw_init_and_create_compatibility_window_adhoc_W2k4KixpMzIsaTMyXQ "")
(register-lib-func xtmglfw3 glfw_init_and_create_interaction_window_adhoc_W2k4KixpMzIsaTMyXQ [i8*,i32,i32]* 0 "" '(let ((glfw_init_and_create_interaction_window_adhoc_57 (lambda (width height) (glfw_init) (glfw_set_core_profile) (let ((window (glfw_create_interaction_window width height))) (glfwShowWindow window) (glfwMakeContextCurrent window) (glfwSwapInterval 1) (glfwSwapBuffers window) window)))) glfw_init_and_create_interaction_window_adhoc_57))
(bind-poly glfw_init_and_create_interaction_window glfw_init_and_create_interaction_window_adhoc_W2k4KixpMzIsaTMyXQ "")
(register-lib-func xtmglfw3 glfw_init_and_create_interaction_compatibility_window_adhoc_W2k4KixpMzIsaTMyXQ [i8*,i32,i32]* 0 "" '(let ((glfw_init_and_create_interaction_compatibility_window_adhoc_58 (lambda (width height) (glfw_init) (let ((window (glfw_create_interaction_window width height))) (glfwShowWindow window) (glfwMakeContextCurrent window) (glfwSwapInterval 1) (glfwSwapBuffers window) window)))) glfw_init_and_create_interaction_compatibility_window_adhoc_58))
(bind-poly glfw_init_and_create_interaction_compatibility_window glfw_init_and_create_interaction_compatibility_window_adhoc_W2k4KixpMzIsaTMyXQ "")
(register-lib-func xtmglfw3 glfw_init_and_create_fullscreen_window_adhoc_W2k4KixpMzJd [i8*,i32]* 0 "" '(let ((glfw_init_and_create_fullscreen_window_adhoc_59 (lambda (monitor_idx) (glfw_init) (glfw_set_core_profile) (let ((num:i32* (salloc)) (monitors (glfwGetMonitors num)) (window (glfw_create_fullscreen_window (if (< monitor_idx (pref num 0)) (pref monitors monitor_idx) (pref monitors 0))))) (glfwShowWindow window) (glfwMakeContextCurrent window) (glfwSwapInterval 1) (glfwSwapBuffers window) window)))) glfw_init_and_create_fullscreen_window_adhoc_59))
(bind-poly glfw_init_and_create_fullscreen_window glfw_init_and_create_fullscreen_window_adhoc_W2k4KixpMzJd "")
(register-lib-func xtmglfw3 glfw_init_and_create_fullscreen_window_adhoc_W2k4Kl0 [i8*]* 0 "" '(let ((glfw_init_and_create_fullscreen_window_adhoc_60 (lambda () (glfw_init_and_create_fullscreen_window:[i8*,i32]* 0:i32)))) glfw_init_and_create_fullscreen_window_adhoc_60))
(bind-poly glfw_init_and_create_fullscreen_window glfw_init_and_create_fullscreen_window_adhoc_W2k4Kl0 "")
(register-lib-func xtmglfw3 glfw_init_and_create_fullscreen_interaction_window_adhoc_W2k4KixpMzJd [i8*,i32]* 0 "" '(let ((glfw_init_and_create_fullscreen_interaction_window_adhoc_61 (lambda (monitor_idx) (glfw_init) (glfw_set_core_profile) (let ((num:i32* (salloc)) (monitors (glfwGetMonitors num)) (window (glfw_create_fullscreen_interaction_window (if (< monitor_idx (pref num 0)) (pref monitors monitor_idx) (pref monitors 0))))) (glfwShowWindow window) (glfwMakeContextCurrent window) (glfwSwapInterval 1) (glfwSwapBuffers window) window)))) glfw_init_and_create_fullscreen_interaction_window_adhoc_61))
(bind-poly glfw_init_and_create_fullscreen_interaction_window glfw_init_and_create_fullscreen_interaction_window_adhoc_W2k4KixpMzJd "")
(register-lib-func xtmglfw3 glfw_init_and_create_fullscreen_interaction_compatibility_window_adhoc_W2k4KixpMzJd [i8*,i32]* 0 "" '(let ((glfw_init_and_create_fullscreen_interaction_compatibility_window_adhoc_62 (lambda (monitor_idx) (glfw_init) (let ((num:i32* (salloc)) (monitors (glfwGetMonitors num)) (window (glfw_create_fullscreen_interaction_window (if (< monitor_idx (pref num 0)) (pref monitors monitor_idx) (pref monitors 0))))) (glfwShowWindow window) (glfwMakeContextCurrent window) (glfwSwapInterval 1) (glfwSwapBuffers window) window)))) glfw_init_and_create_fullscreen_interaction_compatibility_window_adhoc_62))
(bind-poly glfw_init_and_create_fullscreen_interaction_compatibility_window glfw_init_and_create_fullscreen_interaction_compatibility_window_adhoc_W2k4KixpMzJd "")
(register-lib-func xtmglfw3 glfw_init_and_create_fullscreen_interaction_window_adhoc_W2k4Kl0 [i8*]* 0 "" '(let ((glfw_init_and_create_fullscreen_interaction_window_adhoc_63 (lambda () (glfw_init_and_create_fullscreen_interaction_window:[i8*,i32]* 0:i32)))) glfw_init_and_create_fullscreen_interaction_window_adhoc_63))
(bind-poly glfw_init_and_create_fullscreen_interaction_window glfw_init_and_create_fullscreen_interaction_window_adhoc_W2k4Kl0 "")
(register-lib-func xtmglfw3 glfw_init_and_create_fullscreen_compatibility_window_adhoc_W2k4Kl0 [i8*]* 0 "" '(let ((glfw_init_and_create_fullscreen_compatibility_window_adhoc_64 (lambda () (glfw_init) (let ((window (glfw_create_fullscreen_window))) (glfwShowWindow window) (glfwMakeContextCurrent window) (glfwSwapInterval 1) (glfwSwapBuffers window) window)))) glfw_init_and_create_fullscreen_compatibility_window_adhoc_64))
(bind-poly glfw_init_and_create_fullscreen_compatibility_window glfw_init_and_create_fullscreen_compatibility_window_adhoc_W2k4Kl0 "")
(register-lib-func xtmglfw3 glfw_get_window_width_adhoc_W2kzMixpOCpd [i32,i8*]* 0 "" '(let ((glfw_get_window_width_adhoc_65 (lambda (window) (let ((width_ptr:i32* (salloc))) (glfwGetWindowSize window width_ptr null) (pref width_ptr 0))))) glfw_get_window_width_adhoc_65))
(bind-poly glfw_get_window_width glfw_get_window_width_adhoc_W2kzMixpOCpd "")
(register-lib-func xtmglfw3 glfw_get_window_height_adhoc_W2kzMixpOCpd [i32,i8*]* 0 "" '(let ((glfw_get_window_height_adhoc_66 (lambda (window) (let ((height_ptr:i32* (salloc))) (glfwGetWindowSize window null height_ptr) (pref height_ptr 0))))) glfw_get_window_height_adhoc_66))
(bind-poly glfw_get_window_height glfw_get_window_height_adhoc_W2kzMixpOCpd "")
(register-lib-func xtmglfw3 glfw_get_framebuffer_width_adhoc_W2kzMixpOCpd [i32,i8*]* 0 "" '(let ((glfw_get_framebuffer_width_adhoc_67 (lambda (window) (let ((width_ptr:i32* (salloc))) (glfwGetFramebufferSize window width_ptr null) (pref width_ptr 0))))) glfw_get_framebuffer_width_adhoc_67))
(bind-poly glfw_get_framebuffer_width glfw_get_framebuffer_width_adhoc_W2kzMixpOCpd "")
(register-lib-func xtmglfw3 glfw_get_framebuffer_height_adhoc_W2kzMixpOCpd [i32,i8*]* 0 "" '(let ((glfw_get_framebuffer_height_adhoc_68 (lambda (window) (let ((height_ptr:i32* (salloc))) (glfwGetFramebufferSize window null height_ptr) (pref height_ptr 0))))) glfw_get_framebuffer_height_adhoc_68))
(bind-poly glfw_get_framebuffer_height glfw_get_framebuffer_height_adhoc_W2kzMixpOCpd "")
(register-lib-func xtmglfw3 glfw_get_pixel_ratio_adhoc_W2Zsb2F0LGk4Kl0 [float,i8*]* 0 "" '(let ((glfw_get_pixel_ratio_adhoc_69 (lambda (window) (let ((ww:i32* (alloc)) (wh:i32* (alloc)) (fbw:i32* (alloc)) (fbh:i32* (alloc))) (glfwGetWindowSize window ww wh) (glfwGetFramebufferSize window fbw fbh) (/ (convert fbw float) (convert ww float)))))) glfw_get_pixel_ratio_adhoc_69))
(bind-poly glfw_get_pixel_ratio glfw_get_pixel_ratio_adhoc_W2Zsb2F0LGk4Kl0 "")
(print-with-colors 'green 'default #t (print "done"))(print " in" (- (clock:clock) *xtmlib-glfw3-loaded-timer*) "seconds\n")
(define *xtmlib-glfw3-loaded-timer* (clock:clock))
(set! *impc:compiler:message:level* *impc:aot:prev-compiler-message-level*)
