(sys:load "libs/base/base.xtm" 'quiet)
(sys:load-preload-check 'sndfile)
(define *xtmlib-sndfile-loaded* #t)
(define *xtmlib-sndfile-loaded-timer* (clock:clock))
(set! *impc:aot:prev-compiler-message-level* *impc:compiler:message:level*)
(set! *impc:compiler:message:level* 'low)

(print "Loading ")
(print-with-colors 'blue 'default #t (print 'xtmsndfile))
(print " library... ")
(bind-dylib libsndfile (list "sndfile.dll"))(if (not 'libsndfile) (begin (print-with-colors '*impc:compiler:pretty-print-error-color* 'default #t (print "Error")) (print ": could not load the " 'libsndfile " dynamic library - perhaps you can install it through your package manager?\n") (error "")))
(bind-external-dylib-declarations "libsndfile" "xtmsndfile")
(llvm:compile-ir (sys:slurp-file "libs/aot-cache/xtmsndfile.ll"));; flush the JIT-compilation queue, so we only get this file's code in the module
(impc:compiler:flush-jit-compilation-queue)
(register-lib-val xtmsndfile SF_FORMAT_WAV i32 "")
(register-lib-val xtmsndfile SF_FORMAT_AIFF i32 "")
(register-lib-val xtmsndfile SF_FORMAT_AU i32 "")
(register-lib-val xtmsndfile SF_FORMAT_RAW i32 "")
(register-lib-val xtmsndfile SF_FORMAT_PAF i32 "")
(register-lib-val xtmsndfile SF_FORMAT_SVX i32 "")
(register-lib-val xtmsndfile SF_FORMAT_NIST i32 "")
(register-lib-val xtmsndfile SF_FORMAT_VOC i32 "")
(register-lib-val xtmsndfile SF_FORMAT_IRCAM i32 "")
(register-lib-val xtmsndfile SF_FORMAT_W64 i32 "")
(register-lib-val xtmsndfile SF_FORMAT_MAT4 i32 "")
(register-lib-val xtmsndfile SF_FORMAT_MAT5 i32 "")
(register-lib-val xtmsndfile SF_FORMAT_PVF i32 "")
(register-lib-val xtmsndfile SF_FORMAT_XI i32 "")
(register-lib-val xtmsndfile SF_FORMAT_HTK i32 "")
(register-lib-val xtmsndfile SF_FORMAT_SDS i32 "")
(register-lib-val xtmsndfile SF_FORMAT_AVR i32 "")
(register-lib-val xtmsndfile SF_FORMAT_WAVEX i32 "")
(register-lib-val xtmsndfile SF_FORMAT_SD2 i32 "")
(register-lib-val xtmsndfile SF_FORMAT_FLAC i32 "")
(register-lib-val xtmsndfile SF_FORMAT_CAF i32 "")
(register-lib-val xtmsndfile SF_FORMAT_WVE i32 "")
(register-lib-val xtmsndfile SF_FORMAT_OGG i32 "")
(register-lib-val xtmsndfile SF_FORMAT_MPC2K i32 "")
(register-lib-val xtmsndfile SF_FORMAT_RF64 i32 "")
(register-lib-val xtmsndfile SF_FORMAT_PCM_S8 i32 "")
(register-lib-val xtmsndfile SF_FORMAT_PCM_16 i32 "")
(register-lib-val xtmsndfile SF_FORMAT_PCM_24 i32 "")
(register-lib-val xtmsndfile SF_FORMAT_PCM_32 i32 "")
(register-lib-val xtmsndfile SF_FORMAT_PCM_U8 i32 "")
(register-lib-val xtmsndfile SF_FORMAT_FLOAT i32 "")
(register-lib-val xtmsndfile SF_FORMAT_DOUBLE i32 "")
(register-lib-val xtmsndfile SF_FORMAT_ULAW i32 "")
(register-lib-val xtmsndfile SF_FORMAT_ALAW i32 "")
(register-lib-val xtmsndfile SF_FORMAT_IMA_ADPCM i32 "")
(register-lib-val xtmsndfile SF_FORMAT_MS_ADPCM i32 "")
(register-lib-val xtmsndfile SF_FORMAT_GSM610 i32 "")
(register-lib-val xtmsndfile SF_FORMAT_VOX_ADPCM i32 "")
(register-lib-val xtmsndfile SF_FORMAT_G721_32 i32 "")
(register-lib-val xtmsndfile SF_FORMAT_G723_24 i32 "")
(register-lib-val xtmsndfile SF_FORMAT_G723_40 i32 "")
(register-lib-val xtmsndfile SF_FORMAT_DWVW_12 i32 "")
(register-lib-val xtmsndfile SF_FORMAT_DWVW_16 i32 "")
(register-lib-val xtmsndfile SF_FORMAT_DWVW_24 i32 "")
(register-lib-val xtmsndfile SF_FORMAT_DWVW_N i32 "")
(register-lib-val xtmsndfile SF_FORMAT_DPCM_8 i32 "")
(register-lib-val xtmsndfile SF_FORMAT_DPCM_16 i32 "")
(register-lib-val xtmsndfile SF_FORMAT_VORBIS i32 "")
(register-lib-val xtmsndfile SF_ENDIAN_FILE i32 "")
(register-lib-val xtmsndfile SF_ENDIAN_LITTLE i32 "")
(register-lib-val xtmsndfile SF_ENDIAN_BIG i32 "")
(register-lib-val xtmsndfile SF_ENDIAN_CPU i32 "")
(register-lib-val xtmsndfile SF_FORMAT_SUBMASK i32 "")
(register-lib-val xtmsndfile SF_FORMAT_TYPEMASK i32 "")
(register-lib-val xtmsndfile SF_FORMAT_ENDMASK i32 "")
(register-lib-val xtmsndfile SFC_GET_LIB_VERSION i32 "")
(register-lib-val xtmsndfile SFC_GET_LOG_INFO i32 "")
(register-lib-val xtmsndfile SFC_GET_CURRENT_SF_INFO i32 "")
(register-lib-val xtmsndfile SFC_GET_NORM_DOUBLE i32 "")
(register-lib-val xtmsndfile SFC_GET_NORM_FLOAT i32 "")
(register-lib-val xtmsndfile SFC_SET_NORM_DOUBLE i32 "")
(register-lib-val xtmsndfile SFC_SET_NORM_FLOAT i32 "")
(register-lib-val xtmsndfile SFC_SET_SCALE_FLOAT_INT_READ i32 "")
(register-lib-val xtmsndfile SFC_SET_SCALE_INT_FLOAT_WRITE i32 "")
(register-lib-val xtmsndfile SFC_GET_SIMPLE_FORMAT_COUNT i32 "")
(register-lib-val xtmsndfile SFC_GET_SIMPLE_FORMAT i32 "")
(register-lib-val xtmsndfile SFC_GET_FORMAT_INFO i32 "")
(register-lib-val xtmsndfile SFC_GET_FORMAT_MAJOR_COUNT i32 "")
(register-lib-val xtmsndfile SFC_GET_FORMAT_MAJOR i32 "")
(register-lib-val xtmsndfile SFC_GET_FORMAT_SUBTYPE_COUNT i32 "")
(register-lib-val xtmsndfile SFC_GET_FORMAT_SUBTYPE i32 "")
(register-lib-val xtmsndfile SFC_CALC_SIGNAL_MAX i32 "")
(register-lib-val xtmsndfile SFC_CALC_NORM_SIGNAL_MAX i32 "")
(register-lib-val xtmsndfile SFC_CALC_MAX_ALL_CHANNELS i32 "")
(register-lib-val xtmsndfile SFC_CALC_NORM_MAX_ALL_CHANNELS i32 "")
(register-lib-val xtmsndfile SFC_GET_SIGNAL_MAX i32 "")
(register-lib-val xtmsndfile SFC_GET_MAX_ALL_CHANNELS i32 "")
(register-lib-val xtmsndfile SFC_SET_ADD_PEAK_CHUNK i32 "")
(register-lib-val xtmsndfile SFC_SET_ADD_HEADER_PAD_CHUNK i32 "")
(register-lib-val xtmsndfile SFC_UPDATE_HEADER_NOW i32 "")
(register-lib-val xtmsndfile SFC_SET_UPDATE_HEADER_AUTO i32 "")
(register-lib-val xtmsndfile SFC_FILE_TRUNCATE i32 "")
(register-lib-val xtmsndfile SFC_SET_RAW_START_OFFSET i32 "")
(register-lib-val xtmsndfile SFC_SET_DITHER_ON_WRITE i32 "")
(register-lib-val xtmsndfile SFC_SET_DITHER_ON_READ i32 "")
(register-lib-val xtmsndfile SFC_GET_DITHER_INFO_COUNT i32 "")
(register-lib-val xtmsndfile SFC_GET_DITHER_INFO i32 "")
(register-lib-val xtmsndfile SFC_GET_EMBED_FILE_INFO i32 "")
(register-lib-val xtmsndfile SFC_SET_CLIPPING i32 "")
(register-lib-val xtmsndfile SFC_GET_CLIPPING i32 "")
(register-lib-val xtmsndfile SFC_GET_INSTRUMENT i32 "")
(register-lib-val xtmsndfile SFC_SET_INSTRUMENT i32 "")
(register-lib-val xtmsndfile SFC_GET_LOOP_INFO i32 "")
(register-lib-val xtmsndfile SFC_GET_BROADCAST_INFO i32 "")
(register-lib-val xtmsndfile SFC_SET_BROADCAST_INFO i32 "")
(register-lib-val xtmsndfile SFC_GET_CHANNEL_MAP_INFO i32 "")
(register-lib-val xtmsndfile SFC_SET_CHANNEL_MAP_INFO i32 "")
(register-lib-val xtmsndfile SFC_RAW_DATA_NEEDS_ENDSWAP i32 "")
(register-lib-val xtmsndfile SFC_WAVEX_SET_AMBISONIC i32 "")
(register-lib-val xtmsndfile SFC_WAVEX_GET_AMBISONIC i32 "")
(register-lib-val xtmsndfile SFC_SET_VBR_ENCODING_QUALITY i32 "")
(register-lib-val xtmsndfile SFC_TEST_IEEE_FLOAT_REPLACE i32 "")
(register-lib-val xtmsndfile SFC_SET_ADD_DITHER_ON_WRITE i32 "")
(register-lib-val xtmsndfile SFC_SET_ADD_DITHER_ON_READ i32 "")
(register-lib-val xtmsndfile SF_STR_TITLE i32 "")
(register-lib-val xtmsndfile SF_STR_COPYRIGHT i32 "")
(register-lib-val xtmsndfile SF_STR_SOFTWARE i32 "")
(register-lib-val xtmsndfile SF_STR_ARTIST i32 "")
(register-lib-val xtmsndfile SF_STR_COMMENT i32 "")
(register-lib-val xtmsndfile SF_STR_DATE i32 "")
(register-lib-val xtmsndfile SF_STR_ALBUM i32 "")
(register-lib-val xtmsndfile SF_STR_LICENSE i32 "")
(register-lib-val xtmsndfile SF_STR_TRACKNUMBER i32 "")
(register-lib-val xtmsndfile SF_STR_GENRE i32 "")
(register-lib-val xtmsndfile SF_STR_FIRST i32 "")
(call-as-xtlang (set! SF_STR_FIRST (convert SF_STR_TITLE i32)) void)
(register-lib-val xtmsndfile SF_STR_LAST i32 "")
(call-as-xtlang (set! SF_STR_LAST (convert SF_STR_GENRE i32)) void)
(register-lib-val xtmsndfile SF_FALSE i32 "")
(register-lib-val xtmsndfile SF_TRUE i32 "")
(register-lib-val xtmsndfile SFM_READ i32 "")
(register-lib-val xtmsndfile SFM_WRITE i32 "")
(register-lib-val xtmsndfile SFM_RDWR i32 "")
(register-lib-val xtmsndfile SF_AMBISONIC_NONE i32 "")
(register-lib-val xtmsndfile SF_AMBISONIC_B_FORMAT i32 "")
(register-lib-val xtmsndfile SF_ERR_NO_ERROR i32 "")
(register-lib-val xtmsndfile SF_ERR_UNRECOGNISED_FORMAT i32 "")
(register-lib-val xtmsndfile SF_ERR_SYSTEM i32 "")
(register-lib-val xtmsndfile SF_ERR_MALFORMED_FILE i32 "")
(register-lib-val xtmsndfile SF_ERR_UNSUPPORTED_ENCODING i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_INVALID i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_MONO i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_LEFT i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_RIGHT i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_CENTER i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_FRONT_LEFT i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_FRONT_RIGHT i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_FRONT_CENTER i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_REAR_CENTER i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_REAR_LEFT i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_REAR_RIGHT i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_LFE i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_FRONT_LEFT_OF_CENTER i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_FRONT_RIGHT_OF_CENTER i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_SIDE_LEFT i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_SIDE_RIGHT i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_TOP_CENTER i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_TOP_FRONT_LEFT i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_TOP_FRONT_RIGHT i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_TOP_FRONT_CENTER i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_TOP_REAR_LEFT i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_TOP_REAR_RIGHT i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_TOP_REAR_CENTER i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_AMBISONIC_B_W i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_AMBISONIC_B_X i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_AMBISONIC_B_Y i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_AMBISONIC_B_Z i32 "")
(register-lib-val xtmsndfile SF_CHANNEL_MAP_MAX i32 "")
(bind-alias SNDFILE i8 "")
(bind-alias sf_count_t i64 "")
(register-lib-val xtmsndfile SF_COUNT_MAX i64 "")
(register-lib-type xtmsndfile SF_INFO <i64,i32,i32,i32,i32,i32> "")
(register-lib-func xtmsndfile SF_INFO_adhoc_W1NGX0lORk8qLGk2NCxpMzIsaTMyLGkzMixpMzIsaTMyXQ [SF_INFO*,i64,i32,i32,i32,i32,i32]* 0 "" '(let ((SF_INFO_adhoc_1 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) obj)))) SF_INFO_adhoc_1))
(bind-poly SF_INFO SF_INFO_adhoc_W1NGX0lORk8qLGk2NCxpMzIsaTMyLGkzMixpMzIsaTMyXQ "")
(register-lib-func xtmsndfile SF_INFO_z_adhoc_W1NGX0lORk8qLGk2NCxpMzIsaTMyLGkzMixpMzIsaTMyXQ [SF_INFO*,i64,i32,i32,i32,i32,i32]* 0 "" '(let ((SF_INFO_z_adhoc_2 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) obj)))) SF_INFO_z_adhoc_2))
(bind-poly SF_INFO_z SF_INFO_z_adhoc_W1NGX0lORk8qLGk2NCxpMzIsaTMyLGkzMixpMzIsaTMyXQ "")
(register-lib-func xtmsndfile SF_INFO_h_adhoc_W1NGX0lORk8qLGk2NCxpMzIsaTMyLGkzMixpMzIsaTMyXQ [SF_INFO*,i64,i32,i32,i32,i32,i32]* 0 "" '(let ((SF_INFO_h_adhoc_3 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) obj)))) SF_INFO_h_adhoc_3))
(bind-poly SF_INFO_h SF_INFO_h_adhoc_W1NGX0lORk8qLGk2NCxpMzIsaTMyLGkzMixpMzIsaTMyXQ "")
(register-lib-func xtmsndfile toString_adhoc_W1N0cmluZyosU0ZfSU5GTypd [String*,SF_INFO*]* 0 "" '(let ((toString_adhoc_4 (lambda (x:SF_INFO*) (if (null? x) (sprintout "<SF_INFO:null>") (sprintout "<SF_INFO:" (tref x 0) "," (tref x 1) "," (tref x 2) "," (tref x 3) "," (tref x 4) "," (tref x 5) ">"))))) toString_adhoc_4))
(bind-poly toString toString_adhoc_W1N0cmluZyosU0ZfSU5GTypd "")
(register-lib-func xtmsndfile print_adhoc_W3ZvaWQsU0ZfSU5GTypd [void,SF_INFO*]* 0 "" '(let ((print_adhoc_5 (lambda (x:SF_INFO*) (if (null? x) (printout "<SF_INFO:null>") (printout "<SF_INFO:" (tref x 0) "," (tref x 1) "," (tref x 2) "," (tref x 3) "," (tref x 4) "," (tref x 5) ">")) void))) print_adhoc_5))
(bind-poly print print_adhoc_W3ZvaWQsU0ZfSU5GTypd "")
(register-lib-func xtmsndfile SF_INFO_val_adhoc_W1NGX0lORk8saTY0LGkzMixpMzIsaTMyLGkzMixpMzJd [SF_INFO,i64,i32,i32,i32,i32,i32]* 0 "" '(let ((SF_INFO_val_adhoc_6 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5) (let ((obj:SF_INFO* (salloc))) (tfill! obj arg_0 arg_1 arg_2 arg_3 arg_4 arg_5) (pref obj 0))))) SF_INFO_val_adhoc_6))
(bind-poly SF_INFO_val SF_INFO_val_adhoc_W1NGX0lORk8saTY0LGkzMixpMzIsaTMyLGkzMixpMzJd "")
(register-lib-func xtmsndfile hcopy_adhoc_W1NGX0lORk8qLFNGX0lORk8qXQ [SF_INFO*,SF_INFO*]* 0 "" '(let ((hcopy_adhoc_7 (lambda (x:SF_INFO*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) (tset! obj 2 (tref x 2)) (tset! obj 3 (tref x 3)) (tset! obj 4 (tref x 4)) (tset! obj 5 (tref x 5)) obj)))) hcopy_adhoc_7))
(bind-poly hcopy hcopy_adhoc_W1NGX0lORk8qLFNGX0lORk8qXQ "")
(register-lib-func xtmsndfile hfree_adhoc_W3ZvaWQsU0ZfSU5GTypd [void,SF_INFO*]* 0 "" '(let ((hfree_adhoc_8 (lambda (x:SF_INFO*) () () () () () () (free x) void))) hfree_adhoc_8))
(bind-poly hfree hfree_adhoc_W3ZvaWQsU0ZfSU5GTypd "")
(register-lib-func xtmsndfile zcopy_adhoc_W1NGX0lORk8qLFNGX0lORk8qLG16b25lKixtem9uZSpd [SF_INFO*,SF_INFO*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_9 (lambda (x:SF_INFO* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (begin (tset! obj 1 (tref x 1))) (begin (tset! obj 2 (tref x 2))) (begin (tset! obj 3 (tref x 3))) (begin (tset! obj 4 (tref x 4))) (begin (tset! obj 5 (tref x 5))) (pop_zone) obj)) x)))) zcopy_adhoc_9))
(bind-poly zcopy zcopy_adhoc_W1NGX0lORk8qLFNGX0lORk8qLG16b25lKixtem9uZSpd "")
(register-lib-type xtmsndfile SF_FORMAT_INFO <i32,i8*,i8*> "")
(register-lib-func xtmsndfile SF_FORMAT_INFO_adhoc_W1NGX0ZPUk1BVF9JTkZPKixpMzIsaTgqLGk4Kl0 [SF_FORMAT_INFO*,i32,i8*,i8*]* 0 "" '(let ((SF_FORMAT_INFO_adhoc_10 (lambda (arg_0 arg_1 arg_2) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) obj)))) SF_FORMAT_INFO_adhoc_10))
(bind-poly SF_FORMAT_INFO SF_FORMAT_INFO_adhoc_W1NGX0ZPUk1BVF9JTkZPKixpMzIsaTgqLGk4Kl0 "")
(register-lib-func xtmsndfile SF_FORMAT_INFO_z_adhoc_W1NGX0ZPUk1BVF9JTkZPKixpMzIsaTgqLGk4Kl0 [SF_FORMAT_INFO*,i32,i8*,i8*]* 0 "" '(let ((SF_FORMAT_INFO_z_adhoc_11 (lambda (arg_0 arg_1 arg_2) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) obj)))) SF_FORMAT_INFO_z_adhoc_11))
(bind-poly SF_FORMAT_INFO_z SF_FORMAT_INFO_z_adhoc_W1NGX0ZPUk1BVF9JTkZPKixpMzIsaTgqLGk4Kl0 "")
(register-lib-func xtmsndfile SF_FORMAT_INFO_h_adhoc_W1NGX0ZPUk1BVF9JTkZPKixpMzIsaTgqLGk4Kl0 [SF_FORMAT_INFO*,i32,i8*,i8*]* 0 "" '(let ((SF_FORMAT_INFO_h_adhoc_12 (lambda (arg_0 arg_1 arg_2) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) obj)))) SF_FORMAT_INFO_h_adhoc_12))
(bind-poly SF_FORMAT_INFO_h SF_FORMAT_INFO_h_adhoc_W1NGX0ZPUk1BVF9JTkZPKixpMzIsaTgqLGk4Kl0 "")
(register-lib-func xtmsndfile toString_adhoc_W1N0cmluZyosU0ZfRk9STUFUX0lORk8qXQ [String*,SF_FORMAT_INFO*]* 0 "" '(let ((toString_adhoc_13 (lambda (x:SF_FORMAT_INFO*) (if (null? x) (sprintout "<SF_FORMAT_INFO:null>") (sprintout "<SF_FORMAT_INFO:" (tref x 0) "," (tref x 1) "," (tref x 2) ">"))))) toString_adhoc_13))
(bind-poly toString toString_adhoc_W1N0cmluZyosU0ZfRk9STUFUX0lORk8qXQ "")
(register-lib-func xtmsndfile print_adhoc_W3ZvaWQsU0ZfRk9STUFUX0lORk8qXQ [void,SF_FORMAT_INFO*]* 0 "" '(let ((print_adhoc_14 (lambda (x:SF_FORMAT_INFO*) (if (null? x) (printout "<SF_FORMAT_INFO:null>") (printout "<SF_FORMAT_INFO:" (tref x 0) "," (tref x 1) "," (tref x 2) ">")) void))) print_adhoc_14))
(bind-poly print print_adhoc_W3ZvaWQsU0ZfRk9STUFUX0lORk8qXQ "")
(register-lib-func xtmsndfile SF_FORMAT_INFO_val_adhoc_W1NGX0ZPUk1BVF9JTkZPLGkzMixpOCosaTgqXQ [SF_FORMAT_INFO,i32,i8*,i8*]* 0 "" '(let ((SF_FORMAT_INFO_val_adhoc_15 (lambda (arg_0 arg_1 arg_2) (let ((obj:SF_FORMAT_INFO* (salloc))) (tfill! obj arg_0 arg_1 arg_2) (pref obj 0))))) SF_FORMAT_INFO_val_adhoc_15))
(bind-poly SF_FORMAT_INFO_val SF_FORMAT_INFO_val_adhoc_W1NGX0ZPUk1BVF9JTkZPLGkzMixpOCosaTgqXQ "")
(register-lib-func xtmsndfile hcopy_adhoc_W1NGX0ZPUk1BVF9JTkZPKixTRl9GT1JNQVRfSU5GTypd [SF_FORMAT_INFO*,SF_FORMAT_INFO*]* 0 "" '(let ((hcopy_adhoc_16 (lambda (x:SF_FORMAT_INFO*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) (tset! obj 2 (tref x 2)) obj)))) hcopy_adhoc_16))
(bind-poly hcopy hcopy_adhoc_W1NGX0ZPUk1BVF9JTkZPKixTRl9GT1JNQVRfSU5GTypd "")
(register-lib-func xtmsndfile hfree_adhoc_W3ZvaWQsU0ZfRk9STUFUX0lORk8qXQ [void,SF_FORMAT_INFO*]* 0 "" '(let ((hfree_adhoc_17 (lambda (x:SF_FORMAT_INFO*) () () () (free x) void))) hfree_adhoc_17))
(bind-poly hfree hfree_adhoc_W3ZvaWQsU0ZfRk9STUFUX0lORk8qXQ "")
(register-lib-func xtmsndfile zcopy_adhoc_W1NGX0ZPUk1BVF9JTkZPKixTRl9GT1JNQVRfSU5GTyosbXpvbmUqLG16b25lKl0 [SF_FORMAT_INFO*,SF_FORMAT_INFO*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_18 (lambda (x:SF_FORMAT_INFO* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (if (llvm_ptr_in_zone fromz (cast (tref x 1) i8*)) (let ((newptr:i8* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 1) i8*) 1) (tset! obj 1 newptr)) (tset! obj 1 (tref x 1))) (if (llvm_ptr_in_zone fromz (cast (tref x 2) i8*)) (let ((newptr:i8* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 2) i8*) 1) (tset! obj 2 newptr)) (tset! obj 2 (tref x 2))) (pop_zone) obj)) x)))) zcopy_adhoc_18))
(bind-poly zcopy zcopy_adhoc_W1NGX0ZPUk1BVF9JTkZPKixTRl9GT1JNQVRfSU5GTyosbXpvbmUqLG16b25lKl0 "")
(register-lib-val xtmsndfile SFD_DEFAULT_LEVEL i32 "")
(register-lib-val xtmsndfile SFD_CUSTOM_LEVEL i32 "")
(register-lib-val xtmsndfile SFD_NO_DITHER i32 "")
(register-lib-val xtmsndfile SFD_WHITE i32 "")
(register-lib-val xtmsndfile SFD_TRIANGULAR_PDF i32 "")
(register-lib-type xtmsndfile SF_DITHER_INFO <i32,double,i8*> "")
(register-lib-func xtmsndfile SF_DITHER_INFO_adhoc_W1NGX0RJVEhFUl9JTkZPKixpMzIsZG91YmxlLGk4Kl0 [SF_DITHER_INFO*,i32,double,i8*]* 0 "" '(let ((SF_DITHER_INFO_adhoc_19 (lambda (arg_0 arg_1 arg_2) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) obj)))) SF_DITHER_INFO_adhoc_19))
(bind-poly SF_DITHER_INFO SF_DITHER_INFO_adhoc_W1NGX0RJVEhFUl9JTkZPKixpMzIsZG91YmxlLGk4Kl0 "")
(register-lib-func xtmsndfile SF_DITHER_INFO_z_adhoc_W1NGX0RJVEhFUl9JTkZPKixpMzIsZG91YmxlLGk4Kl0 [SF_DITHER_INFO*,i32,double,i8*]* 0 "" '(let ((SF_DITHER_INFO_z_adhoc_20 (lambda (arg_0 arg_1 arg_2) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) obj)))) SF_DITHER_INFO_z_adhoc_20))
(bind-poly SF_DITHER_INFO_z SF_DITHER_INFO_z_adhoc_W1NGX0RJVEhFUl9JTkZPKixpMzIsZG91YmxlLGk4Kl0 "")
(register-lib-func xtmsndfile SF_DITHER_INFO_h_adhoc_W1NGX0RJVEhFUl9JTkZPKixpMzIsZG91YmxlLGk4Kl0 [SF_DITHER_INFO*,i32,double,i8*]* 0 "" '(let ((SF_DITHER_INFO_h_adhoc_21 (lambda (arg_0 arg_1 arg_2) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) obj)))) SF_DITHER_INFO_h_adhoc_21))
(bind-poly SF_DITHER_INFO_h SF_DITHER_INFO_h_adhoc_W1NGX0RJVEhFUl9JTkZPKixpMzIsZG91YmxlLGk4Kl0 "")
(register-lib-func xtmsndfile toString_adhoc_W1N0cmluZyosU0ZfRElUSEVSX0lORk8qXQ [String*,SF_DITHER_INFO*]* 0 "" '(let ((toString_adhoc_22 (lambda (x:SF_DITHER_INFO*) (if (null? x) (sprintout "<SF_DITHER_INFO:null>") (sprintout "<SF_DITHER_INFO:" (tref x 0) "," (tref x 1) "," (tref x 2) ">"))))) toString_adhoc_22))
(bind-poly toString toString_adhoc_W1N0cmluZyosU0ZfRElUSEVSX0lORk8qXQ "")
(register-lib-func xtmsndfile print_adhoc_W3ZvaWQsU0ZfRElUSEVSX0lORk8qXQ [void,SF_DITHER_INFO*]* 0 "" '(let ((print_adhoc_23 (lambda (x:SF_DITHER_INFO*) (if (null? x) (printout "<SF_DITHER_INFO:null>") (printout "<SF_DITHER_INFO:" (tref x 0) "," (tref x 1) "," (tref x 2) ">")) void))) print_adhoc_23))
(bind-poly print print_adhoc_W3ZvaWQsU0ZfRElUSEVSX0lORk8qXQ "")
(register-lib-func xtmsndfile SF_DITHER_INFO_val_adhoc_W1NGX0RJVEhFUl9JTkZPLGkzMixkb3VibGUsaTgqXQ [SF_DITHER_INFO,i32,double,i8*]* 0 "" '(let ((SF_DITHER_INFO_val_adhoc_24 (lambda (arg_0 arg_1 arg_2) (let ((obj:SF_DITHER_INFO* (salloc))) (tfill! obj arg_0 arg_1 arg_2) (pref obj 0))))) SF_DITHER_INFO_val_adhoc_24))
(bind-poly SF_DITHER_INFO_val SF_DITHER_INFO_val_adhoc_W1NGX0RJVEhFUl9JTkZPLGkzMixkb3VibGUsaTgqXQ "")
(register-lib-func xtmsndfile hcopy_adhoc_W1NGX0RJVEhFUl9JTkZPKixTRl9ESVRIRVJfSU5GTypd [SF_DITHER_INFO*,SF_DITHER_INFO*]* 0 "" '(let ((hcopy_adhoc_25 (lambda (x:SF_DITHER_INFO*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) (tset! obj 2 (tref x 2)) obj)))) hcopy_adhoc_25))
(bind-poly hcopy hcopy_adhoc_W1NGX0RJVEhFUl9JTkZPKixTRl9ESVRIRVJfSU5GTypd "")
(register-lib-func xtmsndfile hfree_adhoc_W3ZvaWQsU0ZfRElUSEVSX0lORk8qXQ [void,SF_DITHER_INFO*]* 0 "" '(let ((hfree_adhoc_26 (lambda (x:SF_DITHER_INFO*) () () () (free x) void))) hfree_adhoc_26))
(bind-poly hfree hfree_adhoc_W3ZvaWQsU0ZfRElUSEVSX0lORk8qXQ "")
(register-lib-func xtmsndfile zcopy_adhoc_W1NGX0RJVEhFUl9JTkZPKixTRl9ESVRIRVJfSU5GTyosbXpvbmUqLG16b25lKl0 [SF_DITHER_INFO*,SF_DITHER_INFO*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_27 (lambda (x:SF_DITHER_INFO* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (begin (tset! obj 1 (tref x 1))) (if (llvm_ptr_in_zone fromz (cast (tref x 2) i8*)) (let ((newptr:i8* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 2) i8*) 1) (tset! obj 2 newptr)) (tset! obj 2 (tref x 2))) (pop_zone) obj)) x)))) zcopy_adhoc_27))
(bind-poly zcopy zcopy_adhoc_W1NGX0RJVEhFUl9JTkZPKixTRl9ESVRIRVJfSU5GTyosbXpvbmUqLG16b25lKl0 "")
(register-lib-type xtmsndfile SF_EMBED_FILE_INFO <i64,i64> "")
(register-lib-func xtmsndfile SF_EMBED_FILE_INFO_adhoc_W1NGX0VNQkVEX0ZJTEVfSU5GTyosaTY0LGk2NF0 [SF_EMBED_FILE_INFO*,i64,i64]* 0 "" '(let ((SF_EMBED_FILE_INFO_adhoc_28 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) SF_EMBED_FILE_INFO_adhoc_28))
(bind-poly SF_EMBED_FILE_INFO SF_EMBED_FILE_INFO_adhoc_W1NGX0VNQkVEX0ZJTEVfSU5GTyosaTY0LGk2NF0 "")
(register-lib-func xtmsndfile SF_EMBED_FILE_INFO_z_adhoc_W1NGX0VNQkVEX0ZJTEVfSU5GTyosaTY0LGk2NF0 [SF_EMBED_FILE_INFO*,i64,i64]* 0 "" '(let ((SF_EMBED_FILE_INFO_z_adhoc_29 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) SF_EMBED_FILE_INFO_z_adhoc_29))
(bind-poly SF_EMBED_FILE_INFO_z SF_EMBED_FILE_INFO_z_adhoc_W1NGX0VNQkVEX0ZJTEVfSU5GTyosaTY0LGk2NF0 "")
(register-lib-func xtmsndfile SF_EMBED_FILE_INFO_h_adhoc_W1NGX0VNQkVEX0ZJTEVfSU5GTyosaTY0LGk2NF0 [SF_EMBED_FILE_INFO*,i64,i64]* 0 "" '(let ((SF_EMBED_FILE_INFO_h_adhoc_30 (lambda (arg_0 arg_1) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) SF_EMBED_FILE_INFO_h_adhoc_30))
(bind-poly SF_EMBED_FILE_INFO_h SF_EMBED_FILE_INFO_h_adhoc_W1NGX0VNQkVEX0ZJTEVfSU5GTyosaTY0LGk2NF0 "")
(register-lib-func xtmsndfile toString_adhoc_W1N0cmluZyosU0ZfRU1CRURfRklMRV9JTkZPKl0 [String*,SF_EMBED_FILE_INFO*]* 0 "" '(let ((toString_adhoc_31 (lambda (x:SF_EMBED_FILE_INFO*) (if (null? x) (sprintout "<SF_EMBED_FILE_INFO:null>") (sprintout "<SF_EMBED_FILE_INFO:" (tref x 0) "," (tref x 1) ">"))))) toString_adhoc_31))
(bind-poly toString toString_adhoc_W1N0cmluZyosU0ZfRU1CRURfRklMRV9JTkZPKl0 "")
(register-lib-func xtmsndfile print_adhoc_W3ZvaWQsU0ZfRU1CRURfRklMRV9JTkZPKl0 [void,SF_EMBED_FILE_INFO*]* 0 "" '(let ((print_adhoc_32 (lambda (x:SF_EMBED_FILE_INFO*) (if (null? x) (printout "<SF_EMBED_FILE_INFO:null>") (printout "<SF_EMBED_FILE_INFO:" (tref x 0) "," (tref x 1) ">")) void))) print_adhoc_32))
(bind-poly print print_adhoc_W3ZvaWQsU0ZfRU1CRURfRklMRV9JTkZPKl0 "")
(register-lib-func xtmsndfile SF_EMBED_FILE_INFO_val_adhoc_W1NGX0VNQkVEX0ZJTEVfSU5GTyxpNjQsaTY0XQ [SF_EMBED_FILE_INFO,i64,i64]* 0 "" '(let ((SF_EMBED_FILE_INFO_val_adhoc_33 (lambda (arg_0 arg_1) (let ((obj:SF_EMBED_FILE_INFO* (salloc))) (tfill! obj arg_0 arg_1) (pref obj 0))))) SF_EMBED_FILE_INFO_val_adhoc_33))
(bind-poly SF_EMBED_FILE_INFO_val SF_EMBED_FILE_INFO_val_adhoc_W1NGX0VNQkVEX0ZJTEVfSU5GTyxpNjQsaTY0XQ "")
(register-lib-func xtmsndfile hcopy_adhoc_W1NGX0VNQkVEX0ZJTEVfSU5GTyosU0ZfRU1CRURfRklMRV9JTkZPKl0 [SF_EMBED_FILE_INFO*,SF_EMBED_FILE_INFO*]* 0 "" '(let ((hcopy_adhoc_34 (lambda (x:SF_EMBED_FILE_INFO*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) obj)))) hcopy_adhoc_34))
(bind-poly hcopy hcopy_adhoc_W1NGX0VNQkVEX0ZJTEVfSU5GTyosU0ZfRU1CRURfRklMRV9JTkZPKl0 "")
(register-lib-func xtmsndfile hfree_adhoc_W3ZvaWQsU0ZfRU1CRURfRklMRV9JTkZPKl0 [void,SF_EMBED_FILE_INFO*]* 0 "" '(let ((hfree_adhoc_35 (lambda (x:SF_EMBED_FILE_INFO*) () () (free x) void))) hfree_adhoc_35))
(bind-poly hfree hfree_adhoc_W3ZvaWQsU0ZfRU1CRURfRklMRV9JTkZPKl0 "")
(register-lib-func xtmsndfile zcopy_adhoc_W1NGX0VNQkVEX0ZJTEVfSU5GTyosU0ZfRU1CRURfRklMRV9JTkZPKixtem9uZSosbXpvbmUqXQ [SF_EMBED_FILE_INFO*,SF_EMBED_FILE_INFO*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_36 (lambda (x:SF_EMBED_FILE_INFO* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (begin (tset! obj 1 (tref x 1))) (pop_zone) obj)) x)))) zcopy_adhoc_36))
(bind-poly zcopy zcopy_adhoc_W1NGX0VNQkVEX0ZJTEVfSU5GTyosU0ZfRU1CRURfRklMRV9JTkZPKixtem9uZSosbXpvbmUqXQ "")
(register-lib-val xtmsndfile SF_LOOP_NONE i32 "")
(register-lib-val xtmsndfile SF_LOOP_FORWARD i32 "")
(register-lib-val xtmsndfile SF_LOOP_BACKWARD i32 "")
(register-lib-val xtmsndfile SF_LOOP_ALTERNATING i32 "")
(register-lib-type xtmsndfile SF_INSTRUMENT <i32,i8,i8,i8,i8,i8,i8,i32,|16,<i32,i32,i32,i32>|> "")
(register-lib-func xtmsndfile SF_INSTRUMENT_adhoc_W1NGX0lOU1RSVU1FTlQqLGkzMixpOCxpOCxpOCxpOCxpOCxpOCxpMzIsfDE2LDxpMzIsaTMyLGkzMixpMzI_fF0 [SF_INSTRUMENT*,i32,i8,i8,i8,i8,i8,i8,i32,|16,<i32,i32,i32,i32>|]* 0 "" '(let ((SF_INSTRUMENT_adhoc_37 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) (tset! obj 7 arg_7) (tset! obj 8 arg_8) obj)))) SF_INSTRUMENT_adhoc_37))
(bind-poly SF_INSTRUMENT SF_INSTRUMENT_adhoc_W1NGX0lOU1RSVU1FTlQqLGkzMixpOCxpOCxpOCxpOCxpOCxpOCxpMzIsfDE2LDxpMzIsaTMyLGkzMixpMzI_fF0 "")
(register-lib-func xtmsndfile SF_INSTRUMENT_z_adhoc_W1NGX0lOU1RSVU1FTlQqLGkzMixpOCxpOCxpOCxpOCxpOCxpOCxpMzIsfDE2LDxpMzIsaTMyLGkzMixpMzI_fF0 [SF_INSTRUMENT*,i32,i8,i8,i8,i8,i8,i8,i32,|16,<i32,i32,i32,i32>|]* 0 "" '(let ((SF_INSTRUMENT_z_adhoc_38 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) (tset! obj 7 arg_7) (tset! obj 8 arg_8) obj)))) SF_INSTRUMENT_z_adhoc_38))
(bind-poly SF_INSTRUMENT_z SF_INSTRUMENT_z_adhoc_W1NGX0lOU1RSVU1FTlQqLGkzMixpOCxpOCxpOCxpOCxpOCxpOCxpMzIsfDE2LDxpMzIsaTMyLGkzMixpMzI_fF0 "")
(register-lib-func xtmsndfile SF_INSTRUMENT_h_adhoc_W1NGX0lOU1RSVU1FTlQqLGkzMixpOCxpOCxpOCxpOCxpOCxpOCxpMzIsfDE2LDxpMzIsaTMyLGkzMixpMzI_fF0 [SF_INSTRUMENT*,i32,i8,i8,i8,i8,i8,i8,i32,|16,<i32,i32,i32,i32>|]* 0 "" '(let ((SF_INSTRUMENT_h_adhoc_39 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) (tset! obj 7 arg_7) (tset! obj 8 arg_8) obj)))) SF_INSTRUMENT_h_adhoc_39))
(bind-poly SF_INSTRUMENT_h SF_INSTRUMENT_h_adhoc_W1NGX0lOU1RSVU1FTlQqLGkzMixpOCxpOCxpOCxpOCxpOCxpOCxpMzIsfDE2LDxpMzIsaTMyLGkzMixpMzI_fF0 "")
(register-lib-func xtmsndfile toString_poly_W1N0cmluZyosfDE2LDxpMzIsaTMyLGkzMixpMzI_fF0q [String*,|16,<i32,i32,i32,i32>|]* 0 "" '(lambda (x) (String "_")))
(bind-poly toString toString_poly_W1N0cmluZyosfDE2LDxpMzIsaTMyLGkzMixpMzI_fF0q "")
(register-lib-func xtmsndfile toString_adhoc_W1N0cmluZyosU0ZfSU5TVFJVTUVOVCpd [String*,SF_INSTRUMENT*]* 0 "" '(let ((toString_adhoc_40 (lambda (x:SF_INSTRUMENT*) (if (null? x) (sprintout "<SF_INSTRUMENT:null>") (sprintout "<SF_INSTRUMENT:" (tref x 0) "," (tref x 1) "," (tref x 2) "," (tref x 3) "," (tref x 4) "," (tref x 5) "," (tref x 6) "," (tref x 7) "," (tref x 8) ">"))))) toString_adhoc_40))
(bind-poly toString toString_adhoc_W1N0cmluZyosU0ZfSU5TVFJVTUVOVCpd "")
(register-lib-func xtmsndfile print_poly_W3ZvaWQsPGkzMixpMzIsaTMyLGkzMj5dKg [void,<i32,i32,i32,i32>]* 0 "" '(lambda (tup) (printout "<" (tref tup 0) "," (tref tup 1) "," (tref tup 2) "," (tref tup 3) ">") void))
(bind-poly print print_poly_W3ZvaWQsPGkzMixpMzIsaTMyLGkzMj5dKg "")
(register-lib-func xtmsndfile print_poly_W3ZvaWQsfDE2LDxpMzIsaTMyLGkzMixpMzI_fF0q [void,|16,<i32,i32,i32,i32>|]* 0 "" '(lambda (arr) (let ((a1 (ref arr))) (printout "|" (aref a1 0)) (doloop (i (- (num-of-elts a1) 1)) (printout "," (aref a1 (+ 1 i)))) (printout "|") void)))
(bind-poly print print_poly_W3ZvaWQsfDE2LDxpMzIsaTMyLGkzMixpMzI_fF0q "")
(register-lib-func xtmsndfile print_adhoc_W3ZvaWQsU0ZfSU5TVFJVTUVOVCpd [void,SF_INSTRUMENT*]* 0 "" '(let ((print_adhoc_42 (lambda (x:SF_INSTRUMENT*) (if (null? x) (printout "<SF_INSTRUMENT:null>") (printout "<SF_INSTRUMENT:" (tref x 0) "," (tref x 1) "," (tref x 2) "," (tref x 3) "," (tref x 4) "," (tref x 5) "," (tref x 6) "," (tref x 7) "," (tref x 8) ">")) void))) print_adhoc_42))
(bind-poly print print_adhoc_W3ZvaWQsU0ZfSU5TVFJVTUVOVCpd "")
(register-lib-func xtmsndfile SF_INSTRUMENT_val_adhoc_W1NGX0lOU1RSVU1FTlQsaTMyLGk4LGk4LGk4LGk4LGk4LGk4LGkzMix8MTYsPGkzMixpMzIsaTMyLGkzMj58XQ [SF_INSTRUMENT,i32,i8,i8,i8,i8,i8,i8,i32,|16,<i32,i32,i32,i32>|]* 0 "" '(let ((SF_INSTRUMENT_val_adhoc_45 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8) (let ((obj:SF_INSTRUMENT* (salloc))) (tfill! obj arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8) (pref obj 0))))) SF_INSTRUMENT_val_adhoc_45))
(bind-poly SF_INSTRUMENT_val SF_INSTRUMENT_val_adhoc_W1NGX0lOU1RSVU1FTlQsaTMyLGk4LGk4LGk4LGk4LGk4LGk4LGkzMix8MTYsPGkzMixpMzIsaTMyLGkzMj58XQ "")
(register-lib-func xtmsndfile hcopy_adhoc_W1NGX0lOU1RSVU1FTlQqLFNGX0lOU1RSVU1FTlQqXQ [SF_INSTRUMENT*,SF_INSTRUMENT*]* 0 "" '(let ((hcopy_adhoc_46 (lambda (x:SF_INSTRUMENT*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) (tset! obj 2 (tref x 2)) (tset! obj 3 (tref x 3)) (tset! obj 4 (tref x 4)) (tset! obj 5 (tref x 5)) (tset! obj 6 (tref x 6)) (tset! obj 7 (tref x 7)) (tset! obj 8 (tref x 8)) obj)))) hcopy_adhoc_46))
(bind-poly hcopy hcopy_adhoc_W1NGX0lOU1RSVU1FTlQqLFNGX0lOU1RSVU1FTlQqXQ "")
(register-lib-func xtmsndfile hfree_adhoc_W3ZvaWQsU0ZfSU5TVFJVTUVOVCpd [void,SF_INSTRUMENT*]* 0 "" '(let ((hfree_adhoc_47 (lambda (x:SF_INSTRUMENT*) () () () () () () () () () (free x) void))) hfree_adhoc_47))
(bind-poly hfree hfree_adhoc_W3ZvaWQsU0ZfSU5TVFJVTUVOVCpd "")
(register-lib-func xtmsndfile zcopy_adhoc_W1NGX0lOU1RSVU1FTlQqLFNGX0lOU1RSVU1FTlQqLG16b25lKixtem9uZSpd [SF_INSTRUMENT*,SF_INSTRUMENT*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_48 (lambda (x:SF_INSTRUMENT* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (begin (tset! obj 1 (tref x 1))) (begin (tset! obj 2 (tref x 2))) (begin (tset! obj 3 (tref x 3))) (begin (tset! obj 4 (tref x 4))) (begin (tset! obj 5 (tref x 5))) (begin (tset! obj 6 (tref x 6))) (begin (tset! obj 7 (tref x 7))) (begin (tset! obj 8 (tref x 8))) (pop_zone) obj)) x)))) zcopy_adhoc_48))
(bind-poly zcopy zcopy_adhoc_W1NGX0lOU1RSVU1FTlQqLFNGX0lOU1RSVU1FTlQqLG16b25lKixtem9uZSpd "")
(register-lib-type xtmsndfile SF_LOOP_INFO <|2,i8|,|2,i8|,i32,i32,float,i32,|6,i32|> "")
(register-lib-func xtmsndfile SF_LOOP_INFO_adhoc_W1NGX0xPT1BfSU5GTyosfDIsaTh8LHwyLGk4fCxpMzIsaTMyLGZsb2F0LGkzMix8NixpMzJ8XQ [SF_LOOP_INFO*,|2,i8|,|2,i8|,i32,i32,float,i32,|6,i32|]* 0 "" '(let ((SF_LOOP_INFO_adhoc_49 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) obj)))) SF_LOOP_INFO_adhoc_49))
(bind-poly SF_LOOP_INFO SF_LOOP_INFO_adhoc_W1NGX0xPT1BfSU5GTyosfDIsaTh8LHwyLGk4fCxpMzIsaTMyLGZsb2F0LGkzMix8NixpMzJ8XQ "")
(register-lib-func xtmsndfile SF_LOOP_INFO_z_adhoc_W1NGX0xPT1BfSU5GTyosfDIsaTh8LHwyLGk4fCxpMzIsaTMyLGZsb2F0LGkzMix8NixpMzJ8XQ [SF_LOOP_INFO*,|2,i8|,|2,i8|,i32,i32,float,i32,|6,i32|]* 0 "" '(let ((SF_LOOP_INFO_z_adhoc_50 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) obj)))) SF_LOOP_INFO_z_adhoc_50))
(bind-poly SF_LOOP_INFO_z SF_LOOP_INFO_z_adhoc_W1NGX0xPT1BfSU5GTyosfDIsaTh8LHwyLGk4fCxpMzIsaTMyLGZsb2F0LGkzMix8NixpMzJ8XQ "")
(register-lib-func xtmsndfile SF_LOOP_INFO_h_adhoc_W1NGX0xPT1BfSU5GTyosfDIsaTh8LHwyLGk4fCxpMzIsaTMyLGZsb2F0LGkzMix8NixpMzJ8XQ [SF_LOOP_INFO*,|2,i8|,|2,i8|,i32,i32,float,i32,|6,i32|]* 0 "" '(let ((SF_LOOP_INFO_h_adhoc_51 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) obj)))) SF_LOOP_INFO_h_adhoc_51))
(bind-poly SF_LOOP_INFO_h SF_LOOP_INFO_h_adhoc_W1NGX0xPT1BfSU5GTyosfDIsaTh8LHwyLGk4fCxpMzIsaTMyLGZsb2F0LGkzMix8NixpMzJ8XQ "")
(register-lib-func xtmsndfile toString_poly_W1N0cmluZyosfDIsaTh8XSo [String*,|2,i8|]* 0 "" '(lambda (x) (String "_")))
(bind-poly toString toString_poly_W1N0cmluZyosfDIsaTh8XSo "")
(register-lib-func xtmsndfile toString_poly_W1N0cmluZyosfDYsaTMyfF0q [String*,|6,i32|]* 0 "" '(lambda (x) (String "_")))
(bind-poly toString toString_poly_W1N0cmluZyosfDYsaTMyfF0q "")
(register-lib-func xtmsndfile toString_adhoc_W1N0cmluZyosU0ZfTE9PUF9JTkZPKl0 [String*,SF_LOOP_INFO*]* 0 "" '(let ((toString_adhoc_52 (lambda (x:SF_LOOP_INFO*) (if (null? x) (sprintout "<SF_LOOP_INFO:null>") (sprintout "<SF_LOOP_INFO:" (tref x 0) "," (tref x 1) "," (tref x 2) "," (tref x 3) "," (tref x 4) "," (tref x 5) "," (tref x 6) ">"))))) toString_adhoc_52))
(bind-poly toString toString_adhoc_W1N0cmluZyosU0ZfTE9PUF9JTkZPKl0 "")
(register-lib-func xtmsndfile print_poly_W3ZvaWQsfDIsaTh8XSo [void,|2,i8|]* 0 "" '(lambda (arr) (let ((a1 (ref arr))) (printout "|" (aref a1 0)) (doloop (i (- (num-of-elts a1) 1)) (printout "," (aref a1 (+ 1 i)))) (printout "|") void)))
(bind-poly print print_poly_W3ZvaWQsfDIsaTh8XSo "")
(register-lib-func xtmsndfile print_poly_W3ZvaWQsfDYsaTMyfF0q [void,|6,i32|]* 0 "" '(lambda (arr) (let ((a1 (ref arr))) (printout "|" (aref a1 0)) (doloop (i (- (num-of-elts a1) 1)) (printout "," (aref a1 (+ 1 i)))) (printout "|") void)))
(bind-poly print print_poly_W3ZvaWQsfDYsaTMyfF0q "")
(register-lib-func xtmsndfile print_adhoc_W3ZvaWQsU0ZfTE9PUF9JTkZPKl0 [void,SF_LOOP_INFO*]* 0 "" '(let ((print_adhoc_55 (lambda (x:SF_LOOP_INFO*) (if (null? x) (printout "<SF_LOOP_INFO:null>") (printout "<SF_LOOP_INFO:" (tref x 0) "," (tref x 1) "," (tref x 2) "," (tref x 3) "," (tref x 4) "," (tref x 5) "," (tref x 6) ">")) void))) print_adhoc_55))
(bind-poly print print_adhoc_W3ZvaWQsU0ZfTE9PUF9JTkZPKl0 "")
(register-lib-func xtmsndfile SF_LOOP_INFO_val_adhoc_W1NGX0xPT1BfSU5GTyx8MixpOHwsfDIsaTh8LGkzMixpMzIsZmxvYXQsaTMyLHw2LGkzMnxd [SF_LOOP_INFO,|2,i8|,|2,i8|,i32,i32,float,i32,|6,i32|]* 0 "" '(let ((SF_LOOP_INFO_val_adhoc_58 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6) (let ((obj:SF_LOOP_INFO* (salloc))) (tfill! obj arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6) (pref obj 0))))) SF_LOOP_INFO_val_adhoc_58))
(bind-poly SF_LOOP_INFO_val SF_LOOP_INFO_val_adhoc_W1NGX0xPT1BfSU5GTyx8MixpOHwsfDIsaTh8LGkzMixpMzIsZmxvYXQsaTMyLHw2LGkzMnxd "")
(register-lib-func xtmsndfile hcopy_adhoc_W1NGX0xPT1BfSU5GTyosU0ZfTE9PUF9JTkZPKl0 [SF_LOOP_INFO*,SF_LOOP_INFO*]* 0 "" '(let ((hcopy_adhoc_59 (lambda (x:SF_LOOP_INFO*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) (tset! obj 2 (tref x 2)) (tset! obj 3 (tref x 3)) (tset! obj 4 (tref x 4)) (tset! obj 5 (tref x 5)) (tset! obj 6 (tref x 6)) obj)))) hcopy_adhoc_59))
(bind-poly hcopy hcopy_adhoc_W1NGX0xPT1BfSU5GTyosU0ZfTE9PUF9JTkZPKl0 "")
(register-lib-func xtmsndfile hfree_adhoc_W3ZvaWQsU0ZfTE9PUF9JTkZPKl0 [void,SF_LOOP_INFO*]* 0 "" '(let ((hfree_adhoc_60 (lambda (x:SF_LOOP_INFO*) () () () () () () () (free x) void))) hfree_adhoc_60))
(bind-poly hfree hfree_adhoc_W3ZvaWQsU0ZfTE9PUF9JTkZPKl0 "")
(register-lib-func xtmsndfile zcopy_adhoc_W1NGX0xPT1BfSU5GTyosU0ZfTE9PUF9JTkZPKixtem9uZSosbXpvbmUqXQ [SF_LOOP_INFO*,SF_LOOP_INFO*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_61 (lambda (x:SF_LOOP_INFO* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (begin (tset! obj 1 (tref x 1))) (begin (tset! obj 2 (tref x 2))) (begin (tset! obj 3 (tref x 3))) (begin (tset! obj 4 (tref x 4))) (begin (tset! obj 5 (tref x 5))) (begin (tset! obj 6 (tref x 6))) (pop_zone) obj)) x)))) zcopy_adhoc_61))
(bind-poly zcopy zcopy_adhoc_W1NGX0xPT1BfSU5GTyosU0ZfTE9PUF9JTkZPKixtem9uZSosbXpvbmUqXQ "")
(llvm:bind-symbol libsndfile "sf_open")
(bind-lib libsndfile sf_open [SNDFILE*,i8*,i32,SF_INFO*]*)
(llvm:bind-symbol libsndfile "sf_open_fd")
(bind-lib libsndfile sf_open_fd [SNDFILE*,i32,i32,SF_INFO*,i32]*)
(llvm:bind-symbol libsndfile "sf_error")
(bind-lib libsndfile sf_error [i32,SNDFILE*]*)
(llvm:bind-symbol libsndfile "sf_strerror")
(bind-lib libsndfile sf_strerror [i8*,SNDFILE*]*)
(llvm:bind-symbol libsndfile "sf_error_number")
(bind-lib libsndfile sf_error_number [i8*,i32]*)
(llvm:bind-symbol libsndfile "sf_perror")
(bind-lib libsndfile sf_perror [i32,SNDFILE*]*)
(llvm:bind-symbol libsndfile "sf_error_str")
(bind-lib libsndfile sf_error_str [i32,SNDFILE*,i8*,size_t]*)
(llvm:bind-symbol libsndfile "sf_command")
(bind-lib libsndfile sf_command [i32,SNDFILE*,i32,i8*,i32]*)
(llvm:bind-symbol libsndfile "sf_format_check")
(bind-lib libsndfile sf_format_check [i32,SF_INFO*]*)
(llvm:bind-symbol libsndfile "sf_seek")
(bind-lib libsndfile sf_seek [i64,SNDFILE*,i64,i32]*)
(llvm:bind-symbol libsndfile "sf_set_string")
(bind-lib libsndfile sf_set_string [i32,SNDFILE*,i32,i8*]*)
(llvm:bind-symbol libsndfile "sf_get_string")
(bind-lib libsndfile sf_get_string [i8*,SNDFILE*,i32]*)
(llvm:bind-symbol libsndfile "sf_version_string")
(bind-lib libsndfile sf_version_string [i8*]*)
(llvm:bind-symbol libsndfile "sf_read_raw")
(bind-lib libsndfile sf_read_raw [i64,SNDFILE*,i8*,i64]*)
(llvm:bind-symbol libsndfile "sf_write_raw")
(bind-lib libsndfile sf_write_raw [i64,SNDFILE*,i8*,i64]*)
(llvm:bind-symbol libsndfile "sf_readf_short")
(bind-lib libsndfile sf_readf_short [i64,SNDFILE*,i16*,i64]*)
(llvm:bind-symbol libsndfile "sf_writef_short")
(bind-lib libsndfile sf_writef_short [i64,SNDFILE*,i16*,i64]*)
(llvm:bind-symbol libsndfile "sf_readf_int")
(bind-lib libsndfile sf_readf_int [i64,SNDFILE*,i32*,i64]*)
(llvm:bind-symbol libsndfile "sf_writef_int")
(bind-lib libsndfile sf_writef_int [i64,SNDFILE*,i32*,i64]*)
(llvm:bind-symbol libsndfile "sf_readf_float")
(bind-lib libsndfile sf_readf_float [i64,SNDFILE*,float*,i64]*)
(llvm:bind-symbol libsndfile "sf_writef_float")
(bind-lib libsndfile sf_writef_float [i64,SNDFILE*,float*,i64]*)
(llvm:bind-symbol libsndfile "sf_readf_double")
(bind-lib libsndfile sf_readf_double [i64,SNDFILE*,double*,i64]*)
(llvm:bind-symbol libsndfile "sf_writef_double")
(bind-lib libsndfile sf_writef_double [i64,SNDFILE*,double*,i64]*)
(bind-poly sf_readf sf_readf_short "")
(bind-poly sf_readf sf_readf_int "")
(bind-poly sf_readf sf_readf_float "")
(bind-poly sf_readf sf_readf_double "")
(bind-poly sf_writef sf_writef_short "")
(bind-poly sf_writef sf_writef_int "")
(bind-poly sf_writef sf_writef_float "")
(bind-poly sf_writef sf_writef_double "")
(llvm:bind-symbol libsndfile "sf_read_short")
(bind-lib libsndfile sf_read_short [i64,SNDFILE*,i16*,i64]*)
(llvm:bind-symbol libsndfile "sf_write_short")
(bind-lib libsndfile sf_write_short [i64,SNDFILE*,i16*,i64]*)
(llvm:bind-symbol libsndfile "sf_read_int")
(bind-lib libsndfile sf_read_int [i64,SNDFILE*,i32*,i64]*)
(llvm:bind-symbol libsndfile "sf_write_int")
(bind-lib libsndfile sf_write_int [i64,SNDFILE*,i32*,i64]*)
(llvm:bind-symbol libsndfile "sf_read_float")
(bind-lib libsndfile sf_read_float [i64,SNDFILE*,float*,i64]*)
(llvm:bind-symbol libsndfile "sf_write_float")
(bind-lib libsndfile sf_write_float [i64,SNDFILE*,float*,i64]*)
(llvm:bind-symbol libsndfile "sf_read_double")
(bind-lib libsndfile sf_read_double [i64,SNDFILE*,double*,i64]*)
(llvm:bind-symbol libsndfile "sf_write_double")
(bind-lib libsndfile sf_write_double [i64,SNDFILE*,double*,i64]*)
(bind-poly sf_read sf_read_short "")
(bind-poly sf_read sf_read_int "")
(bind-poly sf_read sf_read_float "")
(bind-poly sf_read sf_read_double "")
(bind-poly sf_write sf_write_short "")
(bind-poly sf_write sf_write_int "")
(bind-poly sf_write sf_write_float "")
(bind-poly sf_write sf_write_double "")
(llvm:bind-symbol libsndfile "sf_close")
(bind-lib libsndfile sf_close [i32,SNDFILE*]*)
(llvm:bind-symbol libsndfile "sf_write_sync")
(bind-lib libsndfile sf_write_sync [void,SNDFILE*]*)
(register-lib-func xtmsndfile sf_frames_adhoc_W2k2NCxTRl9JTkZPKl0 [i64,SF_INFO*]* 0 "" '(let ((sf_frames_adhoc_62 (lambda (info:SF_INFO*) (tref info 0)))) sf_frames_adhoc_62))
(bind-poly sf_frames sf_frames_adhoc_W2k2NCxTRl9JTkZPKl0 "")
(register-lib-func xtmsndfile sf_set_frames_adhoc_W2k2NCxTRl9JTkZPKixpNjRd [i64,SF_INFO*,i64]* 0 "" '(let ((sf_set_frames_adhoc_63 (lambda (info:SF_INFO* frames) (tset! info 0 frames)))) sf_set_frames_adhoc_63))
(bind-poly sf_set_frames sf_set_frames_adhoc_W2k2NCxTRl9JTkZPKixpNjRd "")
(register-lib-func xtmsndfile sf_samplerate_adhoc_W2kzMixTRl9JTkZPKl0 [i32,SF_INFO*]* 0 "" '(let ((sf_samplerate_adhoc_64 (lambda (info:SF_INFO*) (tref info 1)))) sf_samplerate_adhoc_64))
(bind-poly sf_samplerate sf_samplerate_adhoc_W2kzMixTRl9JTkZPKl0 "")
(register-lib-func xtmsndfile sf_set_samplerate_adhoc_W2kzMixTRl9JTkZPKixpMzJd [i32,SF_INFO*,i32]* 0 "" '(let ((sf_set_samplerate_adhoc_65 (lambda (info:SF_INFO* samplerate) (tset! info 1 samplerate)))) sf_set_samplerate_adhoc_65))
(bind-poly sf_set_samplerate sf_set_samplerate_adhoc_W2kzMixTRl9JTkZPKixpMzJd "")
(register-lib-func xtmsndfile sf_channels_adhoc_W2kzMixTRl9JTkZPKl0 [i32,SF_INFO*]* 0 "" '(let ((sf_channels_adhoc_66 (lambda (info:SF_INFO*) (tref info 2)))) sf_channels_adhoc_66))
(bind-poly sf_channels sf_channels_adhoc_W2kzMixTRl9JTkZPKl0 "")
(register-lib-func xtmsndfile sf_set_channels_adhoc_W2kzMixTRl9JTkZPKixpMzJd [i32,SF_INFO*,i32]* 0 "" '(let ((sf_set_channels_adhoc_67 (lambda (info:SF_INFO* channels) (tset! info 2 channels)))) sf_set_channels_adhoc_67))
(bind-poly sf_set_channels sf_set_channels_adhoc_W2kzMixTRl9JTkZPKixpMzJd "")
(register-lib-func xtmsndfile sf_format_adhoc_W2kzMixTRl9JTkZPKl0 [i32,SF_INFO*]* 0 "" '(let ((sf_format_adhoc_68 (lambda (info:SF_INFO*) (tref info 3)))) sf_format_adhoc_68))
(bind-poly sf_format sf_format_adhoc_W2kzMixTRl9JTkZPKl0 "")
(register-lib-func xtmsndfile sf_set_format_adhoc_W2kzMixTRl9JTkZPKixpMzJd [i32,SF_INFO*,i32]* 0 "" '(let ((sf_set_format_adhoc_69 (lambda (info:SF_INFO* format) (tset! info 3 format)))) sf_set_format_adhoc_69))
(bind-poly sf_set_format sf_set_format_adhoc_W2kzMixTRl9JTkZPKixpMzJd "")
(register-lib-func xtmsndfile sf_sections_adhoc_W2kzMixTRl9JTkZPKl0 [i32,SF_INFO*]* 0 "" '(let ((sf_sections_adhoc_70 (lambda (info:SF_INFO*) (tref info 4)))) sf_sections_adhoc_70))
(bind-poly sf_sections sf_sections_adhoc_W2kzMixTRl9JTkZPKl0 "")
(register-lib-func xtmsndfile sf_set_sections_adhoc_W2kzMixTRl9JTkZPKixpMzJd [i32,SF_INFO*,i32]* 0 "" '(let ((sf_set_sections_adhoc_71 (lambda (info:SF_INFO* sections) (tset! info 4 sections)))) sf_set_sections_adhoc_71))
(bind-poly sf_set_sections sf_set_sections_adhoc_W2kzMixTRl9JTkZPKixpMzJd "")
(register-lib-func xtmsndfile sf_seekable_adhoc_W2kzMixTRl9JTkZPKl0 [i32,SF_INFO*]* 0 "" '(let ((sf_seekable_adhoc_72 (lambda (info:SF_INFO*) (tref info 5)))) sf_seekable_adhoc_72))
(bind-poly sf_seekable sf_seekable_adhoc_W2kzMixTRl9JTkZPKl0 "")
(register-lib-func xtmsndfile sf_set_seekable_adhoc_W2kzMixTRl9JTkZPKixpMzJd [i32,SF_INFO*,i32]* 0 "" '(let ((sf_set_seekable_adhoc_73 (lambda (info:SF_INFO* seekable) (tset! info 5 seekable)))) sf_set_seekable_adhoc_73))
(bind-poly sf_set_seekable sf_set_seekable_adhoc_W2kzMixTRl9JTkZPKixpMzJd "")
(register-lib-func xtmsndfile sf_frames_from_file_adhoc_W2k2NCxpOCpd [i64,i8*]* 0 "get the total number of frames from an audio file" '(let ((sf_frames_from_file_adhoc_74 (lambda (filename) (let ((info:SF_INFO* (salloc)) (audiofile (sf_open filename SFM_READ info))) (if (null? audiofile) -1 (begin (sf_close audiofile) (sf_frames info))))))) sf_frames_from_file_adhoc_74))
(bind-poly sf_frames_from_file sf_frames_from_file_adhoc_W2k2NCxpOCpd "")
(register-lib-func xtmsndfile sf_channels_from_file_adhoc_W2kzMixpOCpd [i32,i8*]* 0 "get the total number of channels from an audio file" '(let ((sf_channels_from_file_adhoc_75 (lambda (filename) (let ((info:SF_INFO* (salloc)) (audiofile (sf_open filename SFM_READ info))) (if (null? audiofile) -1 (begin (sf_close audiofile) (sf_channels info))))))) sf_channels_from_file_adhoc_75))
(bind-poly sf_channels_from_file sf_channels_from_file_adhoc_W2kzMixpOCpd "")
(register-lib-func xtmsndfile sf_samples_from_file_adhoc_W2k2NCxpOCpd [i64,i8*]* 0 "get the total number of samples (* frames channels) from an audio file" '(let ((sf_samples_from_file_adhoc_76 (lambda (filename) (let ((info:SF_INFO* (salloc)) (audiofile (sf_open filename SFM_READ info))) (if (null? audiofile) -1 (begin (sf_close audiofile) (* (sf_frames info) (convert (sf_channels info))))))))) sf_samples_from_file_adhoc_76))
(bind-poly sf_samples_from_file sf_samples_from_file_adhoc_W2k2NCxpOCpd "")
(register-lib-func xtmsndfile sf_read_file_into_buffer_adhoc_W2k2NCxpOCosZmxvYXQqLGk2NCxpNjQsaTFd [i64,i8*,float*,i64,i64,i1]* 0 "fill a SAMPLE* buffer with audio data from file\r\n\r\n@param filename\r\n@param data - pointer to memory to fill with audio data\r\n@param start - start frame\r\n@param nframes - number of frames to read\r\n@param print_p - print info?" '(let ((sf_read_file_into_buffer_adhoc_77 (lambda (filename data:SAMPLE* start nframes print_p:i1) (let ((info:SF_INFO* (salloc)) (audiofile (sf_open filename SFM_READ info)) (channels (convert (tref info 2) i64)) (nsamples (* nframes channels)) (sample_idx (* start channels)) (cnt (sf_seek audiofile sample_idx 0)) (nread (sf_read audiofile data nsamples))) (if (not (null? audiofile)) (begin (if print_p (begin (printf "---------------\n") (printf "file name:     %s\n" filename) (printf "samplerate:    %d\n" (tref info 1)) (printf "channels:      %d\n" (tref info 2)) (printf "frames:        %d\n" (tref info 0)) (printf "samples read:  %lld\n" nread))) (sf_close audiofile)) (printf "errors:  %s\n" (sf_strerror audiofile))) nread)))) sf_read_file_into_buffer_adhoc_77))
(bind-poly sf_read_file_into_buffer sf_read_file_into_buffer_adhoc_W2k2NCxpOCosZmxvYXQqLGk2NCxpNjQsaTFd "")
(register-lib-func xtmsndfile sf_print_audio_file_info_adhoc_W3ZvaWQsaTgqXQ [void,i8*]* 0 "print info about an audio file" '(let ((sf_print_audio_file_info_adhoc_78 (lambda (filename) (let ((info:SF_INFO* (salloc)) (audiofile (sf_open filename SFM_READ info)) (channels (sf_channels info))) (if (null? audiofile) (begin (printf "Bad audio file!\n") void) (let ((nframes (sf_frames info)) (rate (convert (sf_samplerate info))) (nseconds (/ nframes rate))) (printf "---------------\n") (printf "filename: %s\n" filename) (printf "samplerate: %d\n" rate) (printf "channels: %d\n" (sf_channels info)) (printf "format: %#x\n" (sf_format info)) (printf "frames: %lld\n" nframes) (if (< nframes (* 44100 60 1)) (printf "seconds: %f\n" nseconds) (if (< nframes (* 44100 60 60)) (printf "minutes: %f\n" (/ (convert nseconds double) 60.000000000000000000)) (printf "hours: %f\n" (/ (convert nseconds double) (* 60.000000000000000000 60.000000000000000000))))) (let ((loops:SF_LOOP_INFO* (alloc)) (lp1 (sf_command audiofile SFC_GET_LOOP_INFO (cast loops i8*) 44))) (if (= lp1 SF_TRUE) (printf "loop-mode: %d - bpm(%f)\n" (tref loops 2) (ftod (tref loops 4))) (printf "loop-mode:\n"))) (let ((inst:SF_INSTRUMENT* (alloc)) (lp2 (sf_command audiofile SFC_GET_INSTRUMENT (cast inst i8*) 270))) (if (= lp2 SF_TRUE) (printf "nframes loops: %d\n" (tref inst 7)) (printf "nframes loops: 0\n"))) (sf_close audiofile) void)))))) sf_print_audio_file_info_adhoc_78))
(bind-poly sf_print_audio_file_info sf_print_audio_file_info_adhoc_W3ZvaWQsaTgqXQ "")
(print-with-colors 'green 'default #t (print "done"))(print " in" (- (clock:clock) *xtmlib-sndfile-loaded-timer*) "seconds\n")
(define *xtmlib-sndfile-loaded-timer* (clock:clock))
(set! *impc:compiler:message:level* *impc:aot:prev-compiler-message-level*)
