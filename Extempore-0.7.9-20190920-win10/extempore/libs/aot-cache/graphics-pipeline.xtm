(sys:load "libs/base/base.xtm" 'quiet)
(sys:load "libs/core/math.xtm" 'quiet)
(sys:load "libs/external/gl.xtm" 'quiet)
(sys:load "libs/external/stb_image.xtm" 'quiet)
(sys:load "libs/external/gl/gl-objects2.xtm" 'quiet)
(sys:load-preload-check 'graphics-pipeline)
(define *xtmlib-graphics-pipeline-loaded* #t)
(define *xtmlib-graphics-pipeline-loaded-timer* (clock:clock))
(set! *impc:aot:prev-compiler-message-level* *impc:compiler:message:level*)
(set! *impc:compiler:message:level* 'low)

(print "Loading ")
(print-with-colors 'blue 'default #t (print 'xtmgraphics-pipeline))
(print " library... ")
(llvm:compile-ir (sys:slurp-file "libs/aot-cache/xtmgraphics-pipeline.ll"));; flush the JIT-compilation queue, so we only get this file's code in the module
(impc:compiler:flush-jit-compilation-queue)
(register-lib-func xtmgraphics-pipeline mat4_to_mat3_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0Kl0 [void,float*,float*]* 0 "" '(let ((mat4_to_mat3_adhoc_1 (lambda (mat4:float* mat3:float*) (pfill! mat3 (pref mat4 0) (pref mat4 1) (pref mat4 2) (pref mat4 4) (pref mat4 5) (pref mat4 6) (pref mat4 8) (pref mat4 9) (pref mat4 10)) void))) mat4_to_mat3_adhoc_1))
(bind-poly mat4_to_mat3 mat4_to_mat3_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0Kl0 "")
(register-lib-func xtmgraphics-pipeline plane_intersection_adhoc_W2kxLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0Kl0 [i1,float*,float*,float*,float*]* 0 "" '(let ((plane_intersection_adhoc_2 (lambda (ray_origin:float* ray_dir:float* plane_centre:float* plane_normal:float*) (let ((denom (vvdot plane_normal ray_dir 3)) (t -1.0000000000000000000)) (if (> (fabs denom) 0.0001:f) (begin (vvsub plane_centre ray_origin 3 plane_centre) (set! t (/ (vvdot plane_centre plane_normal 3) denom)))) (if (>= t 0.00000000000000000000) #t #f))))) plane_intersection_adhoc_2))
(bind-poly plane_intersection plane_intersection_adhoc_W2kxLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0Kl0 "")
(register-lib-func xtmgraphics-pipeline translate_matrix_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGZsb2F0LGZsb2F0XQ [void,float*,float,float,float]* 0 "" '(let ((translate_matrix_adhoc_3 (lambda (mat:float* x y z) (let ((mat2:float* (salloc 32)) (mat3 (pref-ptr mat2 16))) (pfill! mat2 1.0000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000 x y z 1.0000000000000000000) (mmmul mat mat2 mat3) (memcpy (cast mat i8*) (cast mat3 i8*) (* 16 4)) void)))) translate_matrix_adhoc_3))
(bind-poly translate_matrix translate_matrix_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline scale_matrix_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGZsb2F0LGZsb2F0XQ [void,float*,float,float,float]* 0 "" '(let ((scale_matrix_adhoc_4 (lambda (mat:float* x:float y:float z:float) (let ((mat2:float* (salloc 32)) (mat3:float* (pref-ptr mat2 16))) (pfill! mat2 x 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 y 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 z 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000) (mmmul mat mat2 mat3) (memcpy (cast mat i8*) (cast mat3 i8*) (* 16 4)) void)))) scale_matrix_adhoc_4))
(bind-poly scale_matrix scale_matrix_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline invert_matrix_adhoc_W3ZvaWQsZmxvYXQqXQ [void,float*]* 0 "" '(let ((invert_matrix_adhoc_5 (lambda (mat:float*) (let ((mat2:float* (salloc 16))) (minverse mat 4 mat2) (memcpy (cast mat i8*) (cast mat2 i8*) (* 16 4)) void)))) invert_matrix_adhoc_5))
(bind-poly invert_matrix invert_matrix_adhoc_W3ZvaWQsZmxvYXQqXQ "")
(register-lib-func xtmgraphics-pipeline rotate_matrix_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ [void,float*,float,float,float,float]* 0 "" '(let ((rotate_matrix_adhoc_6 (lambda (mat:float* alpha:float x:float y:float z:float) (let ((c (cos alpha)) (c-1 (- 1.0000000000000000000 c)) (s (sin alpha)) (mat2:float* (salloc 16)) (mat3:float* (salloc 16)) (vec1:float* (salloc 3)) (vec2:float* (salloc 3))) (pfill! vec1 x y z) (vnormalise vec1 3 vec2) (set! x (pref vec2 0)) (set! y (pref vec2 1)) (set! z (pref vec2 2)) (pfill! mat2 (+ (* x x c-1) c) (- (* x y c-1) (* z s)) (+ (* x z c-1) (* y s)) 0.00000000000000000000 (+ (* y x c-1) (* z s)) (+ (* y y c-1) c) (- (* y z c-1) (* x s)) 0.00000000000000000000 (- (* x z c-1) (* y s)) (+ (* y z c-1) (* x s)) (+ (* z z c-1) c) 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000) (mmmul mat mat2 mat3) (memcpy (cast mat i8*) (cast mat3 i8*) (* 16 4)) void)))) rotate_matrix_adhoc_6))
(bind-poly rotate_matrix rotate_matrix_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline fill_identity_matrix_adhoc_W3ZvaWQsZmxvYXQqXQ [void,float*]* 0 "" '(let ((fill_identity_matrix_adhoc_7 (lambda (mat:float*) (pfill! mat 1.0000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000) void))) fill_identity_matrix_adhoc_7))
(bind-poly fill_identity_matrix fill_identity_matrix_adhoc_W3ZvaWQsZmxvYXQqXQ "")
(register-lib-func xtmgraphics-pipeline fill_pos_scale_matrix_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ [void,float*,float,float,float,float,float,float]* 0 "" '(let ((fill_pos_scale_matrix_adhoc_8 (lambda (mat:float* posx posy posz scalex scaley scalez) (pfill! mat scalex 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 scaley 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 scalez 0.00000000000000000000 posx posy posz 1.0000000000000000000) void))) fill_pos_scale_matrix_adhoc_8))
(bind-poly fill_pos_scale_matrix fill_pos_scale_matrix_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline fill_projection_matrix_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ [void,float*,float,float,float,float]* 0 "" '(let ((fill_projection_matrix_adhoc_9 (lambda (mat:float* fovy aspect near far) (let ((a (* fovy (/ PIf 180.00000000000000000))) (c (/ (cos (* a 0.50000000000000000000)) (sin (* a 0.50000000000000000000))))) (pfill! mat (/ c aspect) 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 c 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 (* -1.0000000000000000000 (/ (+ far near) (- far near))) -1.0000000000000000000 0.00000000000000000000 0.00000000000000000000 (* -1.0000000000000000000 (/ (* 2.0000000000000000000 far near) (- far near))) 0.00000000000000000000) void)))) fill_projection_matrix_adhoc_9))
(bind-poly fill_projection_matrix fill_projection_matrix_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline fill_projection_matrix_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ [void,float*,float,float,float,float,float,float]* 0 "" '(let ((fill_projection_matrix_adhoc_10 (lambda (mat:float* l r b t n f) (pfill! mat (/ 2.0000000000000000000 (- r l)) 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 (/ (* 2.0000000000000000000 n) (- t b)) 0.00000000000000000000 0.00000000000000000000 (/ (+ r l) (- r l)) (/ (+ t b) (- t b)) (* -1.0000000000000000000 (/ (+ f n) (- f n))) -1.0000000000000000000 0.00000000000000000000 0.00000000000000000000 (* -1.0000000000000000000 (* 2.0000000000000000000 f n) (- f n)) 0.00000000000000000000) void))) fill_projection_matrix_adhoc_10))
(bind-poly fill_projection_matrix fill_projection_matrix_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline fill_orthographic_matrix_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ [void,float*,float,float,float,float,float,float]* 0 "" '(let ((fill_orthographic_matrix_adhoc_11 (lambda (mat:float* left right bottom top near far) (pfill! mat (/ 2.0000000000000000000 (- right left)) 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 (/ 2.0000000000000000000 (- top bottom)) 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 (* -1.0000000000000000000 (/ 2.0000000000000000000 (- far near))) 0.00000000000000000000 (* -1.0000000000000000000 (/ (+ left right) (- right left))) (* -1.0000000000000000000 (/ (+ top bottom) (- top bottom))) (* -1.0000000000000000000 (/ (+ far near) (- far near))) 1.0000000000000000000) void))) fill_orthographic_matrix_adhoc_11))
(bind-poly fill_orthographic_matrix fill_orthographic_matrix_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline fill_direction_vector_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixmbG9hdCpd [void,float*,float*,float*]* 0 "" '(let ((fill_direction_vector_adhoc_12 (lambda (v1:float* v2:float* v3:float*) (let ((tmp:float* (salloc 4))) (vvsub v1 v2 3 tmp) (vnormalise tmp 3 v3) (pset! v3 3 0.00000000000000000000) void)))) fill_direction_vector_adhoc_12))
(bind-poly fill_direction_vector fill_direction_vector_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixmbG9hdCpd "")
(register-lib-func xtmgraphics-pipeline fill_view_matrix_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqXQ [void,float*,float*,float*,float*]* 0 "" '(let ((fill_view_matrix_adhoc_13 (let ((orientation_matrix:float* (alloc 16)) (translation_matrix:float* (alloc 16)) (vz:float* (alloc 3)) (vy:float* (alloc 3)) (vx:float* (alloc 3)) (vtmp:float* (alloc 3))) (lambda (matrix:float* vEye vTarget vUp) (let ((i 0)) (vvsub vEye vTarget 3 vtmp) (vnormalise vtmp 3 vz) (vvcross vUp vz vtmp) (vnormalise vtmp 3 vx) (vvcross vz vx vy) (pfill! orientation_matrix (pref vx 0) (pref vy 0) (pref vz 0) 0.00000000000000000000 (pref vx 1) (pref vy 1) (pref vz 1) 0.00000000000000000000 (pref vx 2) (pref vy 2) (pref vz 2) 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000) (pfill! translation_matrix 1.0000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000 (* -1.0000000000000000000 (pref vEye 0)) (* -1.0000000000000000000 (pref vEye 1)) (* -1.0000000000000000000 (pref vEye 2)) 1.0000000000000000000) (mmmul translation_matrix orientation_matrix matrix) void))))) fill_view_matrix_adhoc_13))
(bind-poly fill_view_matrix fill_view_matrix_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqXQ "")
(register-lib-func xtmgraphics-pipeline fill_view_matrix_dir_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqXQ [void,float*,float*,float*,float*]* 0 "" '(let ((fill_view_matrix_dir_adhoc_14 (let ((orientation_matrix:float* (alloc 16)) (translation_matrix:float* (alloc 16)) (vz:float* (alloc 3)) (vy:float* (alloc 3)) (vx:float* (alloc 3)) (vtmp:float* (alloc 3))) (lambda (matrix:float* vEye:float* vDir vUp) (let ((i 0)) (vnormalise vDir 3 vz) (vnormalise vUp 3 vtmp) (vvcross vtmp vz vy) (vnormalise vy 3 vx) (vvcross vz vx vy) (pfill! orientation_matrix (pref vx 0) (pref vy 0) (pref vz 0) 0.00000000000000000000 (pref vx 1) (pref vy 1) (pref vz 1) 0.00000000000000000000 (pref vx 2) (pref vy 2) (pref vz 2) 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000) (pfill! translation_matrix 1.0000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000 (* -1.0000000000000000000 (pref vEye 0)) (* -1.0000000000000000000 (pref vEye 1)) (* -1.0000000000000000000 (pref vEye 2)) 1.0000000000000000000) (mmmul translation_matrix orientation_matrix matrix) void))))) fill_view_matrix_dir_adhoc_14))
(bind-poly fill_view_matrix_dir fill_view_matrix_dir_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqXQ "")
(register-lib-type xtmgraphics-pipeline XTMVertexWeight <i32,float> "")
(register-lib-func xtmgraphics-pipeline XTMVertexWeight_adhoc_W1hUTVZlcnRleFdlaWdodCosaTMyLGZsb2F0XQ [XTMVertexWeight*,i32,float]* 0 "" '(let ((XTMVertexWeight_adhoc_15 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) XTMVertexWeight_adhoc_15))
(bind-poly XTMVertexWeight XTMVertexWeight_adhoc_W1hUTVZlcnRleFdlaWdodCosaTMyLGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline XTMVertexWeight_z_adhoc_W1hUTVZlcnRleFdlaWdodCosaTMyLGZsb2F0XQ [XTMVertexWeight*,i32,float]* 0 "" '(let ((XTMVertexWeight_z_adhoc_16 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) XTMVertexWeight_z_adhoc_16))
(bind-poly XTMVertexWeight_z XTMVertexWeight_z_adhoc_W1hUTVZlcnRleFdlaWdodCosaTMyLGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline XTMVertexWeight_h_adhoc_W1hUTVZlcnRleFdlaWdodCosaTMyLGZsb2F0XQ [XTMVertexWeight*,i32,float]* 0 "" '(let ((XTMVertexWeight_h_adhoc_17 (lambda (arg_0 arg_1) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) XTMVertexWeight_h_adhoc_17))
(bind-poly XTMVertexWeight_h XTMVertexWeight_h_adhoc_W1hUTVZlcnRleFdlaWdodCosaTMyLGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline toString_adhoc_W1N0cmluZyosWFRNVmVydGV4V2VpZ2h0Kl0 [String*,XTMVertexWeight*]* 0 "" '(let ((toString_adhoc_18 (lambda (x:XTMVertexWeight*) (if (null? x) (sprintout "<XTMVertexWeight:null>") (sprintout "<XTMVertexWeight:" (tref x 0) "," (tref x 1) ">"))))) toString_adhoc_18))
(bind-poly toString toString_adhoc_W1N0cmluZyosWFRNVmVydGV4V2VpZ2h0Kl0 "")
(register-lib-func xtmgraphics-pipeline print_adhoc_W3ZvaWQsWFRNVmVydGV4V2VpZ2h0Kl0 [void,XTMVertexWeight*]* 0 "" '(let ((print_adhoc_19 (lambda (x:XTMVertexWeight*) (if (null? x) (printout "<XTMVertexWeight:null>") (printout "<XTMVertexWeight:" (tref x 0) "," (tref x 1) ">")) void))) print_adhoc_19))
(bind-poly print print_adhoc_W3ZvaWQsWFRNVmVydGV4V2VpZ2h0Kl0 "")
(register-lib-func xtmgraphics-pipeline XTMVertexWeight_val_adhoc_W1hUTVZlcnRleFdlaWdodCxpMzIsZmxvYXRd [XTMVertexWeight,i32,float]* 0 "" '(let ((XTMVertexWeight_val_adhoc_20 (lambda (arg_0 arg_1) (let ((obj:XTMVertexWeight* (salloc))) (tfill! obj arg_0 arg_1) (pref obj 0))))) XTMVertexWeight_val_adhoc_20))
(bind-poly XTMVertexWeight_val XTMVertexWeight_val_adhoc_W1hUTVZlcnRleFdlaWdodCxpMzIsZmxvYXRd "")
(register-lib-func xtmgraphics-pipeline hcopy_adhoc_W1hUTVZlcnRleFdlaWdodCosWFRNVmVydGV4V2VpZ2h0Kl0 [XTMVertexWeight*,XTMVertexWeight*]* 0 "" '(let ((hcopy_adhoc_21 (lambda (x:XTMVertexWeight*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) obj)))) hcopy_adhoc_21))
(bind-poly hcopy hcopy_adhoc_W1hUTVZlcnRleFdlaWdodCosWFRNVmVydGV4V2VpZ2h0Kl0 "")
(register-lib-func xtmgraphics-pipeline hfree_adhoc_W3ZvaWQsWFRNVmVydGV4V2VpZ2h0Kl0 [void,XTMVertexWeight*]* 0 "" '(let ((hfree_adhoc_22 (lambda (x:XTMVertexWeight*) () () (free x) void))) hfree_adhoc_22))
(bind-poly hfree hfree_adhoc_W3ZvaWQsWFRNVmVydGV4V2VpZ2h0Kl0 "")
(register-lib-func xtmgraphics-pipeline zcopy_adhoc_W1hUTVZlcnRleFdlaWdodCosWFRNVmVydGV4V2VpZ2h0Kixtem9uZSosbXpvbmUqXQ [XTMVertexWeight*,XTMVertexWeight*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_23 (lambda (x:XTMVertexWeight* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (begin (tset! obj 1 (tref x 1))) (pop_zone) obj)) x)))) zcopy_adhoc_23))
(bind-poly zcopy zcopy_adhoc_W1hUTVZlcnRleFdlaWdodCosWFRNVmVydGV4V2VpZ2h0Kixtem9uZSosbXpvbmUqXQ "")
(register-lib-type xtmgraphics-pipeline XTMBone <String*,i32,float*,float*,i32,XTMBone**,XTMBone*> "")
(register-lib-func xtmgraphics-pipeline XTMBone_adhoc_W1hUTUJvbmUqLFN0cmluZyosaTMyLGZsb2F0KixmbG9hdCosaTMyLFhUTUJvbmUqKixYVE1Cb25lKl0 [XTMBone*,String*,i32,float*,float*,i32,XTMBone**,XTMBone*]* 0 "" '(let ((XTMBone_adhoc_24 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) obj)))) XTMBone_adhoc_24))
(bind-poly XTMBone XTMBone_adhoc_W1hUTUJvbmUqLFN0cmluZyosaTMyLGZsb2F0KixmbG9hdCosaTMyLFhUTUJvbmUqKixYVE1Cb25lKl0 "")
(register-lib-func xtmgraphics-pipeline XTMBone_z_adhoc_W1hUTUJvbmUqLFN0cmluZyosaTMyLGZsb2F0KixmbG9hdCosaTMyLFhUTUJvbmUqKixYVE1Cb25lKl0 [XTMBone*,String*,i32,float*,float*,i32,XTMBone**,XTMBone*]* 0 "" '(let ((XTMBone_z_adhoc_25 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) obj)))) XTMBone_z_adhoc_25))
(bind-poly XTMBone_z XTMBone_z_adhoc_W1hUTUJvbmUqLFN0cmluZyosaTMyLGZsb2F0KixmbG9hdCosaTMyLFhUTUJvbmUqKixYVE1Cb25lKl0 "")
(register-lib-func xtmgraphics-pipeline XTMBone_h_adhoc_W1hUTUJvbmUqLFN0cmluZyosaTMyLGZsb2F0KixmbG9hdCosaTMyLFhUTUJvbmUqKixYVE1Cb25lKl0 [XTMBone*,String*,i32,float*,float*,i32,XTMBone**,XTMBone*]* 0 "" '(let ((XTMBone_h_adhoc_26 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) obj)))) XTMBone_h_adhoc_26))
(bind-poly XTMBone_h XTMBone_h_adhoc_W1hUTUJvbmUqLFN0cmluZyosaTMyLGZsb2F0KixmbG9hdCosaTMyLFhUTUJvbmUqKixYVE1Cb25lKl0 "")
(register-lib-func xtmgraphics-pipeline toString_poly_W1N0cmluZyosZmxvYXQqXSo [String*,float*]* 0 "" '(lambda (x) (String "_")))
(bind-poly toString toString_poly_W1N0cmluZyosZmxvYXQqXSo "")
(register-lib-func xtmgraphics-pipeline toString_poly_W1N0cmluZyosWFRNQm9uZSoqXSo [String*,XTMBone**]* 0 "" '(lambda (x) (String "_")))
(bind-poly toString toString_poly_W1N0cmluZyosWFRNQm9uZSoqXSo "")
(register-lib-func xtmgraphics-pipeline toString_poly_W1N0cmluZyosWFRNQm9uZSpdKg [String*,XTMBone*]* 0 "" '(lambda (x) (String "_")))
(bind-poly toString toString_poly_W1N0cmluZyosWFRNQm9uZSpdKg "")
(register-lib-func xtmgraphics-pipeline toString_adhoc_W1N0cmluZyosWFRNQm9uZSpd [String*,XTMBone*]* 0 "" '(let ((toString_adhoc_27 (lambda (x:XTMBone*) (if (null? x) (sprintout "<XTMBone:null>") (sprintout "<XTMBone:" (tref x 0) "," (tref x 1) "," (tref x 2) "," (tref x 3) "," (tref x 4) "," (tref x 5) "," (tref x 6) ">"))))) toString_adhoc_27))
(bind-poly toString toString_adhoc_W1N0cmluZyosWFRNQm9uZSpd "")
(register-lib-func xtmgraphics-pipeline print_poly_W3ZvaWQsZmxvYXQqXSo [void,float*]* 0 "" '(lambda (x) (printf "_") void))
(bind-poly print print_poly_W3ZvaWQsZmxvYXQqXSo "")
(register-lib-func xtmgraphics-pipeline print_poly_W3ZvaWQsWFRNQm9uZSoqXSo [void,XTMBone**]* 0 "" '(lambda (x) (printf "_") void))
(bind-poly print print_poly_W3ZvaWQsWFRNQm9uZSoqXSo "")
(register-lib-func xtmgraphics-pipeline print_poly_W3ZvaWQsWFRNQm9uZSpdKg [void,XTMBone*]* 0 "" '(lambda (x) (printf "_") void))
(bind-poly print print_poly_W3ZvaWQsWFRNQm9uZSpdKg "")
(register-lib-func xtmgraphics-pipeline print_adhoc_W3ZvaWQsWFRNQm9uZSpd [void,XTMBone*]* 0 "" '(let ((print_adhoc_31 (lambda (x:XTMBone*) (if (null? x) (printout "<XTMBone:null>") (printout "<XTMBone:" (tref x 0) "," (tref x 1) "," (tref x 2) "," (tref x 3) "," (tref x 4) "," (tref x 5) "," (tref x 6) ">")) void))) print_adhoc_31))
(bind-poly print print_adhoc_W3ZvaWQsWFRNQm9uZSpd "")
(register-lib-func xtmgraphics-pipeline XTMBone_val_adhoc_W1hUTUJvbmUsU3RyaW5nKixpMzIsZmxvYXQqLGZsb2F0KixpMzIsWFRNQm9uZSoqLFhUTUJvbmUqXQ [XTMBone,String*,i32,float*,float*,i32,XTMBone**,XTMBone*]* 0 "" '(let ((XTMBone_val_adhoc_35 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6) (let ((obj:XTMBone* (salloc))) (tfill! obj arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6) (pref obj 0))))) XTMBone_val_adhoc_35))
(bind-poly XTMBone_val XTMBone_val_adhoc_W1hUTUJvbmUsU3RyaW5nKixpMzIsZmxvYXQqLGZsb2F0KixpMzIsWFRNQm9uZSoqLFhUTUJvbmUqXQ "")
(register-lib-func xtmgraphics-pipeline hcopy_adhoc_W1hUTUJvbmUqLFhUTUJvbmUqXQ [XTMBone*,XTMBone*]* 0 "" '(let ((hcopy_adhoc_36 (lambda (x:XTMBone*) (let ((obj (halloc))) (if (not (null? (tref x 0))) (tset! obj 0 (hcopy:[String*,String*]* (tref x 0)))) (tset! obj 1 (tref x 1)) (tset! obj 2 (tref x 2)) (tset! obj 3 (tref x 3)) (tset! obj 4 (tref x 4)) (tset! obj 5 (tref x 5)) (if (not (null? (tref x 6))) (tset! obj 6 (hcopy_adhoc_36 (tref x 6)))) obj)))) hcopy_adhoc_36))
(bind-poly hcopy hcopy_adhoc_W1hUTUJvbmUqLFhUTUJvbmUqXQ "")
(register-lib-func xtmgraphics-pipeline hfree_adhoc_W3ZvaWQsWFRNQm9uZSpd [void,XTMBone*]* 0 "" '(let ((hfree_adhoc_37 (lambda (x:XTMBone*) (if (not (null? (tref x 0))) (hfree:[void,String*]* (tref x 0))) () () () () () (if (not (null? (tref x 6))) (hfree_adhoc_37 (tref x 6))) (free x) void))) hfree_adhoc_37))
(bind-poly hfree hfree_adhoc_W3ZvaWQsWFRNQm9uZSpd "")
(register-lib-func xtmgraphics-pipeline zcopy_adhoc_W1hUTUJvbmUqLFhUTUJvbmUqLG16b25lKixtem9uZSpd [XTMBone*,XTMBone*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_38 (lambda (x:XTMBone* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (if (not (null? (tref x 0))) (tset! obj 0 (zcopy:[String*,String*,mzone*,mzone*]* (tref x 0) fromz toz))) (begin (tset! obj 1 (tref x 1))) (if (llvm_ptr_in_zone fromz (cast (tref x 2) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 2) i8*) 4) (tset! obj 2 newptr)) (tset! obj 2 (tref x 2))) (if (llvm_ptr_in_zone fromz (cast (tref x 3) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 3) i8*) 4) (tset! obj 3 newptr)) (tset! obj 3 (tref x 3))) (begin (tset! obj 4 (tref x 4))) (begin (tset! obj 5 (tref x 5))) (if (not (null? (tref x 6))) (tset! obj 6 (zcopy_adhoc_38 (tref x 6) fromz toz))) (pop_zone) obj)) x)))) zcopy_adhoc_38))
(bind-poly zcopy zcopy_adhoc_W1hUTUJvbmUqLFhUTUJvbmUqLG16b25lKixtem9uZSpd "")
(register-lib-type xtmgraphics-pipeline XTMMesh <VBO*,Texture*,float*,float*,float*,float*,float,float,i32,i64,VAO*,String*,i32,XTMBone*,i32,Texture*,Texture*,Texture*,Texture*> "")
(register-lib-func xtmgraphics-pipeline XTMMesh_adhoc_W1hUTU1lc2gqLFZCTyosVGV4dHVyZSosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0LGZsb2F0LGkzMixpNjQsVkFPKixTdHJpbmcqLGkzMixYVE1Cb25lKixpMzIsVGV4dHVyZSosVGV4dHVyZSosVGV4dHVyZSosVGV4dHVyZSpd [XTMMesh*,VBO*,Texture*,float*,float*,float*,float*,float,float,i32,i64,VAO*,String*,i32,XTMBone*,i32,Texture*,Texture*,Texture*,Texture*]* 0 "" '(let ((XTMMesh_adhoc_39 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9 arg_10 arg_11 arg_12 arg_13 arg_14 arg_15 arg_16 arg_17 arg_18) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) (tset! obj 7 arg_7) (tset! obj 8 arg_8) (tset! obj 9 arg_9) (tset! obj 10 arg_10) (tset! obj 11 arg_11) (tset! obj 12 arg_12) (tset! obj 13 arg_13) (tset! obj 14 arg_14) (tset! obj 15 arg_15) (tset! obj 16 arg_16) (tset! obj 17 arg_17) (tset! obj 18 arg_18) obj)))) XTMMesh_adhoc_39))
(bind-poly XTMMesh XTMMesh_adhoc_W1hUTU1lc2gqLFZCTyosVGV4dHVyZSosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0LGZsb2F0LGkzMixpNjQsVkFPKixTdHJpbmcqLGkzMixYVE1Cb25lKixpMzIsVGV4dHVyZSosVGV4dHVyZSosVGV4dHVyZSosVGV4dHVyZSpd "")
(register-lib-func xtmgraphics-pipeline XTMMesh_z_adhoc_W1hUTU1lc2gqLFZCTyosVGV4dHVyZSosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0LGZsb2F0LGkzMixpNjQsVkFPKixTdHJpbmcqLGkzMixYVE1Cb25lKixpMzIsVGV4dHVyZSosVGV4dHVyZSosVGV4dHVyZSosVGV4dHVyZSpd [XTMMesh*,VBO*,Texture*,float*,float*,float*,float*,float,float,i32,i64,VAO*,String*,i32,XTMBone*,i32,Texture*,Texture*,Texture*,Texture*]* 0 "" '(let ((XTMMesh_z_adhoc_40 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9 arg_10 arg_11 arg_12 arg_13 arg_14 arg_15 arg_16 arg_17 arg_18) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) (tset! obj 7 arg_7) (tset! obj 8 arg_8) (tset! obj 9 arg_9) (tset! obj 10 arg_10) (tset! obj 11 arg_11) (tset! obj 12 arg_12) (tset! obj 13 arg_13) (tset! obj 14 arg_14) (tset! obj 15 arg_15) (tset! obj 16 arg_16) (tset! obj 17 arg_17) (tset! obj 18 arg_18) obj)))) XTMMesh_z_adhoc_40))
(bind-poly XTMMesh_z XTMMesh_z_adhoc_W1hUTU1lc2gqLFZCTyosVGV4dHVyZSosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0LGZsb2F0LGkzMixpNjQsVkFPKixTdHJpbmcqLGkzMixYVE1Cb25lKixpMzIsVGV4dHVyZSosVGV4dHVyZSosVGV4dHVyZSosVGV4dHVyZSpd "")
(register-lib-func xtmgraphics-pipeline XTMMesh_h_adhoc_W1hUTU1lc2gqLFZCTyosVGV4dHVyZSosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0LGZsb2F0LGkzMixpNjQsVkFPKixTdHJpbmcqLGkzMixYVE1Cb25lKixpMzIsVGV4dHVyZSosVGV4dHVyZSosVGV4dHVyZSosVGV4dHVyZSpd [XTMMesh*,VBO*,Texture*,float*,float*,float*,float*,float,float,i32,i64,VAO*,String*,i32,XTMBone*,i32,Texture*,Texture*,Texture*,Texture*]* 0 "" '(let ((XTMMesh_h_adhoc_41 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9 arg_10 arg_11 arg_12 arg_13 arg_14 arg_15 arg_16 arg_17 arg_18) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) (tset! obj 7 arg_7) (tset! obj 8 arg_8) (tset! obj 9 arg_9) (tset! obj 10 arg_10) (tset! obj 11 arg_11) (tset! obj 12 arg_12) (tset! obj 13 arg_13) (tset! obj 14 arg_14) (tset! obj 15 arg_15) (tset! obj 16 arg_16) (tset! obj 17 arg_17) (tset! obj 18 arg_18) obj)))) XTMMesh_h_adhoc_41))
(bind-poly XTMMesh_h XTMMesh_h_adhoc_W1hUTU1lc2gqLFZCTyosVGV4dHVyZSosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0LGZsb2F0LGkzMixpNjQsVkFPKixTdHJpbmcqLGkzMixYVE1Cb25lKixpMzIsVGV4dHVyZSosVGV4dHVyZSosVGV4dHVyZSosVGV4dHVyZSpd "")
(register-lib-func xtmgraphics-pipeline XTMMesh_val_adhoc_W1hUTU1lc2gsVkJPKixUZXh0dXJlKixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQsZmxvYXQsaTMyLGk2NCxWQU8qLFN0cmluZyosaTMyLFhUTUJvbmUqLGkzMixUZXh0dXJlKixUZXh0dXJlKixUZXh0dXJlKixUZXh0dXJlKl0 [XTMMesh,VBO*,Texture*,float*,float*,float*,float*,float,float,i32,i64,VAO*,String*,i32,XTMBone*,i32,Texture*,Texture*,Texture*,Texture*]* 0 "" '(let ((XTMMesh_val_adhoc_42 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9 arg_10 arg_11 arg_12 arg_13 arg_14 arg_15 arg_16 arg_17 arg_18) (let ((obj:XTMMesh* (salloc))) (tfill! obj arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9 arg_10 arg_11 arg_12 arg_13 arg_14 arg_15 arg_16 arg_17 arg_18) (pref obj 0))))) XTMMesh_val_adhoc_42))
(bind-poly XTMMesh_val XTMMesh_val_adhoc_W1hUTU1lc2gsVkJPKixUZXh0dXJlKixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQsZmxvYXQsaTMyLGk2NCxWQU8qLFN0cmluZyosaTMyLFhUTUJvbmUqLGkzMixUZXh0dXJlKixUZXh0dXJlKixUZXh0dXJlKixUZXh0dXJlKl0 "")
(register-lib-func xtmgraphics-pipeline hcopy_adhoc_W1hUTU1lc2gqLFhUTU1lc2gqXQ [XTMMesh*,XTMMesh*]* 0 "" '(let ((hcopy_adhoc_43 (lambda (x:XTMMesh*) (let ((obj (halloc))) (if (not (null? (tref x 0))) (tset! obj 0 (hcopy:[VBO*,VBO*]* (tref x 0)))) (if (not (null? (tref x 1))) (tset! obj 1 (hcopy:[Texture*,Texture*]* (tref x 1)))) (tset! obj 2 (tref x 2)) (tset! obj 3 (tref x 3)) (tset! obj 4 (tref x 4)) (tset! obj 5 (tref x 5)) (tset! obj 6 (tref x 6)) (tset! obj 7 (tref x 7)) (tset! obj 8 (tref x 8)) (tset! obj 9 (tref x 9)) (if (not (null? (tref x 10))) (tset! obj 10 (hcopy:[VAO*,VAO*]* (tref x 10)))) (if (not (null? (tref x 11))) (tset! obj 11 (hcopy:[String*,String*]* (tref x 11)))) (tset! obj 12 (tref x 12)) (if (not (null? (tref x 13))) (tset! obj 13 (hcopy:[XTMBone*,XTMBone*]* (tref x 13)))) (tset! obj 14 (tref x 14)) (if (not (null? (tref x 15))) (tset! obj 15 (hcopy:[Texture*,Texture*]* (tref x 15)))) (if (not (null? (tref x 16))) (tset! obj 16 (hcopy:[Texture*,Texture*]* (tref x 16)))) (if (not (null? (tref x 17))) (tset! obj 17 (hcopy:[Texture*,Texture*]* (tref x 17)))) (if (not (null? (tref x 18))) (tset! obj 18 (hcopy:[Texture*,Texture*]* (tref x 18)))) obj)))) hcopy_adhoc_43))
(bind-poly hcopy hcopy_adhoc_W1hUTU1lc2gqLFhUTU1lc2gqXQ "")
(register-lib-func xtmgraphics-pipeline hfree_adhoc_W3ZvaWQsWFRNTWVzaCpd [void,XTMMesh*]* 0 "" '(let ((hfree_adhoc_44 (lambda (x:XTMMesh*) (if (not (null? (tref x 0))) (hfree:[void,VBO*]* (tref x 0))) (if (not (null? (tref x 1))) (hfree:[void,Texture*]* (tref x 1))) () () () () () () () () (if (not (null? (tref x 10))) (hfree:[void,VAO*]* (tref x 10))) (if (not (null? (tref x 11))) (hfree:[void,String*]* (tref x 11))) () (if (not (null? (tref x 13))) (hfree:[void,XTMBone*]* (tref x 13))) () (if (not (null? (tref x 15))) (hfree:[void,Texture*]* (tref x 15))) (if (not (null? (tref x 16))) (hfree:[void,Texture*]* (tref x 16))) (if (not (null? (tref x 17))) (hfree:[void,Texture*]* (tref x 17))) (if (not (null? (tref x 18))) (hfree:[void,Texture*]* (tref x 18))) (free x) void))) hfree_adhoc_44))
(bind-poly hfree hfree_adhoc_W3ZvaWQsWFRNTWVzaCpd "")
(register-lib-func xtmgraphics-pipeline zcopy_adhoc_W1hUTU1lc2gqLFhUTU1lc2gqLG16b25lKixtem9uZSpd [XTMMesh*,XTMMesh*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_45 (lambda (x:XTMMesh* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (if (not (null? (tref x 0))) (tset! obj 0 (zcopy:[VBO*,VBO*,mzone*,mzone*]* (tref x 0) fromz toz))) (if (not (null? (tref x 1))) (tset! obj 1 (zcopy:[Texture*,Texture*,mzone*,mzone*]* (tref x 1) fromz toz))) (if (llvm_ptr_in_zone fromz (cast (tref x 2) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 2) i8*) 4) (tset! obj 2 newptr)) (tset! obj 2 (tref x 2))) (if (llvm_ptr_in_zone fromz (cast (tref x 3) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 3) i8*) 4) (tset! obj 3 newptr)) (tset! obj 3 (tref x 3))) (if (llvm_ptr_in_zone fromz (cast (tref x 4) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 4) i8*) 4) (tset! obj 4 newptr)) (tset! obj 4 (tref x 4))) (if (llvm_ptr_in_zone fromz (cast (tref x 5) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 5) i8*) 4) (tset! obj 5 newptr)) (tset! obj 5 (tref x 5))) (begin (tset! obj 6 (tref x 6))) (begin (tset! obj 7 (tref x 7))) (begin (tset! obj 8 (tref x 8))) (begin (tset! obj 9 (tref x 9))) (if (not (null? (tref x 10))) (tset! obj 10 (zcopy:[VAO*,VAO*,mzone*,mzone*]* (tref x 10) fromz toz))) (if (not (null? (tref x 11))) (tset! obj 11 (zcopy:[String*,String*,mzone*,mzone*]* (tref x 11) fromz toz))) (begin (tset! obj 12 (tref x 12))) (if (not (null? (tref x 13))) (tset! obj 13 (zcopy:[XTMBone*,XTMBone*,mzone*,mzone*]* (tref x 13) fromz toz))) (begin (tset! obj 14 (tref x 14))) (if (not (null? (tref x 15))) (tset! obj 15 (zcopy:[Texture*,Texture*,mzone*,mzone*]* (tref x 15) fromz toz))) (if (not (null? (tref x 16))) (tset! obj 16 (zcopy:[Texture*,Texture*,mzone*,mzone*]* (tref x 16) fromz toz))) (if (not (null? (tref x 17))) (tset! obj 17 (zcopy:[Texture*,Texture*,mzone*,mzone*]* (tref x 17) fromz toz))) (if (not (null? (tref x 18))) (tset! obj 18 (zcopy:[Texture*,Texture*,mzone*,mzone*]* (tref x 18) fromz toz))) (pop_zone) obj)) x)))) zcopy_adhoc_45))
(bind-poly zcopy zcopy_adhoc_W1hUTU1lc2gqLFhUTU1lc2gqLG16b25lKixtem9uZSpd "")
(register-lib-func xtmgraphics-pipeline print_adhoc_W3ZvaWQsWFRNTWVzaCpd [void,XTMMesh*]* 0 "" '(let ((print_adhoc_46 (lambda (mesh) (if (null? mesh) (println "<XTMMesh:NULL>") (let ((name (tref mesh 11)) (texture (tref mesh 1)) (diffuse:float* (tref mesh 2)) (ambient:float* (tref mesh 3)) (specular:float* (tref mesh 4)) (emissive:float* (tref mesh 5)) (shininess:float (tref mesh 6)) (opacity:float (tref mesh 7)) (verts:i64 (tref mesh 9)) (bones:i32 (tref mesh 12)) (diffuse_tex:Texture* (tref mesh 15)) (specular_tex:Texture* (tref mesh 16)) (height_tex:Texture* (tref mesh 17)) (normal_tex:Texture* (tref mesh 18))) (printout "------ mesh ---------") (printout "\n name    : " name) (printout "\n texture : " texture) (printout "\n diffuse : ") (mprint diffuse 1 4) (printout " ambient : ") (mprint ambient 1 4) (printout " speculr : ") (mprint specular 1 4) (printout " emissiv : ") (mprint emissive 1 4) (printout " shine   : " shininess) (printout "\n opacity : " opacity) (printout "\n verts   : " verts) (printout "\n bones   : " bones) (printout "\n diff tex: " (if (null? diffuse_tex) #f #t)) (printout "\n spec tex: " (if (null? specular_tex) #f #t)) (printout "\n high tex: " (if (null? height_tex) #f #t)) (printout "\n norm tex: " (if (null? normal_tex) #f #t)) (println) void))))) print_adhoc_46))
(bind-poly print print_adhoc_W3ZvaWQsWFRNTWVzaCpd "")
(register-lib-func xtmgraphics-pipeline xtm_mesh_diffuse_adhoc_W3ZvaWQsWFRNTWVzaCosZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXRd [void,XTMMesh*,float,float,float,float]* 0 "" '(let ((xtm_mesh_diffuse_adhoc_47 (lambda (mesh:XTMMesh* r g b a) (let ((c (tref mesh 2))) (pfill! c r g b a) void)))) xtm_mesh_diffuse_adhoc_47))
(bind-poly xtm_mesh_diffuse xtm_mesh_diffuse_adhoc_W3ZvaWQsWFRNTWVzaCosZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXRd "")
(register-lib-func xtmgraphics-pipeline xtm_mesh_ambient_adhoc_W3ZvaWQsWFRNTWVzaCosZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXRd [void,XTMMesh*,float,float,float,float]* 0 "" '(let ((xtm_mesh_ambient_adhoc_48 (lambda (mesh:XTMMesh* r g b a) (let ((c (tref mesh 3))) (pfill! c r g b a) void)))) xtm_mesh_ambient_adhoc_48))
(bind-poly xtm_mesh_ambient xtm_mesh_ambient_adhoc_W3ZvaWQsWFRNTWVzaCosZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXRd "")
(register-lib-func xtmgraphics-pipeline xtm_mesh_specular_adhoc_W3ZvaWQsWFRNTWVzaCosZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXRd [void,XTMMesh*,float,float,float,float]* 0 "" '(let ((xtm_mesh_specular_adhoc_49 (lambda (mesh:XTMMesh* r g b a) (let ((c (tref mesh 4))) (pfill! c r g b a) void)))) xtm_mesh_specular_adhoc_49))
(bind-poly xtm_mesh_specular xtm_mesh_specular_adhoc_W3ZvaWQsWFRNTWVzaCosZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXRd "")
(register-lib-func xtmgraphics-pipeline xtm_mesh_emissive_adhoc_W3ZvaWQsWFRNTWVzaCosZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXRd [void,XTMMesh*,float,float,float,float]* 0 "" '(let ((xtm_mesh_emissive_adhoc_50 (lambda (mesh:XTMMesh* r g b a) (let ((c (tref mesh 5))) (pfill! c r g b a) void)))) xtm_mesh_emissive_adhoc_50))
(bind-poly xtm_mesh_emissive xtm_mesh_emissive_adhoc_W3ZvaWQsWFRNTWVzaCosZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXRd "")
(register-lib-func xtmgraphics-pipeline xtm_mesh_shininess_adhoc_W2Zsb2F0LFhUTU1lc2gqLGZsb2F0XQ [float,XTMMesh*,float]* 0 "" '(let ((xtm_mesh_shininess_adhoc_51 (lambda (mesh:XTMMesh* value) (tset! mesh 6 value)))) xtm_mesh_shininess_adhoc_51))
(bind-poly xtm_mesh_shininess xtm_mesh_shininess_adhoc_W2Zsb2F0LFhUTU1lc2gqLGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline xtm_mesh_opacity_adhoc_W2Zsb2F0LFhUTU1lc2gqLGZsb2F0XQ [float,XTMMesh*,float]* 0 "" '(let ((xtm_mesh_opacity_adhoc_52 (lambda (mesh:XTMMesh* value) (tset! mesh 7 value)))) xtm_mesh_opacity_adhoc_52))
(bind-poly xtm_mesh_opacity xtm_mesh_opacity_adhoc_W2Zsb2F0LFhUTU1lc2gqLGZsb2F0XQ "")
(register-lib-type xtmgraphics-pipeline XTMModel <String*,float*,XTMModel*,i32,XTMModel*,i32,XTMMesh*> "")
(register-lib-func xtmgraphics-pipeline XTMModel_adhoc_W1hUTU1vZGVsKixTdHJpbmcqLGZsb2F0KixYVE1Nb2RlbCosaTMyLFhUTU1vZGVsKixpMzIsWFRNTWVzaCpd [XTMModel*,String*,float*,XTMModel*,i32,XTMModel*,i32,XTMMesh*]* 0 "" '(let ((XTMModel_adhoc_53 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) obj)))) XTMModel_adhoc_53))
(bind-poly XTMModel XTMModel_adhoc_W1hUTU1vZGVsKixTdHJpbmcqLGZsb2F0KixYVE1Nb2RlbCosaTMyLFhUTU1vZGVsKixpMzIsWFRNTWVzaCpd "")
(register-lib-func xtmgraphics-pipeline XTMModel_z_adhoc_W1hUTU1vZGVsKixTdHJpbmcqLGZsb2F0KixYVE1Nb2RlbCosaTMyLFhUTU1vZGVsKixpMzIsWFRNTWVzaCpd [XTMModel*,String*,float*,XTMModel*,i32,XTMModel*,i32,XTMMesh*]* 0 "" '(let ((XTMModel_z_adhoc_54 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) obj)))) XTMModel_z_adhoc_54))
(bind-poly XTMModel_z XTMModel_z_adhoc_W1hUTU1vZGVsKixTdHJpbmcqLGZsb2F0KixYVE1Nb2RlbCosaTMyLFhUTU1vZGVsKixpMzIsWFRNTWVzaCpd "")
(register-lib-func xtmgraphics-pipeline XTMModel_h_adhoc_W1hUTU1vZGVsKixTdHJpbmcqLGZsb2F0KixYVE1Nb2RlbCosaTMyLFhUTU1vZGVsKixpMzIsWFRNTWVzaCpd [XTMModel*,String*,float*,XTMModel*,i32,XTMModel*,i32,XTMMesh*]* 0 "" '(let ((XTMModel_h_adhoc_55 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) obj)))) XTMModel_h_adhoc_55))
(bind-poly XTMModel_h XTMModel_h_adhoc_W1hUTU1vZGVsKixTdHJpbmcqLGZsb2F0KixYVE1Nb2RlbCosaTMyLFhUTU1vZGVsKixpMzIsWFRNTWVzaCpd "")
(register-lib-func xtmgraphics-pipeline XTMModel_val_adhoc_W1hUTU1vZGVsLFN0cmluZyosZmxvYXQqLFhUTU1vZGVsKixpMzIsWFRNTW9kZWwqLGkzMixYVE1NZXNoKl0 [XTMModel,String*,float*,XTMModel*,i32,XTMModel*,i32,XTMMesh*]* 0 "" '(let ((XTMModel_val_adhoc_56 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6) (let ((obj:XTMModel* (salloc))) (tfill! obj arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6) (pref obj 0))))) XTMModel_val_adhoc_56))
(bind-poly XTMModel_val XTMModel_val_adhoc_W1hUTU1vZGVsLFN0cmluZyosZmxvYXQqLFhUTU1vZGVsKixpMzIsWFRNTW9kZWwqLGkzMixYVE1NZXNoKl0 "")
(register-lib-func xtmgraphics-pipeline hcopy_adhoc_W1hUTU1vZGVsKixYVE1Nb2RlbCpd [XTMModel*,XTMModel*]* 0 "" '(let ((hcopy_adhoc_57 (lambda (x:XTMModel*) (let ((obj (halloc))) (if (not (null? (tref x 0))) (tset! obj 0 (hcopy:[String*,String*]* (tref x 0)))) (tset! obj 1 (tref x 1)) (if (not (null? (tref x 2))) (tset! obj 2 (hcopy_adhoc_57 (tref x 2)))) (tset! obj 3 (tref x 3)) (if (not (null? (tref x 4))) (tset! obj 4 (hcopy_adhoc_57 (tref x 4)))) (tset! obj 5 (tref x 5)) (if (not (null? (tref x 6))) (tset! obj 6 (hcopy:[XTMMesh*,XTMMesh*]* (tref x 6)))) obj)))) hcopy_adhoc_57))
(bind-poly hcopy hcopy_adhoc_W1hUTU1vZGVsKixYVE1Nb2RlbCpd "")
(register-lib-func xtmgraphics-pipeline hfree_adhoc_W3ZvaWQsWFRNTW9kZWwqXQ [void,XTMModel*]* 0 "" '(let ((hfree_adhoc_58 (lambda (x:XTMModel*) (if (not (null? (tref x 0))) (hfree:[void,String*]* (tref x 0))) () (if (not (null? (tref x 2))) (hfree_adhoc_58 (tref x 2))) () (if (not (null? (tref x 4))) (hfree_adhoc_58 (tref x 4))) () (if (not (null? (tref x 6))) (hfree:[void,XTMMesh*]* (tref x 6))) (free x) void))) hfree_adhoc_58))
(bind-poly hfree hfree_adhoc_W3ZvaWQsWFRNTW9kZWwqXQ "")
(register-lib-func xtmgraphics-pipeline zcopy_adhoc_W1hUTU1vZGVsKixYVE1Nb2RlbCosbXpvbmUqLG16b25lKl0 [XTMModel*,XTMModel*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_59 (lambda (x:XTMModel* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (if (not (null? (tref x 0))) (tset! obj 0 (zcopy:[String*,String*,mzone*,mzone*]* (tref x 0) fromz toz))) (if (llvm_ptr_in_zone fromz (cast (tref x 1) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 1) i8*) 4) (tset! obj 1 newptr)) (tset! obj 1 (tref x 1))) (if (not (null? (tref x 2))) (tset! obj 2 (zcopy_adhoc_59 (tref x 2) fromz toz))) (begin (tset! obj 3 (tref x 3))) (if (not (null? (tref x 4))) (tset! obj 4 (zcopy_adhoc_59 (tref x 4) fromz toz))) (begin (tset! obj 5 (tref x 5))) (if (not (null? (tref x 6))) (tset! obj 6 (zcopy:[XTMMesh*,XTMMesh*,mzone*,mzone*]* (tref x 6) fromz toz))) (pop_zone) obj)) x)))) zcopy_adhoc_59))
(bind-poly zcopy zcopy_adhoc_W1hUTU1vZGVsKixYVE1Nb2RlbCosbXpvbmUqLG16b25lKl0 "")
(register-lib-func xtmgraphics-pipeline print_xtmmodel_adhoc_W3ZvaWQsWFRNTW9kZWwqXQ [void,XTMModel*]* 0 "" '(let ((print_xtmmodel_adhoc_60 (lambda (model) (if (null? model) (println "<XTMModel:null>") (let ((i:i32 0) (name (tref model 0)) (parent (tref model 2)) (parent_name (if (null? parent) (Str "<null>") (tref parent 0))) (num_children (tref model 3)) (children (tref model 4)) (num_meshes (tref model 5)) (meshes (tref model 6))) (printout "\n======= model =========") (printout "\nname    : " name) (printout "\nparent  : " parent_name) (printout "\nchildren: " num_children) (printout "\nmeshes  : " num_meshes) (println) (dotimes (i num_meshes) (println (pref-ptr meshes i)) 1) (dotimes (i num_children) (print_xtmmodel_adhoc_60 (pref-ptr children i)) 1) void))))) print_xtmmodel_adhoc_60))
(bind-poly print_xtmmodel print_xtmmodel_adhoc_W3ZvaWQsWFRNTW9kZWwqXQ "")
(register-lib-func xtmgraphics-pipeline print_adhoc_W3ZvaWQsWFRNTW9kZWwqXQ [void,XTMModel*]* 0 "" '(let ((print_adhoc_61 (lambda (model) (print_xtmmodel model)))) print_adhoc_61))
(bind-poly print print_adhoc_W3ZvaWQsWFRNTW9kZWwqXQ "")
(register-lib-func xtmgraphics-pipeline xtm_model_child_adhoc_W1hUTU1vZGVsKixYVE1Nb2RlbCosaTMyXQ [XTMModel*,XTMModel*,i32]* 0 "" '(let ((xtm_model_child_adhoc_62 (lambda (model:XTMModel* idx:i32) (let ((num_children (tref model 3)) (models (tref model 4))) (if (< idx num_children) (pref-ptr models idx) null))))) xtm_model_child_adhoc_62))
(bind-poly xtm_model_child xtm_model_child_adhoc_W1hUTU1vZGVsKixYVE1Nb2RlbCosaTMyXQ "")
(register-lib-func xtmgraphics-pipeline xtm_model_mesh_adhoc_W1hUTU1lc2gqLFhUTU1vZGVsKixpMzJd [XTMMesh*,XTMModel*,i32]* 0 "" '(let ((xtm_model_mesh_adhoc_63 (lambda (model:XTMModel* idx:i32) (let ((num_meshes (tref model 5)) (meshes (tref model 6))) (if (< idx num_meshes) (pref-ptr meshes idx) null))))) xtm_model_mesh_adhoc_63))
(bind-poly xtm_model_mesh xtm_model_mesh_adhoc_W1hUTU1lc2gqLFhUTU1vZGVsKixpMzJd "")
(register-lib-func xtmgraphics-pipeline set_instance_matrices_adhoc_W3ZvaWQsWFRNTW9kZWwqLFZCTypd [void,XTMModel*,VBO*]* 0 "" '(let ((set_instance_matrices_adhoc_64 (lambda (model:XTMModel* vbo:VBO*) (let ((i 0) (num_children (tref model 3)) (children (tref model 4)) (num_meshes (tref model 5)) (meshes (tref model 6)) (mesh:XTMMesh* null) (vao:VAO* null)) (dotimes (i num_children) (set_instance_matrices_adhoc_64 (pref-ptr children i) vbo)) (dotimes (i num_meshes) (set! mesh (pref-ptr meshes i)) (set! vao (tref mesh 10)) (set_attribute vao vbo 4 16 #t)) void)))) set_instance_matrices_adhoc_64))
(bind-poly set_instance_matrices set_instance_matrices_adhoc_W3ZvaWQsWFRNTW9kZWwqLFZCTypd "")
(register-lib-func xtmgraphics-pipeline shader_set_grid_offsets_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGZsb2F0LGZsb2F0XQ [void,float*,float,float,float]* 0 "" '(let ((shader_set_grid_offsets_adhoc_65 (lambda (matrix:float* width:float height:float factor:float) (let ((xinc:float (/ factor width)) (yinc:float (/ factor height)) (i 0) (j 0)) (dotimes (i 5) (dotimes (j 5) (pset! matrix (+ (* (+ (* i 5) j) 2) 0) (+ (* -2.0000000000000000000 xinc) (* (i32tof i) xinc))) (pset! matrix (+ (* (+ (* i 5) j) 2) 1) (+ (* -2.0000000000000000000 xinc) (* (i32tof i) yinc))))) void)))) shader_set_grid_offsets_adhoc_65))
(bind-poly shader_set_grid_offsets shader_set_grid_offsets_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline shader_setup_convolution_filter_adhoc_W3ZvaWQsZmxvYXQqLFNoYWRlclByb2dyYW0qLGZsb2F0XQ [void,float*,ShaderProgram*,float]* 0 "" '(let ((shader_setup_convolution_filter_adhoc_66 (lambda (matrix:float* shader:ShaderProgram* offset) (shader_set_grid_offsets matrix 1.0000000000000000000 1.0000000000000000000 offset) (glUniform2fv (glGetUniformLocation (id shader) "texoffset") 25 matrix) (glUniform1i (glGetUniformLocation (id shader) "diffuseTexture") 1)))) shader_setup_convolution_filter_adhoc_66))
(bind-poly shader_setup_convolution_filter shader_setup_convolution_filter_adhoc_W3ZvaWQsZmxvYXQqLFNoYWRlclByb2dyYW0qLGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline shader_update_camera_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqLGZsb2F0Kl0 [void,ShaderProgram*,float*,float*]* 0 "" '(let ((shader_update_camera_adhoc_67 (lambda (shader:ShaderProgram* position target) (let ((direction:float* (salloc 8)) (tmp:float* (pref-ptr direction 4))) (vvsub position target 3 tmp) (vnormalise tmp 3 direction) (pset! direction 3 0.00000000000000000000) (glUniform4fv (glGetUniformLocation (id shader) "CameraPos") 1 position) (glUniform4fv (glGetUniformLocation (id shader) "CameraDir") 1 direction) void)))) shader_update_camera_adhoc_67))
(bind-poly shader_update_camera shader_update_camera_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqLGZsb2F0Kl0 "")
(register-lib-func xtmgraphics-pipeline shader_update_light_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqLGZsb2F0KixmbG9hdCxmbG9hdCxmbG9hdCosZmxvYXQqLGZsb2F0Kl0 [void,ShaderProgram*,float*,float*,float,float,float*,float*,float*]* 0 "" '(let ((shader_update_light_adhoc_68 (lambda (shader:ShaderProgram* position target angle power:float ambient diffuse specular) (glUniform1f (glGetUniformLocation (id shader) "ConstantAttenuation") 1.0000000000000000000) (glUniform1f (glGetUniformLocation (id shader) "LinearAttenuation") 0.00000000000000000000) (glUniform1f (glGetUniformLocation (id shader) "QuadraticAttenuation") 0.00000000000000000000) (glUniform1f (glGetUniformLocation (id shader) "SpotExponent") power) (glUniform1f (glGetUniformLocation (id shader) "SpotAngle") (- 1.0000000000000000000 (/ angle 180.00000000000000000))) (glUniform4fv (glGetUniformLocation (id shader) "LightPos") 1 position) (glUniform4fv (glGetUniformLocation (id shader) "LightAmbient") 1 ambient) (glUniform4fv (glGetUniformLocation (id shader) "LightSpecular") 1 specular) (glUniform4fv (glGetUniformLocation (id shader) "LightDiffuse") 1 diffuse) (let ((direction:float* (salloc 4)) (tmp:float* (salloc 4))) (vvsub target position 3 tmp) (vnormalise tmp 3 direction) (pset! direction 3 0.00000000000000000000) (glUniform4fv (glGetUniformLocation (id shader) "SpotDir") 1 direction)) void))) shader_update_light_adhoc_68))
(bind-poly shader_update_light shader_update_light_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqLGZsb2F0KixmbG9hdCxmbG9hdCxmbG9hdCosZmxvYXQqLGZsb2F0Kl0 "")
(register-lib-func xtmgraphics-pipeline shader_update_lights_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosaTMyLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0Kl0 [void,ShaderProgram*,i32,float*,float*,float*,float*,float*,float*,float*]* 0 "" '(let ((shader_update_lights_adhoc_69 (let ((i:i32 0) (ca:float* (alloc 5)) (la:float* (alloc 5)) (qa:float* (alloc 5)) (sa:float* (alloc 5)) (dir:float* (alloc (* 5 4))) (tmp:float* (alloc (* 5 4)))) (dotimes (i 5) (pset! ca i 1.0000000000000000000) (pset! la i 0.00000000000000000000) (pset! qa i 0.00000000000000000000)) (lambda (shader:ShaderProgram* numlights:i32 position target angle:float* power ambient diffuse specular) (if (> numlights 5) (set! numlights 5)) (dotimes (i numlights) (pset! sa i (- 1.0000000000000000000 (/ (pref angle i) 180.00000000000000000)))) (glUniform1i (glGetUniformLocation (id shader) "numLights") numlights) (glUniform1fv (glGetUniformLocation (id shader) "ConstantAttenuation") numlights ca) (glUniform1fv (glGetUniformLocation (id shader) "LinearAttenuation") numlights la) (glUniform1fv (glGetUniformLocation (id shader) "QuadraticAttenuation") numlights qa) (glUniform1fv (glGetUniformLocation (id shader) "SpotExponent") numlights power) (glUniform1fv (glGetUniformLocation (id shader) "SpotAngle") numlights sa) (glUniform4fv (glGetUniformLocation (id shader) "LightPos") numlights position) (glUniform4fv (glGetUniformLocation (id shader) "LightAmbient") numlights ambient) (glUniform4fv (glGetUniformLocation (id shader) "LightSpecular") numlights specular) (glUniform4fv (glGetUniformLocation (id shader) "LightDiffuse") numlights diffuse) (dotimes (i numlights) (vvsub (pref-ptr target (* i 4)) (pref-ptr position (* i 4)) 3 (pref-ptr tmp (* i 4))) (vnormalise (pref-ptr tmp (* i 4)) 3 (pref-ptr dir (* i 4))) (pset! (pref-ptr dir (* i 4)) 3 0.00000000000000000000)) (glUniform4fv (glGetUniformLocation (id shader) "SpotDir") numlights dir) void)))) shader_update_lights_adhoc_69))
(bind-poly shader_update_lights shader_update_lights_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosaTMyLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0Kl0 "")
(register-lib-func xtmgraphics-pipeline shader_update_matrices_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqLGZsb2F0KixmbG9hdCpd [void,ShaderProgram*,float*,float*,float*]* 0 "" '(let ((shader_update_matrices_adhoc_70 (lambda (shader:ShaderProgram* m v p) (let ((mv (salloc 48)) (mvp (pref-ptr mv 16)) (mn (pref-ptr mv 32))) (mmmul m v mv) (mtrans mv 4 4 mn) (minverse mn 4 mvp) (mat4_to_mat3 mvp mn) (mmmul mv p mvp) (glUniformMatrix4fv (glGetUniformLocation (id shader) "ModelMatrix") 1 GL_FALSE m) (glUniformMatrix4fv (glGetUniformLocation (id shader) "ViewMatrix") 1 GL_FALSE v) (glUniformMatrix4fv (glGetUniformLocation (id shader) "ProjectionMatrix") 1 GL_FALSE p) (glUniformMatrix3fv (glGetUniformLocation (id shader) "NormalMatrix") 1 GL_FALSE mn) (glUniformMatrix4fv (glGetUniformLocation (id shader) "ModelViewMatrix") 1 GL_FALSE mv) (glUniformMatrix4fv (glGetUniformLocation (id shader) "ModelViewProjectionMatrix") 1 GL_FALSE mvp) void)))) shader_update_matrices_adhoc_70))
(bind-poly shader_update_matrices shader_update_matrices_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqLGZsb2F0KixmbG9hdCpd "")
(register-lib-func xtmgraphics-pipeline shader_update_uvwmatrix_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqXQ [void,ShaderProgram*,float*]* 0 "" '(let ((shader_update_uvwmatrix_adhoc_71 (lambda (shader:ShaderProgram* uvmat:float*) (glUniformMatrix4fv (glGetUniformLocation (id shader) "UVMatrix") 1 GL_FALSE uvmat) void))) shader_update_uvwmatrix_adhoc_71))
(bind-poly shader_update_uvwmatrix shader_update_uvwmatrix_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqXQ "")
(register-lib-func xtmgraphics-pipeline shader_update_matrices_lv_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqXQ [void,ShaderProgram*,float*,float*,float*,float*]* 0 "" '(let ((shader_update_matrices_lv_adhoc_72 (let ((bias:float* (alloc 16))) (pfill! bias 0.50000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.50000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.50000000000000000000 0.00000000000000000000 0.50000000000000000000 0.50000000000000000000 0.50000000000000000000 1.0000000000000000000) (lambda (shader:ShaderProgram* m:float* v p:float* lv:float*) (let ((mlv:float* (salloc 16)) (mlvp:float* (salloc 16)) (mlvpb:float* (salloc 16))) (mmmul m lv mlv) (mmmul mlv p mlvp) (mmmul mlvp bias mlvpb) (glUniformMatrix4fv (glGetUniformLocation (id shader) "LightModelViewProjectionMatrix") 1 GL_FALSE mlvpb)) (let ((mv (salloc 48)) (mvp (pref-ptr mv 16)) (mn (pref-ptr mv 32))) (mmmul m v mv) (mtrans mv 4 4 mn) (minverse mn 4 mvp) (mat4_to_mat3 mvp mn) (mmmul mv p mvp) (glUniformMatrix4fv (glGetUniformLocation (id shader) "ModelMatrix") 1 GL_FALSE m) (glUniformMatrix4fv (glGetUniformLocation (id shader) "ViewMatrix") 1 GL_FALSE v) (glUniformMatrix4fv (glGetUniformLocation (id shader) "ProjectionMatrix") 1 GL_FALSE p) (glUniformMatrix3fv (glGetUniformLocation (id shader) "NormalMatrix") 1 GL_FALSE mn) (glUniformMatrix4fv (glGetUniformLocation (id shader) "ModelViewMatrix") 1 GL_FALSE mv) (glUniformMatrix4fv (glGetUniformLocation (id shader) "ModelViewProjectionMatrix") 1 GL_FALSE mvp) void))))) shader_update_matrices_lv_adhoc_72))
(bind-poly shader_update_matrices_lv shader_update_matrices_lv_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqXQ "")
(register-lib-func xtmgraphics-pipeline shader_update_matrices_lvs_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqLGZsb2F0KixmbG9hdCosaTMyLGZsb2F0Kl0 [void,ShaderProgram*,float*,float*,float*,i32,float*]* 0 "" '(let ((shader_update_matrices_lvs_adhoc_73 (let ((i:i32 0) (mlvpb:float* (alloc (* 10 16))) (bias:float* (alloc 16))) (pfill! bias 0.50000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.50000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.50000000000000000000 0.00000000000000000000 0.50000000000000000000 0.50000000000000000000 0.50000000000000000000 1.0000000000000000000) (lambda (shader:ShaderProgram* m:float* v p:float* lights:i32 lv:float*) (dotimes (i lights) (let ((mlv:float* (salloc 16)) (mlvp:float* (salloc 16))) (mmmul m (pref-ptr lv (* i 16)) mlv) (mmmul mlv p mlvp) (mmmul mlvp bias (pref-ptr mlvpb (* i 16))))) (glUniformMatrix4fv (glGetUniformLocation (id shader) "LightModelViewProjectionMatrix") lights GL_FALSE mlvpb) (let ((mv (salloc 48)) (mvp (pref-ptr mv 16)) (mn (pref-ptr mv 32))) (mmmul m v mv) (mtrans mv 4 4 mn) (minverse mn 4 mvp) (mat4_to_mat3 mvp mn) (mmmul mv p mvp) (glUniformMatrix4fv (glGetUniformLocation (id shader) "ModelMatrix") 1 GL_FALSE m) (glUniformMatrix4fv (glGetUniformLocation (id shader) "ViewMatrix") 1 GL_FALSE v) (glUniformMatrix4fv (glGetUniformLocation (id shader) "ProjectionMatrix") 1 GL_FALSE p) (glUniformMatrix3fv (glGetUniformLocation (id shader) "NormalMatrix") 1 GL_FALSE mn) (glUniformMatrix4fv (glGetUniformLocation (id shader) "ModelViewMatrix") 1 GL_FALSE mv) (glUniformMatrix4fv (glGetUniformLocation (id shader) "ModelViewProjectionMatrix") 1 GL_FALSE mvp) void))))) shader_update_matrices_lvs_adhoc_73))
(bind-poly shader_update_matrices_lvs shader_update_matrices_lvs_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqLGZsb2F0KixmbG9hdCosaTMyLGZsb2F0Kl0 "")
(register-lib-val xtmgraphics-pipeline XTM_EMIT_VCOLOUR i32 "")
(register-lib-func xtmgraphics-pipeline xtm_emit_vcolour_adhoc_W3ZvaWQsaTMyXQ [void,i32]* 0 "" '(let ((xtm_emit_vcolour_adhoc_74 (lambda (x) (set! XTM_EMIT_VCOLOUR x) void))) xtm_emit_vcolour_adhoc_74))
(bind-poly xtm_emit_vcolour xtm_emit_vcolour_adhoc_W3ZvaWQsaTMyXQ "")
(register-lib-func xtmgraphics-pipeline shader_update_material_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0XQ [void,ShaderProgram*,float*,float*,float*,float*,float]* 0 "" '(let ((shader_update_material_adhoc_75 (lambda (shader:ShaderProgram* ambient:float* diffuse:float* emissive:float* specular:float* shininess:float) (glUniform4fv (glGetUniformLocation (id shader) "MaterialAmbient") 1 ambient) (glUniform4fv (glGetUniformLocation (id shader) "MaterialDiffuse") 1 diffuse) (glUniform4fv (glGetUniformLocation (id shader) "MaterialSpecular") 1 specular) (glUniform4fv (glGetUniformLocation (id shader) "MaterialEmissive") 1 emissive) (glUniform1f (glGetUniformLocation (id shader) "MaterialShininess") shininess) (glUniform1i (glGetUniformLocation (id shader) "emitVColour") XTM_EMIT_VCOLOUR) void))) shader_update_material_adhoc_75))
(bind-poly shader_update_material shader_update_material_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline array_4_ptr_copy_adhoc_W3ZvaWQsfDQsZmxvYXR8LGZsb2F0Kl0 [void,|4,float|,float*]* 0 "" '(let ((array_4_ptr_copy_adhoc_76 (lambda (a:|4,float| data:float*) (pset! data 0 (aref a 0)) (pset! data 1 (aref a 1)) (pset! data 2 (aref a 2)) (pset! data 3 (aref a 3)) void))) array_4_ptr_copy_adhoc_76))
(bind-poly array_4_ptr_copy array_4_ptr_copy_adhoc_W3ZvaWQsfDQsZmxvYXR8LGZsb2F0Kl0 "")
(register-lib-func xtmgraphics-pipeline shader_update_material_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosfDQsZmxvYXR8LHw0LGZsb2F0fCx8NCxmbG9hdHwsfDQsZmxvYXR8LGZsb2F0XQ [void,ShaderProgram*,|4,float|,|4,float|,|4,float|,|4,float|,float]* 0 "" '(let ((shader_update_material_adhoc_77 (let ((data:float* (alloc (* 4 4))) (i:i32 0)) (lambda (shader:ShaderProgram* ambient:|4,float| diffuse:|4,float| emissive:|4,float| specular:|4,float| shininess:float) (array_4_ptr_copy ambient (pref-ptr data 0)) (array_4_ptr_copy diffuse (pref-ptr data 4)) (array_4_ptr_copy emissive (pref-ptr data 8)) (array_4_ptr_copy specular (pref-ptr data 12)) (glUniform4fv (glGetUniformLocation (id shader) "MaterialAmbient") 1 (pref-ptr data 0)) (glUniform4fv (glGetUniformLocation (id shader) "MaterialDiffuse") 1 (pref-ptr data 4)) (glUniform4fv (glGetUniformLocation (id shader) "MaterialEmissive") 1 (pref-ptr data 8)) (glUniform4fv (glGetUniformLocation (id shader) "MaterialSpecular") 1 (pref-ptr data 12)) (glUniform1f (glGetUniformLocation (id shader) "MaterialShininess") shininess) (glUniform1i (glGetUniformLocation (id shader) "emitVColour") XTM_EMIT_VCOLOUR) void)))) shader_update_material_adhoc_77))
(bind-poly shader_update_material shader_update_material_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosfDQsZmxvYXR8LHw0LGZsb2F0fCx8NCxmbG9hdHwsfDQsZmxvYXR8LGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline shader_update_material_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosfDQsZmxvYXR8LGZsb2F0XQ [void,ShaderProgram*,|4,float|,float]* 0 "" '(let ((shader_update_material_adhoc_78 (lambda (shader:ShaderProgram* diffuse:|4,float| shininess) (shader_update_material:[void,ShaderProgram*,|4,float|,|4,float|,|4,float|,|4,float|,float]* shader (array 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000) diffuse (array 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000) (array 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000) shininess)))) shader_update_material_adhoc_78))
(bind-poly shader_update_material shader_update_material_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosfDQsZmxvYXR8LGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline shader_update_bones_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosWFRNTWVzaCpd [void,ShaderProgram*,XTMMesh*]* 0 "" '(let ((shader_update_bones_adhoc_79 (let ((bonesdat:float* (alloc (* 16 4 20))) (i:i32 0)) (dotimes (i 20) (fill_identity_matrix (pref-ptr bonesdat (* 16 i)))) (lambda (shader:ShaderProgram* mesh:XTMMesh*) (let ((num_bones (tref mesh 12)) (bones (tref mesh 13)) (bone:XTMBone* null) (mymat:float* (alloc 16)) (transmat:float* null)) (fill_identity_matrix mymat) (translate_matrix mymat 2.0000000000000000000 2.0000000000000000000 2.0000000000000000000) (dotimes (i num_bones) (set! bone (pref-ptr bones i)) (set! transmat (tref bone 2)) (memcpy (cast mymat i8*) (cast transmat i8*) (* 16 4)) (if (= i -1) (begin (rotate_matrix mymat 50.000000000000000000 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000) (memcpy (cast (pref-ptr bonesdat (* 16 i)) i8*) (cast mymat i8*) (* 16 4))) (memcpy (cast (pref-ptr bonesdat (* 16 i)) i8*) (cast transmat i8*) (* 16 4)))) (glUniformMatrix4fv (glGetUniformLocation (id shader) "Bone") 20 GL_FALSE bonesdat) (gl_print_error "Error updating bones") void))))) shader_update_bones_adhoc_79))
(bind-poly shader_update_bones shader_update_bones_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosWFRNTWVzaCpd "")
(register-lib-val xtmgraphics-pipeline PROJECTION_TEXTURE_WEIGHT float "")
(register-lib-func xtmgraphics-pipeline shader_update_projection_texture_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosaTMyLFRleHR1cmUqXQ [void,ShaderProgram*,i32,Texture*]* 0 "" '(let ((shader_update_projection_texture_adhoc_80 (lambda (shader:ShaderProgram* textureUnit texture:Texture*) (if (or (null? texture) (< (id texture) 1)) (begin (glUniform1i (glGetUniformLocation (id shader) "isProjectionTextured") 0) (glUniform1i (glGetUniformLocation (id shader) "projectionTexture") textureUnit) (glUniform1f (glGetUniformLocation (id shader) "projectionTextureWeight") PROJECTION_TEXTURE_WEIGHT)) (begin (bind texture textureUnit) (glUniform1f (glGetUniformLocation (id shader) "projectionTextureWeight") PROJECTION_TEXTURE_WEIGHT) (glUniform1i (glGetUniformLocation (id shader) "isProjectionTextured") 1) (glUniform1i (glGetUniformLocation (id shader) "projectionTexture") textureUnit))) (gl_print_error "Error setting up projection texture") void))) shader_update_projection_texture_adhoc_80))
(bind-poly shader_update_projection_texture shader_update_projection_texture_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosaTMyLFRleHR1cmUqXQ "")
(register-lib-val xtmgraphics-pipeline ENV_MAP_WEIGHT float "")
(register-lib-func xtmgraphics-pipeline shader_update_envmap_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosaTMyLFRleHR1cmUqXQ [void,ShaderProgram*,i32,Texture*]* 0 "" '(let ((shader_update_envmap_adhoc_81 (lambda (shader:ShaderProgram* textureUnit texture:Texture*) (if (or (null? texture) (< (id texture) 1)) (begin (glUniform1i (glGetUniformLocation (id shader) "isEnvMapped") 0) (glUniform1f (glGetUniformLocation (id shader) "envMapWeight") ENV_MAP_WEIGHT) (glUniform1i (glGetUniformLocation (id shader) "envMap") textureUnit) void) (begin (bind_cube texture textureUnit) (glUniform1i (glGetUniformLocation (id shader) "isEnvMapped") 1) (glUniform1f (glGetUniformLocation (id shader) "envMapWeight") ENV_MAP_WEIGHT) (glUniform1i (glGetUniformLocation (id shader) "envMap") textureUnit) void)) (gl_print_error "Error setting up envmap!") void))) shader_update_envmap_adhoc_81))
(bind-poly shader_update_envmap shader_update_envmap_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosaTMyLFRleHR1cmUqXQ "")
(register-lib-func xtmgraphics-pipeline shader_prepare_draw_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSosaTMyLGkxXQ [void,ShaderProgram*,Texture*,i32,i1]* 0 "" '(let ((shader_prepare_draw_adhoc_82 (lambda (shader:ShaderProgram* tex:Texture* instances:i32 is_points:i1) (glUniform1i (glGetUniformLocation (id shader) "isPoints") (if is_points 1 0)) (glUniform1i (glGetUniformLocation (id shader) "isTextured") (if (or (null? tex) is_points) 0 1)) (glUniform1i (glGetUniformLocation (id shader) "diffuseTexture") 1) (glUniform1i (glGetUniformLocation (id shader) "instances") instances) (glUniform1i (glGetUniformLocation (id shader) "emitVColour") XTM_EMIT_VCOLOUR) void))) shader_prepare_draw_adhoc_82))
(bind-poly shader_prepare_draw shader_prepare_draw_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSosaTMyLGkxXQ "")
(register-lib-func xtmgraphics-pipeline shader_prepare_draw_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSpd [void,ShaderProgram*,Texture*]* 0 "" '(let ((shader_prepare_draw_adhoc_83 (lambda (shader:ShaderProgram* tex:Texture*) (shader_prepare_draw:[void,ShaderProgram*,Texture*,i32,i1]* shader tex 0 #f) void))) shader_prepare_draw_adhoc_83))
(bind-poly shader_prepare_draw shader_prepare_draw_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSpd "")
(register-lib-func xtmgraphics-pipeline shader_prepare_draw_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSosaTFd [void,ShaderProgram*,Texture*,i1]* 0 "" '(let ((shader_prepare_draw_adhoc_84 (lambda (shader:ShaderProgram* tex:Texture* pointTex:i1) (shader_prepare_draw:[void,ShaderProgram*,Texture*,i32,i1]* shader tex 0 pointTex) void))) shader_prepare_draw_adhoc_84))
(bind-poly shader_prepare_draw shader_prepare_draw_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSosaTFd "")
(register-lib-func xtmgraphics-pipeline shader_prepare_draw_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosaTMyXQ [void,ShaderProgram*,i32]* 0 "" '(let ((shader_prepare_draw_adhoc_85 (lambda (shader:ShaderProgram* instances:i32) (shader_prepare_draw:[void,ShaderProgram*,Texture*,i32,i1]* shader null instances #f) void))) shader_prepare_draw_adhoc_85))
(bind-poly shader_prepare_draw shader_prepare_draw_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosaTMyXQ "")
(register-lib-func xtmgraphics-pipeline shader_prepare_draw_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSpd [void,ShaderProgram*]* 0 "" '(let ((shader_prepare_draw_adhoc_86 (lambda (shader:ShaderProgram*) (shader_prepare_draw:[void,ShaderProgram*,Texture*,i32,i1]* shader null 0 #f) void))) shader_prepare_draw_adhoc_86))
(bind-poly shader_prepare_draw shader_prepare_draw_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSpd "")
(register-lib-func xtmgraphics-pipeline xtm_build_mesh_vbo_adhoc_W1ZCTyosVkFPKixmbG9hdCosaTY0XQ [VBO*,VAO*,float*,i64]* 0 "" '(let ((xtm_build_mesh_vbo_adhoc_87 (lambda (vao:VAO* verts:float* num_verts:i64) (let ((i:i64 0) (vert:float* null) (n1:float* (salloc 3)) (norm:float* (salloc 3)) (vbostride:i64 14) (vbodata:float* (zalloc (* num_verts vbostride)))) (dotimes (i num_verts) (set! vert (pref-ptr verts (* i 3))) (if (= (% i 3) 0) (if (> i (- num_verts 2)) (begin (pfill! norm 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000) 1) (begin (vvcross vert (pref-ptr vert 3) n1) (vsmul n1 -1.0000000000000000000 3 norm) 1)) 1) (pfill! (pref-ptr vbodata (* i vbostride)) (pref vert 0) (pref vert 1) (pref vert 2) 1.0000000000000000000) (pfill! (pref-ptr vbodata (+ 4 (* i vbostride))) (pref norm 0) (pref norm 1) (pref norm 2)) (if (= (% i 3) 0) (pfill! (pref-ptr vbodata (+ 7 (* i vbostride))) 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000) (if (= (% i 3) 1) (pfill! (pref-ptr vbodata (+ 7 (* i vbostride))) 0.50000000000000000000 1.0000000000000000000 0.00000000000000000000) (pfill! (pref-ptr vbodata (+ 7 (* i vbostride))) 1.0000000000000000000 0.00000000000000000000 0.00000000000000000000))) (pfill! (pref-ptr vbodata (+ 10 (* i vbostride))) 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000)) (let ((vbo (VBO vbodata (* num_verts vbostride) GL_STATIC_DRAW num_verts vbostride))) (set_attribute vao vbo 0 4 (i64toi32 vbostride) 0) (set_attribute vao vbo 1 3 (i64toi32 vbostride) 4) (set_attribute vao vbo 2 3 (i64toi32 vbostride) 7) (set_attribute vao vbo 3 4 (i64toi32 vbostride) 10) vbo))))) xtm_build_mesh_vbo_adhoc_87))
(bind-poly xtm_build_mesh_vbo xtm_build_mesh_vbo_adhoc_W1ZCTyosVkFPKixmbG9hdCosaTY0XQ "")
(register-lib-func xtmgraphics-pipeline xtm_make_model_adhoc_W1hUTU1vZGVsKixTdHJpbmcqLGZsb2F0KixpNjQsZmxvYXQsZmxvYXQsZmxvYXRd [XTMModel*,String*,float*,i64,float,float,float]* 0 "" '(let ((xtm_make_model_adhoc_88 (lambda (name:String* verts:float* num_verts:i64 r g b) (let ((mesh:XTMMesh* (alloc)) (node:XTMModel* (alloc)) (transmat:float* (alloc 16)) (vbostride:i32 14) (vbodata:float* null) (shininess:float 1.0000000000000000000) (opacity:float 1.0000000000000000000) (diffuse:float* (alloc 4)) (ambient:float* (alloc 4)) (specular:float* (alloc 4)) (emissive:float* (alloc 4)) (vao (VAO)) (vbo:VBO* (xtm_build_mesh_vbo vao verts num_verts))) (pfill! ambient 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000) (pfill! diffuse r g b 1.0000000000000000000) (pfill! specular 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000) (pfill! emissive 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000) (tfill! mesh vbo null diffuse ambient specular emissive shininess opacity GL_TRIANGLES num_verts vao name) (fill_identity_matrix transmat) (tfill! node name transmat null 0 null 1 mesh) node)))) xtm_make_model_adhoc_88))
(bind-poly xtm_make_model xtm_make_model_adhoc_W1hUTU1vZGVsKixTdHJpbmcqLGZsb2F0KixpNjQsZmxvYXQsZmxvYXQsZmxvYXRd "")
(register-lib-type xtmgraphics-pipeline xtm_camera <float*,float*,float*> "")
(register-lib-func xtmgraphics-pipeline xtm_camera_adhoc_W3h0bV9jYW1lcmEqLGZsb2F0KixmbG9hdCosZmxvYXQqXQ [xtm_camera*,float*,float*,float*]* 0 "" '(let ((xtm_camera_adhoc_89 (lambda (arg_0 arg_1 arg_2) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) obj)))) xtm_camera_adhoc_89))
(bind-poly xtm_camera xtm_camera_adhoc_W3h0bV9jYW1lcmEqLGZsb2F0KixmbG9hdCosZmxvYXQqXQ "")
(register-lib-func xtmgraphics-pipeline xtm_camera_z_adhoc_W3h0bV9jYW1lcmEqLGZsb2F0KixmbG9hdCosZmxvYXQqXQ [xtm_camera*,float*,float*,float*]* 0 "" '(let ((xtm_camera_z_adhoc_90 (lambda (arg_0 arg_1 arg_2) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) obj)))) xtm_camera_z_adhoc_90))
(bind-poly xtm_camera_z xtm_camera_z_adhoc_W3h0bV9jYW1lcmEqLGZsb2F0KixmbG9hdCosZmxvYXQqXQ "")
(register-lib-func xtmgraphics-pipeline xtm_camera_h_adhoc_W3h0bV9jYW1lcmEqLGZsb2F0KixmbG9hdCosZmxvYXQqXQ [xtm_camera*,float*,float*,float*]* 0 "" '(let ((xtm_camera_h_adhoc_91 (lambda (arg_0 arg_1 arg_2) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) obj)))) xtm_camera_h_adhoc_91))
(bind-poly xtm_camera_h xtm_camera_h_adhoc_W3h0bV9jYW1lcmEqLGZsb2F0KixmbG9hdCosZmxvYXQqXQ "")
(register-lib-func xtmgraphics-pipeline toString_adhoc_W1N0cmluZyoseHRtX2NhbWVyYSpd [String*,xtm_camera*]* 0 "" '(let ((toString_adhoc_92 (lambda (x:xtm_camera*) (if (null? x) (sprintout "<xtm_camera:null>") (sprintout "<xtm_camera:" (tref x 0) "," (tref x 1) "," (tref x 2) ">"))))) toString_adhoc_92))
(bind-poly toString toString_adhoc_W1N0cmluZyoseHRtX2NhbWVyYSpd "")
(register-lib-func xtmgraphics-pipeline print_adhoc_W3ZvaWQseHRtX2NhbWVyYSpd [void,xtm_camera*]* 0 "" '(let ((print_adhoc_93 (lambda (x:xtm_camera*) (if (null? x) (printout "<xtm_camera:null>") (printout "<xtm_camera:" (tref x 0) "," (tref x 1) "," (tref x 2) ">")) void))) print_adhoc_93))
(bind-poly print print_adhoc_W3ZvaWQseHRtX2NhbWVyYSpd "")
(register-lib-func xtmgraphics-pipeline xtm_camera_val_adhoc_W3h0bV9jYW1lcmEsZmxvYXQqLGZsb2F0KixmbG9hdCpd [xtm_camera,float*,float*,float*]* 0 "" '(let ((xtm_camera_val_adhoc_94 (lambda (arg_0 arg_1 arg_2) (let ((obj:xtm_camera* (salloc))) (tfill! obj arg_0 arg_1 arg_2) (pref obj 0))))) xtm_camera_val_adhoc_94))
(bind-poly xtm_camera_val xtm_camera_val_adhoc_W3h0bV9jYW1lcmEsZmxvYXQqLGZsb2F0KixmbG9hdCpd "")
(register-lib-func xtmgraphics-pipeline hcopy_adhoc_W3h0bV9jYW1lcmEqLHh0bV9jYW1lcmEqXQ [xtm_camera*,xtm_camera*]* 0 "" '(let ((hcopy_adhoc_95 (lambda (x:xtm_camera*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) (tset! obj 2 (tref x 2)) obj)))) hcopy_adhoc_95))
(bind-poly hcopy hcopy_adhoc_W3h0bV9jYW1lcmEqLHh0bV9jYW1lcmEqXQ "")
(register-lib-func xtmgraphics-pipeline hfree_adhoc_W3ZvaWQseHRtX2NhbWVyYSpd [void,xtm_camera*]* 0 "" '(let ((hfree_adhoc_96 (lambda (x:xtm_camera*) () () () (free x) void))) hfree_adhoc_96))
(bind-poly hfree hfree_adhoc_W3ZvaWQseHRtX2NhbWVyYSpd "")
(register-lib-func xtmgraphics-pipeline zcopy_adhoc_W3h0bV9jYW1lcmEqLHh0bV9jYW1lcmEqLG16b25lKixtem9uZSpd [xtm_camera*,xtm_camera*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_97 (lambda (x:xtm_camera* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (if (llvm_ptr_in_zone fromz (cast (tref x 0) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 0) i8*) 4) (tset! obj 0 newptr)) (tset! obj 0 (tref x 0))) (if (llvm_ptr_in_zone fromz (cast (tref x 1) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 1) i8*) 4) (tset! obj 1 newptr)) (tset! obj 1 (tref x 1))) (if (llvm_ptr_in_zone fromz (cast (tref x 2) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 2) i8*) 4) (tset! obj 2 newptr)) (tset! obj 2 (tref x 2))) (pop_zone) obj)) x)))) zcopy_adhoc_97))
(bind-poly zcopy zcopy_adhoc_W3h0bV9jYW1lcmEqLHh0bV9jYW1lcmEqLG16b25lKixtem9uZSpd "")
(register-lib-func xtmgraphics-pipeline xtm_get_camera_adhoc_W3h0bV9jYW1lcmEqXQ [xtm_camera*]* 0 "" '(let ((xtm_get_camera_adhoc_98 (let ((camera:xtm_camera* (zalloc)) (p:float* (zalloc 4)) (t:float* (zalloc 4)) (u:float* (zalloc 4))) (pfill! p 0.00000000000000000000 0.00000000000000000000 10.000000000000000000 1.0000000000000000000) (pfill! t 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000) (pfill! u 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000 0.00000000000000000000) (tfill! camera p t u) (lambda () camera)))) xtm_get_camera_adhoc_98))
(bind-poly xtm_get_camera xtm_get_camera_adhoc_W3h0bV9jYW1lcmEqXQ "")
(register-lib-func xtmgraphics-pipeline xtm_camera_pos_adhoc_W3ZvaWQsZmxvYXQsZmxvYXQsZmxvYXRd [void,float,float,float]* 0 "" '(let ((xtm_camera_pos_adhoc_99 (lambda (x y z) (pfill! (tref (xtm_get_camera) 0) x y z 1.0000000000000000000) void))) xtm_camera_pos_adhoc_99))
(bind-poly xtm_camera_pos xtm_camera_pos_adhoc_W3ZvaWQsZmxvYXQsZmxvYXQsZmxvYXRd "")
(register-lib-func xtmgraphics-pipeline xtm_camera_tgt_adhoc_W3ZvaWQsZmxvYXQsZmxvYXQsZmxvYXRd [void,float,float,float]* 0 "" '(let ((xtm_camera_tgt_adhoc_100 (lambda (x y z) (pfill! (tref (xtm_get_camera) 1) x y z 1.0000000000000000000) void))) xtm_camera_tgt_adhoc_100))
(bind-poly xtm_camera_tgt xtm_camera_tgt_adhoc_W3ZvaWQsZmxvYXQsZmxvYXQsZmxvYXRd "")
(register-lib-func xtmgraphics-pipeline xtm_camera_up_adhoc_W3ZvaWQsZmxvYXQsZmxvYXQsZmxvYXRd [void,float,float,float]* 0 "" '(let ((xtm_camera_up_adhoc_101 (lambda (x y z) (pfill! (tref (xtm_get_camera) 2) x y z 0.00000000000000000000) void))) xtm_camera_up_adhoc_101))
(bind-poly xtm_camera_up xtm_camera_up_adhoc_W3ZvaWQsZmxvYXQsZmxvYXQsZmxvYXRd "")
(register-lib-func xtmgraphics-pipeline xtm_camera_view_adhoc_W3ZvaWQsZmxvYXQqXQ [void,float*]* 0 "" '(let ((xtm_camera_view_adhoc_102 (let ((camera:xtm_camera* null)) (lambda (view:float*) (set! camera (xtm_get_camera)) (fill_view_matrix view (tref camera 0) (tref camera 1) (tref camera 2)) void)))) xtm_camera_view_adhoc_102))
(bind-poly xtm_camera_view xtm_camera_view_adhoc_W3ZvaWQsZmxvYXQqXQ "")
(register-lib-func xtmgraphics-pipeline xtm_camera_view_centred_adhoc_W3ZvaWQsZmxvYXQqXQ [void,float*]* 0 "" '(let ((xtm_camera_view_centred_adhoc_103 (let ((camera:xtm_camera* null) (centre:float* (alloc 3))) (pfill! centre 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000) (lambda (view:float*) (set! camera (xtm_get_camera)) (fill_view_matrix view centre (tref camera 1) (tref camera 2)) void)))) xtm_camera_view_centred_adhoc_103))
(bind-poly xtm_camera_view_centred xtm_camera_view_centred_adhoc_W3ZvaWQsZmxvYXQqXQ "")
(register-lib-func xtmgraphics-pipeline xtm_update_camera_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSpd [void,ShaderProgram*]* 0 "" '(let ((xtm_update_camera_adhoc_104 (lambda (shader) (shader_update_camera shader (tref (xtm_get_camera) 0) (tref (xtm_get_camera) 1)) void))) xtm_update_camera_adhoc_104))
(bind-poly xtm_update_camera xtm_update_camera_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSpd "")
(register-lib-type xtmgraphics-pipeline xtm_lights <float*,float*,float*,float*,float*,float*,float*,float*,float*,i32> "")
(register-lib-func xtmgraphics-pipeline xtm_lights_adhoc_W3h0bV9saWdodHMqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGkzMl0 [xtm_lights*,float*,float*,float*,float*,float*,float*,float*,float*,float*,i32]* 0 "" '(let ((xtm_lights_adhoc_105 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) (tset! obj 7 arg_7) (tset! obj 8 arg_8) (tset! obj 9 arg_9) obj)))) xtm_lights_adhoc_105))
(bind-poly xtm_lights xtm_lights_adhoc_W3h0bV9saWdodHMqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGkzMl0 "")
(register-lib-func xtmgraphics-pipeline xtm_lights_z_adhoc_W3h0bV9saWdodHMqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGkzMl0 [xtm_lights*,float*,float*,float*,float*,float*,float*,float*,float*,float*,i32]* 0 "" '(let ((xtm_lights_z_adhoc_106 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) (tset! obj 7 arg_7) (tset! obj 8 arg_8) (tset! obj 9 arg_9) obj)))) xtm_lights_z_adhoc_106))
(bind-poly xtm_lights_z xtm_lights_z_adhoc_W3h0bV9saWdodHMqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGkzMl0 "")
(register-lib-func xtmgraphics-pipeline xtm_lights_h_adhoc_W3h0bV9saWdodHMqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGkzMl0 [xtm_lights*,float*,float*,float*,float*,float*,float*,float*,float*,float*,i32]* 0 "" '(let ((xtm_lights_h_adhoc_107 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) (tset! obj 7 arg_7) (tset! obj 8 arg_8) (tset! obj 9 arg_9) obj)))) xtm_lights_h_adhoc_107))
(bind-poly xtm_lights_h xtm_lights_h_adhoc_W3h0bV9saWdodHMqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGkzMl0 "")
(register-lib-func xtmgraphics-pipeline toString_adhoc_W1N0cmluZyoseHRtX2xpZ2h0cypd [String*,xtm_lights*]* 0 "" '(let ((toString_adhoc_108 (lambda (x:xtm_lights*) (if (null? x) (sprintout "<xtm_lights:null>") (sprintout "<xtm_lights:" (tref x 0) "," (tref x 1) "," (tref x 2) "," (tref x 3) "," (tref x 4) "," (tref x 5) "," (tref x 6) "," (tref x 7) "," (tref x 8) "," (tref x 9) ">"))))) toString_adhoc_108))
(bind-poly toString toString_adhoc_W1N0cmluZyoseHRtX2xpZ2h0cypd "")
(register-lib-func xtmgraphics-pipeline print_adhoc_W3ZvaWQseHRtX2xpZ2h0cypd [void,xtm_lights*]* 0 "" '(let ((print_adhoc_109 (lambda (x:xtm_lights*) (if (null? x) (printout "<xtm_lights:null>") (printout "<xtm_lights:" (tref x 0) "," (tref x 1) "," (tref x 2) "," (tref x 3) "," (tref x 4) "," (tref x 5) "," (tref x 6) "," (tref x 7) "," (tref x 8) "," (tref x 9) ">")) void))) print_adhoc_109))
(bind-poly print print_adhoc_W3ZvaWQseHRtX2xpZ2h0cypd "")
(register-lib-func xtmgraphics-pipeline xtm_lights_val_adhoc_W3h0bV9saWdodHMsZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosaTMyXQ [xtm_lights,float*,float*,float*,float*,float*,float*,float*,float*,float*,i32]* 0 "" '(let ((xtm_lights_val_adhoc_110 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9) (let ((obj:xtm_lights* (salloc))) (tfill! obj arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9) (pref obj 0))))) xtm_lights_val_adhoc_110))
(bind-poly xtm_lights_val xtm_lights_val_adhoc_W3h0bV9saWdodHMsZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0KixmbG9hdCosaTMyXQ "")
(register-lib-func xtmgraphics-pipeline hcopy_adhoc_W3h0bV9saWdodHMqLHh0bV9saWdodHMqXQ [xtm_lights*,xtm_lights*]* 0 "" '(let ((hcopy_adhoc_111 (lambda (x:xtm_lights*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) (tset! obj 2 (tref x 2)) (tset! obj 3 (tref x 3)) (tset! obj 4 (tref x 4)) (tset! obj 5 (tref x 5)) (tset! obj 6 (tref x 6)) (tset! obj 7 (tref x 7)) (tset! obj 8 (tref x 8)) (tset! obj 9 (tref x 9)) obj)))) hcopy_adhoc_111))
(bind-poly hcopy hcopy_adhoc_W3h0bV9saWdodHMqLHh0bV9saWdodHMqXQ "")
(register-lib-func xtmgraphics-pipeline hfree_adhoc_W3ZvaWQseHRtX2xpZ2h0cypd [void,xtm_lights*]* 0 "" '(let ((hfree_adhoc_112 (lambda (x:xtm_lights*) () () () () () () () () () () (free x) void))) hfree_adhoc_112))
(bind-poly hfree hfree_adhoc_W3ZvaWQseHRtX2xpZ2h0cypd "")
(register-lib-func xtmgraphics-pipeline zcopy_adhoc_W3h0bV9saWdodHMqLHh0bV9saWdodHMqLG16b25lKixtem9uZSpd [xtm_lights*,xtm_lights*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_113 (lambda (x:xtm_lights* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (if (llvm_ptr_in_zone fromz (cast (tref x 0) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 0) i8*) 4) (tset! obj 0 newptr)) (tset! obj 0 (tref x 0))) (if (llvm_ptr_in_zone fromz (cast (tref x 1) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 1) i8*) 4) (tset! obj 1 newptr)) (tset! obj 1 (tref x 1))) (if (llvm_ptr_in_zone fromz (cast (tref x 2) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 2) i8*) 4) (tset! obj 2 newptr)) (tset! obj 2 (tref x 2))) (if (llvm_ptr_in_zone fromz (cast (tref x 3) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 3) i8*) 4) (tset! obj 3 newptr)) (tset! obj 3 (tref x 3))) (if (llvm_ptr_in_zone fromz (cast (tref x 4) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 4) i8*) 4) (tset! obj 4 newptr)) (tset! obj 4 (tref x 4))) (if (llvm_ptr_in_zone fromz (cast (tref x 5) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 5) i8*) 4) (tset! obj 5 newptr)) (tset! obj 5 (tref x 5))) (if (llvm_ptr_in_zone fromz (cast (tref x 6) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 6) i8*) 4) (tset! obj 6 newptr)) (tset! obj 6 (tref x 6))) (if (llvm_ptr_in_zone fromz (cast (tref x 7) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 7) i8*) 4) (tset! obj 7 newptr)) (tset! obj 7 (tref x 7))) (if (llvm_ptr_in_zone fromz (cast (tref x 8) i8*)) (let ((newptr:float* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 8) i8*) 4) (tset! obj 8 newptr)) (tset! obj 8 (tref x 8))) (begin (tset! obj 9 (tref x 9))) (pop_zone) obj)) x)))) zcopy_adhoc_113))
(bind-poly zcopy zcopy_adhoc_W3h0bV9saWdodHMqLHh0bV9saWdodHMqLG16b25lKixtem9uZSpd "")
(register-lib-func xtmgraphics-pipeline xtm_get_lights_adhoc_W3h0bV9saWdodHMqXQ [xtm_lights*]* 0 "" '(let ((xtm_get_lights_adhoc_114 (let ((i 0) (lights:xtm_lights* (zalloc)) (p:float* (zalloc (* 10 4))) (t:float* (zalloc (* 10 4))) (u:float* (zalloc (* 10 4))) (a:float* (zalloc (* 10 4))) (d:float* (zalloc (* 10 4))) (s:float* (zalloc (* 10 4))) (pows:float* (zalloc 10)) (angs:float* (zalloc 10)) (matrices:float* (zalloc (* 10 16)))) (dotimes (i 10) (pfill! (pref-ptr d (* i 4)) 1.0000000000000000000 0.80000000000000004441 0.50000000000000000000 1.0000000000000000000) (pfill! (pref-ptr s (* i 4)) 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000) (pfill! (pref-ptr a (* i 4)) 1.0000000000000000000 0.80000000000000004441 0.50000000000000000000 1.0000000000000000000) (pfill! (pref-ptr p (* i 4)) 1.0000000000000000000 10.000000000000000000 10.000000000000000000 1.0000000000000000000) (pfill! (pref-ptr t (* i 4)) 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000) (pfill! (pref-ptr u (* i 4)) 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000 0.00000000000000000000) (pfill! (pref-ptr angs i) 60.000000000000000000) (pfill! (pref-ptr pows i) 30.000000000000000000) (fill_view_matrix (pref-ptr matrices (* i 16)) (pref-ptr p (* i 4)) (pref-ptr t (* i 4)) (pref-ptr u (* i 4)))) (tfill! lights p t u a d s pows angs matrices 0) (lambda () lights)))) xtm_get_lights_adhoc_114))
(bind-poly xtm_get_lights xtm_get_lights_adhoc_W3h0bV9saWdodHMqXQ "")
(register-lib-func xtmgraphics-pipeline xtm_light_pos_adhoc_W3ZvaWQsaTMyLGZsb2F0LGZsb2F0LGZsb2F0XQ [void,i32,float,float,float]* 0 "" '(let ((xtm_light_pos_adhoc_115 (let ((lights:xtm_lights* null)) (lambda (light:i32 x y z) (set! lights (xtm_get_lights)) (if (> light (tref lights 9)) (tset! lights 9 light)) (set! light (- light 1)) (if (or (< light 0) (> light 9)) (begin (printf "No such light!\n") void) (let ((a:float* (pref-ptr (tref lights 0) (* light 4)))) (pfill! a x y z 1.0000000000000000000) void)))))) xtm_light_pos_adhoc_115))
(bind-poly xtm_light_pos xtm_light_pos_adhoc_W3ZvaWQsaTMyLGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline xtm_light_tgt_adhoc_W3ZvaWQsaTMyLGZsb2F0LGZsb2F0LGZsb2F0XQ [void,i32,float,float,float]* 0 "" '(let ((xtm_light_tgt_adhoc_116 (let ((lights:xtm_lights* null)) (lambda (light:i32 x y z) (set! lights (xtm_get_lights)) (if (> light (tref lights 9)) (tset! lights 9 light)) (set! light (- light 1)) (if (or (< light 0) (> light 9)) (begin (printf "No such light!\n") void) (let ((a:float* (pref-ptr (tref lights 1) (* light 4)))) (pfill! a x y z 1.0000000000000000000) void)))))) xtm_light_tgt_adhoc_116))
(bind-poly xtm_light_tgt xtm_light_tgt_adhoc_W3ZvaWQsaTMyLGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline xtm_light_up_adhoc_W3ZvaWQsaTMyLGZsb2F0LGZsb2F0LGZsb2F0XQ [void,i32,float,float,float]* 0 "" '(let ((xtm_light_up_adhoc_117 (let ((lights:xtm_lights* null)) (lambda (light:i32 x y z) (set! lights (xtm_get_lights)) (set! light (- light 1)) (if (or (< light 0) (> light 9)) (begin (printf "No such light!\n") void) (let ((a:float* (pref-ptr (tref lights 2) (* light 4)))) (pfill! a x y z 0.00000000000000000000) void)))))) xtm_light_up_adhoc_117))
(bind-poly xtm_light_up xtm_light_up_adhoc_W3ZvaWQsaTMyLGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline xtm_light_ambient_adhoc_W3ZvaWQsaTMyLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ [void,i32,float,float,float,float]* 0 "" '(let ((xtm_light_ambient_adhoc_118 (let ((lights:xtm_lights* null)) (lambda (light:i32 r g b a) (set! lights (xtm_get_lights)) (set! light (- light 1)) (if (or (< light 0) (> light 9)) (begin (printf "No such light!\n") void) (let ((arr:float* (pref-ptr (tref lights 3) (* light 4)))) (pfill! arr r g b a) void)))))) xtm_light_ambient_adhoc_118))
(bind-poly xtm_light_ambient xtm_light_ambient_adhoc_W3ZvaWQsaTMyLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline xtm_light_diffuse_adhoc_W3ZvaWQsaTMyLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ [void,i32,float,float,float,float]* 0 "" '(let ((xtm_light_diffuse_adhoc_119 (let ((lights:xtm_lights* null)) (lambda (light:i32 r g b a) (set! lights (xtm_get_lights)) (if (> light (tref lights 9)) (tset! lights 9 light)) (set! light (- light 1)) (if (or (< light 0) (> light 9)) (begin (printf "No such light!\n") void) (let ((arr:float* (pref-ptr (tref lights 4) (* light 4)))) (pfill! arr r g b a) void)))))) xtm_light_diffuse_adhoc_119))
(bind-poly xtm_light_diffuse xtm_light_diffuse_adhoc_W3ZvaWQsaTMyLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline xtm_light_specular_adhoc_W3ZvaWQsaTMyLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ [void,i32,float,float,float,float]* 0 "" '(let ((xtm_light_specular_adhoc_120 (let ((lights:xtm_lights* null)) (lambda (light:i32 r g b a) (set! lights (xtm_get_lights)) (set! light (- light 1)) (if (or (< light 0) (> light 9)) (begin (printf "No such light!\n") void) (let ((arr:float* (pref-ptr (tref lights 5) (* light 4)))) (pfill! arr r g b a) void)))))) xtm_light_specular_adhoc_120))
(bind-poly xtm_light_specular xtm_light_specular_adhoc_W3ZvaWQsaTMyLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline xtm_light_power_adhoc_W3ZvaWQsaTMyLGZsb2F0XQ [void,i32,float]* 0 "" '(let ((xtm_light_power_adhoc_121 (let ((lights:xtm_lights* null)) (lambda (light:i32 power) (set! lights (xtm_get_lights)) (if (> light (tref lights 9)) (tset! lights 9 light)) (set! light (- light 1)) (if (or (< light 0) (> light 9)) (begin (printf "No such light!\n") void) (begin (pset! (tref lights 6) light power) void)))))) xtm_light_power_adhoc_121))
(bind-poly xtm_light_power xtm_light_power_adhoc_W3ZvaWQsaTMyLGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline xtm_light_angle_adhoc_W3ZvaWQsaTMyLGZsb2F0XQ [void,i32,float]* 0 "" '(let ((xtm_light_angle_adhoc_122 (let ((lights:xtm_lights* null)) (lambda (light:i32 angle) (set! lights (xtm_get_lights)) (if (> light (tref lights 9)) (tset! lights 9 light)) (set! light (- light 1)) (if (or (< light 0) (> light 9)) (begin (printf "No such light!\n") void) (begin (pset! (tref lights 7) light angle) void)))))) xtm_light_angle_adhoc_122))
(bind-poly xtm_light_angle xtm_light_angle_adhoc_W3ZvaWQsaTMyLGZsb2F0XQ "")
(register-lib-func xtmgraphics-pipeline xtm_light_view_adhoc_W3ZvaWQsaTMyLGZsb2F0Kl0 [void,i32,float*]* 0 "" '(let ((xtm_light_view_adhoc_123 (let ((lights:xtm_lights* null)) (lambda (light:i32 view:float*) (set! lights (xtm_get_lights)) (set! light (- light 1)) (if (or (< light 0) (> light 9)) (begin (printf "No such light!\n") void) (begin (fill_view_matrix (pref-ptr (tref lights 8) (* light 16)) (pref-ptr (tref lights 0) (* light 4)) (pref-ptr (tref lights 1) (* light 4)) (pref-ptr (tref lights 2) (* light 4))) (if (not (null? view)) (mcopy (pref-ptr (tref lights 8) (* light 16)) 4 4 view)) void)))))) xtm_light_view_adhoc_123))
(bind-poly xtm_light_view xtm_light_view_adhoc_W3ZvaWQsaTMyLGZsb2F0Kl0 "")
(register-lib-func xtmgraphics-pipeline xtm_update_lights_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSpd [void,ShaderProgram*]* 0 "" '(let ((xtm_update_lights_adhoc_124 (lambda (shader:ShaderProgram*) (let ((lights (xtm_get_lights))) (shader_update_lights shader (tref lights 9) (tref lights 0) (tref lights 1) (tref lights 7) (tref lights 6) (tref lights 3) (tref lights 4) (tref lights 5)))))) xtm_update_lights_adhoc_124))
(bind-poly xtm_update_lights xtm_update_lights_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSpd "")
(register-lib-func xtmgraphics-pipeline xtm_update_matrices_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqLGZsb2F0KixmbG9hdCpd [void,ShaderProgram*,float*,float*,float*]* 0 "" '(let ((xtm_update_matrices_adhoc_125 (lambda (shader:ShaderProgram* model:float* view:float* projection:float*) (let ((lights (xtm_get_lights))) (shader_update_matrices_lvs shader model view projection (tref lights 9) (tref lights 8)))))) xtm_update_matrices_adhoc_125))
(bind-poly xtm_update_matrices xtm_update_matrices_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqLGZsb2F0KixmbG9hdCpd "")
(register-lib-func xtmgraphics-pipeline xtm_draw_vao_adhoc_W3ZvaWQsVkFPKixTaGFkZXJQcm9ncmFtKixmbG9hdCosZmxvYXQqLGZsb2F0KixpMzIsaTEsZmxvYXQsVGV4dHVyZSosaTFd [void,VAO*,ShaderProgram*,float*,float*,float*,i32,i1,float,Texture*,i1]* 0 "" '(let ((xtm_draw_vao_adhoc_126 (lambda (vao:VAO* shader m v p type update_data:i1 sz tex:Texture* blend:i1) (xtm_update_matrices shader m v p) (let ((vbo (get_vbo vao 0)) (elmts (i64toi32 (elements vbo)))) (if update_data (update vbo)) (if (= type GL_POINTS) (glPointSize sz) (glLineWidth 1.0000000000000000000)) (if blend (begin (glEnable GL_BLEND) (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA))) (if (not (null? tex)) (bind tex 1:i32)) (shader_prepare_draw shader tex 0 (if (= type GL_POINTS) #t #f)) (draw vao type 0 elmts 0) (if (not (null? tex)) (unbind tex 1:i32)) (if blend (glDisable GL_BLEND)) void)))) xtm_draw_vao_adhoc_126))
(bind-poly xtm_draw_vao xtm_draw_vao_adhoc_W3ZvaWQsVkFPKixTaGFkZXJQcm9ncmFtKixmbG9hdCosZmxvYXQqLGZsb2F0KixpMzIsaTEsZmxvYXQsVGV4dHVyZSosaTFd "")
(register-lib-func xtmgraphics-pipeline xtm_draw_vao_adhoc_W3ZvaWQsVkFPKixTaGFkZXJQcm9ncmFtKixmbG9hdCosZmxvYXQqLGZsb2F0KixpMzIsaTFd [void,VAO*,ShaderProgram*,float*,float*,float*,i32,i1]* 0 "" '(let ((xtm_draw_vao_adhoc_127 (lambda (vao:VAO* shader m v p type update) (xtm_draw_vao:[void,VAO*,ShaderProgram*,float*,float*,float*,i32,i1,float,Texture*,i1]* vao shader m v p type update 1.0000000000000000000 null 0)))) xtm_draw_vao_adhoc_127))
(bind-poly xtm_draw_vao xtm_draw_vao_adhoc_W3ZvaWQsVkFPKixTaGFkZXJQcm9ncmFtKixmbG9hdCosZmxvYXQqLGZsb2F0KixpMzIsaTFd "")
(register-lib-func xtmgraphics-pipeline xtm_draw_mesh_adhoc_W3ZvaWQsWFRNTWVzaCosU2hhZGVyUHJvZ3JhbSosaTMyLFZCTypd [void,XTMMesh*,ShaderProgram*,i32,VBO*]* 0 "" '(let ((xtm_draw_mesh_adhoc_128 (let ((vert:i32 0) (instancesvbo:VBO* null) (norm:i32 1) (uvw:i32 2) (color:i32 3)) (lambda (mesh:XTMMesh* shader:ShaderProgram* instances:i32 vbo:VBO*) (gl_print_error "Error BEFORE drawing XTMMesh!") (let ((vao (tref mesh 10)) (texture (tref mesh 1)) (diffuse (tref mesh 2)) (ambient (tref mesh 3)) (specular (tref mesh 4)) (emissive (tref mesh 5)) (shininess (tref mesh 6)) (facemode (tref mesh 8))) (if (not (null? ambient)) (glUniform4fv (glGetUniformLocation (id shader) "MaterialAmbient") 1 ambient)) (if (not (null? diffuse)) (glUniform4fv (glGetUniformLocation (id shader) "MaterialDiffuse") 1 diffuse)) (if (not (null? specular)) (glUniform4fv (glGetUniformLocation (id shader) "MaterialSpecular") 1 specular)) (if (not (null? specular)) (glUniform4fv (glGetUniformLocation (id shader) "MaterialEmissive") 1 emissive)) (glUniform1f (glGetUniformLocation (id shader) "MaterialShininess") shininess) (glUniform1i (glGetUniformLocation (id shader) "instances") instances) (glUniform1i (glGetUniformLocation (id shader) "emitVColour") XTM_EMIT_VCOLOUR) (glUniform1i (glGetUniformLocation (id shader) "isPoints") 0) (if (> (tref mesh 14) 0) (begin (shader_update_bones shader mesh))) (if (> (id texture) 0) (begin (bind texture 1) (glUniform1i (glGetUniformLocation (id shader) "isTextured") 1) (glUniform1i (glGetUniformLocation (id shader) "diffuseTexture") 1)) (begin (glUniform1i (glGetUniformLocation (id shader) "isTextured") 0))) (gl_print_error "Error setting uniforms! in xtm_draw_mesh") (set! instancesvbo (get_vbo vao 4)) (if (and (> instances 0) (<> (ptrtoi64 (cast instancesvbo i8*)) (ptrtoi64 (cast vbo i8*)))) (begin (set_attribute vao vbo 4 16 36 0 #t) (set_attribute vao vbo 8 4 36 16 #t) (set_attribute vao vbo 9 16 36 20 #t))) (gl_print_error "Error setting instance attrib in xtm_draw_mesh") (if (> instances 0) (draw vao facemode 0 (convert (tref mesh 9)) instances) (draw vao facemode 0 (convert (tref mesh 9)))) (unbind texture 1) (gl_print_error "Error drawing XTMMesh!") void))))) xtm_draw_mesh_adhoc_128))
(bind-poly xtm_draw_mesh xtm_draw_mesh_adhoc_W3ZvaWQsWFRNTWVzaCosU2hhZGVyUHJvZ3JhbSosaTMyLFZCTypd "")
(register-lib-func xtmgraphics-pipeline xtm_draw_mesh_adhoc_W3ZvaWQsWFRNTWVzaCosU2hhZGVyUHJvZ3JhbSpd [void,XTMMesh*,ShaderProgram*]* 0 "" '(let ((xtm_draw_mesh_adhoc_129 (lambda (mesh shader) (xtm_draw_mesh:[void,XTMMesh*,ShaderProgram*,i32,VBO*]* mesh shader 0 null)))) xtm_draw_mesh_adhoc_129))
(bind-poly xtm_draw_mesh xtm_draw_mesh_adhoc_W3ZvaWQsWFRNTWVzaCosU2hhZGVyUHJvZ3JhbSpd "")
(register-lib-func xtmgraphics-pipeline xtm_draw_model_adhoc_W3ZvaWQsWFRNTW9kZWwqLFNoYWRlclByb2dyYW0qLGZsb2F0KixmbG9hdCosZmxvYXQqLGkzMixWQk8qXQ [void,XTMModel*,ShaderProgram*,float*,float*,float*,i32,VBO*]* 0 "" '(let ((xtm_draw_model_adhoc_130 (lambda (node:XTMModel* shader:ShaderProgram* model:float* view:float* projection:float* instances:i32 vbo:VBO*) (gl_print_error "Error before drawing XTMModel") (let ((i:i32 0) (lights (xtm_get_lights)) (children (tref node 4)) (meshes (tref node 6)) (transmat:float* (tref node 1)) (m2:float* (salloc 16)) (m:float* (salloc 16))) (if (null? transmat) (begin (memcpy (cast m i8*) (cast model i8*) (* 4 16)) 1) (begin (mtrans transmat 4 4 m2) (mmmul m2 model m) 1)) (xtm_update_matrices shader m view projection) (dotimes (i (tref node 5)) (xtm_draw_mesh (pref-ptr meshes i) shader instances vbo)) (gl_print_error "Error drawing XTMMesh!") (dotimes (i (tref node 3)) (xtm_draw_model_adhoc_130 (pref-ptr children i) shader model view projection instances vbo)) (gl_print_error "Error drawing XTMModel!") void)))) xtm_draw_model_adhoc_130))
(bind-poly xtm_draw_model xtm_draw_model_adhoc_W3ZvaWQsWFRNTW9kZWwqLFNoYWRlclByb2dyYW0qLGZsb2F0KixmbG9hdCosZmxvYXQqLGkzMixWQk8qXQ "")
(register-lib-func xtmgraphics-pipeline xtm_draw_model_adhoc_W3ZvaWQsWFRNTW9kZWwqLFNoYWRlclByb2dyYW0qLGZsb2F0KixmbG9hdCosZmxvYXQqXQ [void,XTMModel*,ShaderProgram*,float*,float*,float*]* 0 "" '(let ((xtm_draw_model_adhoc_131 (lambda (node:XTMModel* shader:ShaderProgram* model:float* view:float* projection:float*) (xtm_draw_model:[void,XTMModel*,ShaderProgram*,float*,float*,float*,i32,VBO*]* node shader model view projection 0 null)))) xtm_draw_model_adhoc_131))
(bind-poly xtm_draw_model xtm_draw_model_adhoc_W3ZvaWQsWFRNTW9kZWwqLFNoYWRlclByb2dyYW0qLGZsb2F0KixmbG9hdCosZmxvYXQqXQ "")
(register-lib-val xtmgraphics-pipeline xtm_render_light_shader ShaderProgram* "")
(call-as-xtlang (set! xtm_render_light_shader (cast (malloc 8) ShaderProgram*)) void)
(register-lib-val xtmgraphics-pipeline xtm_render_simple_shader ShaderProgram* "")
(call-as-xtlang (set! xtm_render_simple_shader (cast (malloc 8) ShaderProgram*)) void)
(register-lib-val xtmgraphics-pipeline xtm_render_simple_bone_shader ShaderProgram* "")
(call-as-xtlang (set! xtm_render_simple_bone_shader (cast (malloc 8) ShaderProgram*)) void)
(register-lib-val xtmgraphics-pipeline xtm_render_quad_shader ShaderProgram* "")
(call-as-xtlang (set! xtm_render_quad_shader (cast (malloc 8) ShaderProgram*)) void)
(register-lib-val xtmgraphics-pipeline xtm_render_dof_shader ShaderProgram* "")
(call-as-xtlang (set! xtm_render_dof_shader (cast (malloc 8) ShaderProgram*)) void)
(register-lib-val xtmgraphics-pipeline xtm_render_skybox_shader ShaderProgram* "")
(call-as-xtlang (set! xtm_render_skybox_shader (cast (malloc 8) ShaderProgram*)) void)
(register-lib-val xtmgraphics-pipeline xtm_render_x i32 "")
(register-lib-val xtmgraphics-pipeline xtm_render_y i32 "")
(register-lib-val xtmgraphics-pipeline xtm_render_w i32 "")
(register-lib-val xtmgraphics-pipeline xtm_render_h i32 "")
(register-lib-val xtmgraphics-pipeline xtm_render_angle float "")
(register-lib-val xtmgraphics-pipeline xtm_render_near float "")
(register-lib-val xtmgraphics-pipeline xtm_render_far float "")
(register-lib-func xtmgraphics-pipeline xtm_project_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0Kl0 [void,float*,float*,float*,float*,float*]* 0 "" '(let ((xtm_project_adhoc_132 (lambda (pt_in:float* pt_out:float* model view projection) (let ((x (pref pt_in 0)) (y (pref pt_in 1)) (z (pref pt_in 2)) (vp_x (i32tof xtm_render_x)) (vp_y (i32tof xtm_render_y)) (vp_w (i32tof xtm_render_w)) (vp_h (i32tof xtm_render_h)) (vp_n xtm_render_near) (vp_f xtm_render_far) (mvp:float* (salloc 16)) (tmp:float* (salloc 16)) (vec:float* (salloc 4))) (mmmul model view tmp) (mmmul tmp projection mvp) (mmmul pt_in 1 4 mvp 4 4 vec) (if (<> (pref vec 3) 0.00000000000000000000) (vsmul vec (/ 1.0000000000000000000 (pref vec 3)) 4 pt_out)) (pset! pt_out 0 (* (+ 1.0000000000000000000 (pref pt_out 0)) 0.50000000000000000000 vp_w)) (pset! pt_out 1 (* (+ 1.0000000000000000000 (pref pt_out 1)) 0.50000000000000000000 vp_h)) (pset! pt_out 2 (+ (* (pref pt_out 2) (- vp_f vp_n)) vp_n)) void)))) xtm_project_adhoc_132))
(bind-poly xtm_project xtm_project_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0Kl0 "")
(register-lib-func xtmgraphics-pipeline xtm_unproject_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0Kl0 [void,float*,float*,float*,float*,float*]* 0 "" '(let ((xtm_unproject_adhoc_133 (lambda (pt_in:float* pt_out:float* model view projection) (let ((x (pref pt_in 0)) (y (pref pt_in 1)) (z (pref pt_in 2)) (vp_x (i32tof xtm_render_x)) (vp_y (i32tof xtm_render_y)) (vp_w (i32tof xtm_render_w)) (vp_h (i32tof xtm_render_h)) (tmp:float* (salloc 16)) (tmp2:float* (salloc 16)) (imvp:float* (salloc 16)) (vec:float* (salloc 4)) (out:float* (salloc 4))) (mmmul model view tmp) (mmmul tmp projection imvp) (invert_matrix imvp) (pset! vec 0 (- (* (/ x vp_w) 2.0000000000000000000) 1.0000000000000000000)) (pset! vec 1 (- (* (/ y vp_h) 2.0000000000000000000) 1.0000000000000000000)) (pset! vec 2 (- (* 2.0000000000000000000 z) 1.0000000000000000000)) (pset! vec 3 1.0000000000000000000) (mmmul vec 1 4 imvp 4 4 out) (if (= (pref out 3) 0.00000000000000000000) void (begin (vsmul out (/ 1.0000000000000000000 (pref out 3)) 4 pt_out) void)))))) xtm_unproject_adhoc_133))
(bind-poly xtm_unproject xtm_unproject_adhoc_W3ZvaWQsZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqLGZsb2F0Kl0 "")
(register-lib-func xtmgraphics-pipeline xtm_render_init_light_shader_adhoc_W3ZvaWQsaTgqLGk4Kl0 [void,i8*,i8*]* 0 "" '(let ((xtm_render_init_light_shader_adhoc_134 (lambda (a1 a2) (set! xtm_render_light_shader (ShaderProgram (Str "Light-Shader") (Str a1) (Str a2))) (gl_print_error "Error initializing light shader") void))) xtm_render_init_light_shader_adhoc_134))
(bind-poly xtm_render_init_light_shader xtm_render_init_light_shader_adhoc_W3ZvaWQsaTgqLGk4Kl0 "")
(register-lib-func xtmgraphics-pipeline xtm_render_init_simple_shader_adhoc_W3ZvaWQsaTgqLGk4Kl0 [void,i8*,i8*]* 0 "" '(let ((xtm_render_init_simple_shader_adhoc_135 (lambda (v:i8* f:i8*) (set! xtm_render_simple_shader (ShaderProgram (Str "Simple-Shader") (Str v) (Str f))) (gl_print_error "Error initializing simple shader") void))) xtm_render_init_simple_shader_adhoc_135))
(bind-poly xtm_render_init_simple_shader xtm_render_init_simple_shader_adhoc_W3ZvaWQsaTgqLGk4Kl0 "")
(register-lib-func xtmgraphics-pipeline xtm_render_init_simple_bone_shader_adhoc_W3ZvaWQsaTgqLGk4Kl0 [void,i8*,i8*]* 0 "" '(let ((xtm_render_init_simple_bone_shader_adhoc_136 (lambda (v:i8* f:i8*) (set! xtm_render_simple_bone_shader (ShaderProgram (Str "Simple-Bone-Shader") (Str v) (Str f))) (gl_print_error "Error initializing simple bone shader") void))) xtm_render_init_simple_bone_shader_adhoc_136))
(bind-poly xtm_render_init_simple_bone_shader xtm_render_init_simple_bone_shader_adhoc_W3ZvaWQsaTgqLGk4Kl0 "")
(register-lib-func xtmgraphics-pipeline xtm_render_init_quad_shader_adhoc_W3ZvaWQsaTgqLGk4Kl0 [void,i8*,i8*]* 0 "" '(let ((xtm_render_init_quad_shader_adhoc_137 (lambda (v:i8* f:i8*) (set! xtm_render_quad_shader (ShaderProgram (Str "QUAD-Shader") (Str v) (Str f))) (gl_print_error "Error initializing quad shader") void))) xtm_render_init_quad_shader_adhoc_137))
(bind-poly xtm_render_init_quad_shader xtm_render_init_quad_shader_adhoc_W3ZvaWQsaTgqLGk4Kl0 "")
(register-lib-func xtmgraphics-pipeline xtm_render_init_dof_shader_adhoc_W3ZvaWQsaTgqLGk4Kl0 [void,i8*,i8*]* 0 "" '(let ((xtm_render_init_dof_shader_adhoc_138 (lambda (v:i8* f:i8*) (set! xtm_render_dof_shader (ShaderProgram (Str "DOF-Shader") (Str v) (Str f))) (gl_print_error "Error initializing depth of field shader") void))) xtm_render_init_dof_shader_adhoc_138))
(bind-poly xtm_render_init_dof_shader xtm_render_init_dof_shader_adhoc_W3ZvaWQsaTgqLGk4Kl0 "")
(register-lib-func xtmgraphics-pipeline xtm_render_init_skybox_shader_adhoc_W3ZvaWQsaTgqLGk4Kl0 [void,i8*,i8*]* 0 "" '(let ((xtm_render_init_skybox_shader_adhoc_139 (lambda (v:i8* f:i8*) (set! xtm_render_skybox_shader (ShaderProgram (Str "SkyBox-Shader") (Str v) (Str f))) (gl_print_error "Error initializing skybox shader") void))) xtm_render_init_skybox_shader_adhoc_139))
(bind-poly xtm_render_init_skybox_shader xtm_render_init_skybox_shader_adhoc_W3ZvaWQsaTgqLGk4Kl0 "")
(register-lib-val xtmgraphics-pipeline DRAW_QUAD_VAO VAO* "")
(call-as-xtlang (set! DRAW_QUAD_VAO (cast (malloc 8) VAO*)) void)
(register-lib-val xtmgraphics-pipeline DRAW_QUAD_VBO VBO* "")
(call-as-xtlang (set! DRAW_QUAD_VBO (cast (malloc 8) VBO*)) void)
(register-lib-func xtmgraphics-pipeline draw_quad_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqXQ [void,ShaderProgram*,float*]* 0 "" '(let ((draw_quad_adhoc_140 (lambda (shader uvmat) (shader_update_uvwmatrix shader uvmat) (draw DRAW_QUAD_VAO GL_TRIANGLE_STRIP 0 4) (gl_print_error "Error drawing QUAD vao") void))) draw_quad_adhoc_140))
(bind-poly draw_quad draw_quad_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqXQ "")
(register-lib-func xtmgraphics-pipeline init_draw_quad_adhoc_W3ZvaWRd [void]* 0 "" '(let ((init_draw_quad_adhoc_141 (lambda () (let ((data:float* (alloc 28))) (pfill! data -1.0000000000000000000 -1.0000000000000000000 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 -1.0000000000000000000 1.0000000000000000000 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000 1.0000000000000000000 -1.0000000000000000000 0.00000000000000000000 1.0000000000000000000 1.0000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000 1.0000000000000000000 0.00000000000000000000 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000 0.00000000000000000000) (set! DRAW_QUAD_VAO (VAO)) (set! DRAW_QUAD_VBO (VBO data 28)) (set_attribute DRAW_QUAD_VAO DRAW_QUAD_VBO 0 4 7:i32 0) (set_attribute DRAW_QUAD_VAO DRAW_QUAD_VBO 2 3 7:i32 4) (gl_print_error "Error Initializing DRAW QUAD vao") void)))) init_draw_quad_adhoc_141))
(bind-poly init_draw_quad init_draw_quad_adhoc_W3ZvaWRd "")
(register-lib-func xtmgraphics-pipeline xtm_draw_tex_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSosZmxvYXQqLGkxLGZsb2F0LGZsb2F0KixmbG9hdCosZmxvYXQqXQ [void,ShaderProgram*,Texture*,float*,i1,float,float*,float*,float*]* 0 "" '(let ((xtm_draw_tex_adhoc_142 (let ((idmat:float* (alloc 16))) (fill_identity_matrix idmat) (lambda (shader:ShaderProgram* tex:Texture* uvmat push_new_data:i1 alpha m v p) (start shader) (shader_update_matrices shader m v p) (if push_new_data (update tex)) (bind tex 0) (glUniform1i (glGetUniformLocation (id shader) "tex1") 0) (if (< alpha 0.00000000000000000000) (begin (glUniform1i (glGetUniformLocation (id shader) "override_alpha") 0)) (begin (glUniform1i (glGetUniformLocation (id shader) "override_alpha") 1) (glUniform1f (glGetUniformLocation (id shader) "alpha") alpha))) (if (null? uvmat) (draw_quad shader idmat) (draw_quad shader uvmat)) (unbind tex 0) (stop shader) void)))) xtm_draw_tex_adhoc_142))
(bind-poly xtm_draw_tex xtm_draw_tex_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSosZmxvYXQqLGkxLGZsb2F0LGZsb2F0KixmbG9hdCosZmxvYXQqXQ "")
(register-lib-func xtmgraphics-pipeline xtm_draw_tex_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSosZmxvYXQqLGkxLGZsb2F0KixmbG9hdCosZmxvYXQqXQ [void,ShaderProgram*,Texture*,float*,i1,float*,float*,float*]* 0 "" '(let ((xtm_draw_tex_adhoc_143 (lambda (shader:ShaderProgram* tex:Texture* uvmat:float* update:i1 m v p) (xtm_draw_tex:[void,ShaderProgram*,Texture*,float*,i1,float,float*,float*,float*]* shader tex uvmat update -1.0000000000000000000 m v p) void))) xtm_draw_tex_adhoc_143))
(bind-poly xtm_draw_tex xtm_draw_tex_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSosZmxvYXQqLGkxLGZsb2F0KixmbG9hdCosZmxvYXQqXQ "")
(register-lib-func xtmgraphics-pipeline xtm_draw_tex_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSosZmxvYXQqLGZsb2F0LGZsb2F0KixmbG9hdCosZmxvYXQqXQ [void,ShaderProgram*,Texture*,float*,float,float*,float*,float*]* 0 "" '(let ((xtm_draw_tex_adhoc_144 (lambda (shader:ShaderProgram* tex:Texture* uvmat:float* alpha:float m v p) (xtm_draw_tex:[void,ShaderProgram*,Texture*,float*,i1,float,float*,float*,float*]* shader tex uvmat #f alpha m v p) void))) xtm_draw_tex_adhoc_144))
(bind-poly xtm_draw_tex xtm_draw_tex_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSosZmxvYXQqLGZsb2F0LGZsb2F0KixmbG9hdCosZmxvYXQqXQ "")
(register-lib-func xtmgraphics-pipeline xtm_draw_tex_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqXQ [void,ShaderProgram*,Texture*,float*,float*,float*,float*]* 0 "" '(let ((xtm_draw_tex_adhoc_145 (lambda (shader:ShaderProgram* tex:Texture* uvmat:float* m v p) (xtm_draw_tex:[void,ShaderProgram*,Texture*,float*,i1,float,float*,float*,float*]* shader tex uvmat #f -1.0000000000000000000 m v p) void))) xtm_draw_tex_adhoc_145))
(bind-poly xtm_draw_tex xtm_draw_tex_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSosZmxvYXQqLGZsb2F0KixmbG9hdCosZmxvYXQqXQ "")
(register-lib-func xtmgraphics-pipeline xtm_draw_tex_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSosaTEsZmxvYXQqLGZsb2F0KixmbG9hdCpd [void,ShaderProgram*,Texture*,i1,float*,float*,float*]* 0 "" '(let ((xtm_draw_tex_adhoc_146 (lambda (shader:ShaderProgram* tex:Texture* update:i1 m v p) (xtm_draw_tex:[void,ShaderProgram*,Texture*,float*,i1,float,float*,float*,float*]* shader tex null update -1.0000000000000000000 m v p) void))) xtm_draw_tex_adhoc_146))
(bind-poly xtm_draw_tex xtm_draw_tex_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSosaTEsZmxvYXQqLGZsb2F0KixmbG9hdCpd "")
(register-lib-func xtmgraphics-pipeline xtm_draw_tex_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSosZmxvYXQsZmxvYXQqLGZsb2F0KixmbG9hdCpd [void,ShaderProgram*,Texture*,float,float*,float*,float*]* 0 "" '(let ((xtm_draw_tex_adhoc_147 (lambda (shader:ShaderProgram* tex:Texture* alpha:float m v p) (xtm_draw_tex:[void,ShaderProgram*,Texture*,float*,i1,float,float*,float*,float*]* shader tex null #f alpha m v p) void))) xtm_draw_tex_adhoc_147))
(bind-poly xtm_draw_tex xtm_draw_tex_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSosZmxvYXQsZmxvYXQqLGZsb2F0KixmbG9hdCpd "")
(register-lib-func xtmgraphics-pipeline xtm_draw_tex_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSosZmxvYXQqLGZsb2F0KixmbG9hdCpd [void,ShaderProgram*,Texture*,float*,float*,float*]* 0 "" '(let ((xtm_draw_tex_adhoc_148 (lambda (shader:ShaderProgram* tex:Texture* m v p) (xtm_draw_tex:[void,ShaderProgram*,Texture*,float*,i1,float,float*,float*,float*]* shader tex null #f -1.0000000000000000000 m v p) void))) xtm_draw_tex_adhoc_148))
(bind-poly xtm_draw_tex xtm_draw_tex_adhoc_W3ZvaWQsU2hhZGVyUHJvZ3JhbSosVGV4dHVyZSosZmxvYXQqLGZsb2F0KixmbG9hdCpd "")
(register-lib-val xtmgraphics-pipeline XTM_BACKGROUND_COLOUR /4,float/ "")
(register-lib-val xtmgraphics-pipeline SKY_BOX_MODEL XTMModel* "")
(call-as-xtlang (set! SKY_BOX_MODEL (cast (malloc 8) XTMModel*)) void)
(register-lib-val xtmgraphics-pipeline SKY_BOX_TEXTURE Texture* "")
(call-as-xtlang (set! SKY_BOX_TEXTURE (cast (malloc 8) Texture*)) void)
(register-lib-val xtmgraphics-pipeline SKY_BOX i1 "")
(register-lib-val xtmgraphics-pipeline SKY_BOX_SCALE float "")
(register-lib-func xtmgraphics-pipeline xtm_skybox_init_adhoc_W3ZvaWQsWFRNTW9kZWwqLGkxLFN0cmluZyosU3RyaW5nKixTdHJpbmcqLFN0cmluZyosU3RyaW5nKixTdHJpbmcqXQ [void,XTMModel*,i1,String*,String*,String*,String*,String*,String*]* 0 "" '(let ((xtm_skybox_init_adhoc_149 (lambda (model flipped:i1 front:String* back:String* top:String* bottom:String* left:String* right:String*) (set! SKY_BOX_MODEL model) (set! SKY_BOX_TEXTURE (Texture)) (load_cube_data SKY_BOX_TEXTURE (i1toi32 flipped) front back top bottom left right) (update_cube SKY_BOX_TEXTURE) (set! SKY_BOX #t) void))) xtm_skybox_init_adhoc_149))
(bind-poly xtm_skybox_init xtm_skybox_init_adhoc_W3ZvaWQsWFRNTW9kZWwqLGkxLFN0cmluZyosU3RyaW5nKixTdHJpbmcqLFN0cmluZyosU3RyaW5nKixTdHJpbmcqXQ "")
(register-lib-func xtmgraphics-pipeline xtm_skybox_fx_adhoc_W3ZvaWQsRkJPKixmbG9hdCosZmxvYXQqLGZsb2F0Kl0 [void,FBO*,float*,float*,float*]* 0 "" '(let ((xtm_skybox_fx_adhoc_150 (lambda (fbo:FBO* model:float* view:float* projection:float*) (let ((shader xtm_render_skybox_shader) (camera_pos:float* (tref (xtm_get_camera) 0))) (bind fbo) (start shader) (fill_identity_matrix model) (fill_pos_scale_matrix model (pref camera_pos 0) (pref camera_pos 1) (pref camera_pos 2) SKY_BOX_SCALE SKY_BOX_SCALE SKY_BOX_SCALE) (shader_update_matrices shader model view projection) (bind_cube SKY_BOX_TEXTURE 0) (glUniform1i (glGetUniformLocation (id shader) "tex1") 0) (xtm_draw_model SKY_BOX_MODEL shader model view projection) (unbind_cube SKY_BOX_TEXTURE 0) (stop shader) (unbind fbo) void)))) xtm_skybox_fx_adhoc_150))
(bind-poly xtm_skybox_fx xtm_skybox_fx_adhoc_W3ZvaWQsRkJPKixmbG9hdCosZmxvYXQqLGZsb2F0Kl0 "")
(register-lib-val xtmgraphics-pipeline PROJECTION_TEXTURE Texture* "")
(call-as-xtlang (set! PROJECTION_TEXTURE (cast (malloc 8) Texture*)) void)
(register-lib-val xtmgraphics-pipeline PROJECTION_TEXTURE_ON i1 "")
(register-lib-func xtmgraphics-pipeline xtm_projection_texture_load_adhoc_W3ZvaWQsaTEsU3RyaW5nKl0 [void,i1,String*]* 0 "" '(let ((xtm_projection_texture_load_adhoc_151 (lambda (flipped:i1 filename:String*) (set! PROJECTION_TEXTURE (Texture)) (load_data PROJECTION_TEXTURE (i1toi32 flipped) filename) (update PROJECTION_TEXTURE) (set! PROJECTION_TEXTURE_ON #t) (set! PROJECTION_TEXTURE_WEIGHT 0.5:f) void))) xtm_projection_texture_load_adhoc_151))
(bind-poly xtm_projection_texture_load xtm_projection_texture_load_adhoc_W3ZvaWQsaTEsU3RyaW5nKl0 "")
(register-lib-func xtmgraphics-pipeline xtm_projecton_texture_weight_adhoc_W3ZvaWQsZmxvYXRd [void,float]* 0 "" '(let ((xtm_projecton_texture_weight_adhoc_152 (lambda (x) (set! PROJECTION_TEXTURE_WEIGHT x) void))) xtm_projecton_texture_weight_adhoc_152))
(bind-poly xtm_projecton_texture_weight xtm_projecton_texture_weight_adhoc_W3ZvaWQsZmxvYXRd "")
(register-lib-val xtmgraphics-pipeline ENV_MAP_TEXTURE Texture* "")
(call-as-xtlang (set! ENV_MAP_TEXTURE (cast (malloc 8) Texture*)) void)
(register-lib-val xtmgraphics-pipeline ENV_MAP i1 "")
(register-lib-func xtmgraphics-pipeline xtm_envmap_init_adhoc_W3ZvaWQsaTEsU3RyaW5nKixTdHJpbmcqLFN0cmluZyosU3RyaW5nKixTdHJpbmcqLFN0cmluZypd [void,i1,String*,String*,String*,String*,String*,String*]* 0 "" '(let ((xtm_envmap_init_adhoc_153 (lambda (flipped:i1 front:String* back:String* top:String* bottom:String* left:String* right:String*) (set! ENV_MAP_TEXTURE (Texture)) (load_cube_data ENV_MAP_TEXTURE (i1toi32 flipped) front back top bottom left right) (update_cube ENV_MAP_TEXTURE) (set! ENV_MAP #t) (set! ENV_MAP_WEIGHT 1.0:f) void))) xtm_envmap_init_adhoc_153))
(bind-poly xtm_envmap_init xtm_envmap_init_adhoc_W3ZvaWQsaTEsU3RyaW5nKixTdHJpbmcqLFN0cmluZyosU3RyaW5nKixTdHJpbmcqLFN0cmluZypd "")
(register-lib-func xtmgraphics-pipeline xtm_envmap_weight_adhoc_W3ZvaWQsZmxvYXRd [void,float]* 0 "" '(let ((xtm_envmap_weight_adhoc_154 (lambda (x) (set! ENV_MAP_WEIGHT x) void))) xtm_envmap_weight_adhoc_154))
(bind-poly xtm_envmap_weight xtm_envmap_weight_adhoc_W3ZvaWQsZmxvYXRd "")
(register-lib-func xtmgraphics-pipeline xtm_envmap_as_skybox_adhoc_W3ZvaWRd [void]* 0 "" '(let ((xtm_envmap_as_skybox_adhoc_155 (lambda () (set! ENV_MAP_TEXTURE SKY_BOX_TEXTURE) (set! ENV_MAP #t) void))) xtm_envmap_as_skybox_adhoc_155))
(bind-poly xtm_envmap_as_skybox xtm_envmap_as_skybox_adhoc_W3ZvaWRd "")
(register-lib-val xtmgraphics-pipeline XTM_DOF_ON i1 "")
(register-lib-val xtmgraphics-pipeline XTM_DOF_DEBUG i1 "")
(register-lib-val xtmgraphics-pipeline XTM_DOF_AUTOFOCUS i1 "")
(register-lib-val xtmgraphics-pipeline XTM_DOF_DISTANCE float "")
(register-lib-val xtmgraphics-pipeline XTM_DOF_X float "")
(register-lib-val xtmgraphics-pipeline XTM_DOF_Y float "")
(register-lib-val xtmgraphics-pipeline XTM_DOF_FSTOP float "")
(register-lib-val xtmgraphics-pipeline XTM_DOF_FLENGTH float "")
(register-lib-func xtmgraphics-pipeline xtm_dof_adhoc_W3ZvaWQsZmxvYXQsZmxvYXQsZmxvYXQsaTFd [void,float,float,float,i1]* 0 "" '(let ((xtm_dof_adhoc_156 (lambda (distance fstop flength debug) (set! XTM_DOF_ON #t) (set! XTM_DOF_DEBUG debug) (set! XTM_DOF_AUTOFOCUS #f) (set! XTM_DOF_DISTANCE distance) (set! XTM_DOF_FSTOP fstop) (set! XTM_DOF_FLENGTH flength) void))) xtm_dof_adhoc_156))
(bind-poly xtm_dof xtm_dof_adhoc_W3ZvaWQsZmxvYXQsZmxvYXQsZmxvYXQsaTFd "")
(register-lib-func xtmgraphics-pipeline xtm_dof_adhoc_W3ZvaWQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXQsaTFd [void,float,float,float,float,i1]* 0 "" '(let ((xtm_dof_adhoc_157 (lambda (x y fstop flength debug) (set! XTM_DOF_ON #t) (set! XTM_DOF_DEBUG debug) (set! XTM_DOF_AUTOFOCUS #t) (set! XTM_DOF_X x) (set! XTM_DOF_X y) (set! XTM_DOF_FSTOP fstop) (set! XTM_DOF_FLENGTH flength) void))) xtm_dof_adhoc_157))
(bind-poly xtm_dof xtm_dof_adhoc_W3ZvaWQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXQsaTFd "")
(register-lib-func xtmgraphics-pipeline xtm_dof_adhoc_W3ZvaWQsZmxvYXQsZmxvYXQsZmxvYXRd [void,float,float,float]* 0 "" '(let ((xtm_dof_adhoc_158 (lambda (distance fstop flength) (xtm_dof:[void,float,float,float,i1]* distance fstop flength #f)))) xtm_dof_adhoc_158))
(bind-poly xtm_dof xtm_dof_adhoc_W3ZvaWQsZmxvYXQsZmxvYXQsZmxvYXRd "")
(register-lib-func xtmgraphics-pipeline xtm_dof_adhoc_W3ZvaWQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXRd [void,float,float,float,float]* 0 "" '(let ((xtm_dof_adhoc_159 (lambda (x y fstop flength) (xtm_dof:[void,float,float,float,float,i1]* x y fstop flength #f)))) xtm_dof_adhoc_159))
(bind-poly xtm_dof xtm_dof_adhoc_W3ZvaWQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXRd "")
(register-lib-func xtmgraphics-pipeline xtm_dof_adhoc_W3ZvaWQsZmxvYXRd [void,float]* 0 "" '(let ((xtm_dof_adhoc_160 (lambda (distance) (xtm_dof:[void,float,float,float,i1]* distance 4.0000000000000000000 80.000000000000000000 #f)))) xtm_dof_adhoc_160))
(bind-poly xtm_dof xtm_dof_adhoc_W3ZvaWQsZmxvYXRd "")
(register-lib-func xtmgraphics-pipeline xtm_dof_adhoc_W3ZvaWQsZmxvYXQsZmxvYXRd [void,float,float]* 0 "" '(let ((xtm_dof_adhoc_161 (lambda (x y) (xtm_dof:[void,float,float,float,float,i1]* x y 4.0000000000000000000 80.000000000000000000 #f)))) xtm_dof_adhoc_161))
(bind-poly xtm_dof xtm_dof_adhoc_W3ZvaWQsZmxvYXQsZmxvYXRd "")
(register-lib-func xtmgraphics-pipeline xtm_dof_fx_adhoc_W3ZvaWQsRkJPKixpMzIsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXQsaTMyLGZsb2F0KixmbG9hdCosZmxvYXQqXQ [void,FBO*,i32,float,float,float,float,float,i32,float*,float*,float*]* 0 "" '(let ((xtm_dof_fx_adhoc_162 (let ((idmat:float* (alloc 16))) (fill_identity_matrix idmat) (lambda (fbo:FBO* autofocus focusx focusy fdepth flength fstop show_focus model view projection) (let ((shader xtm_render_dof_shader) (focuspt:float* (salloc 2))) (fill_identity_matrix idmat) (glDisable GL_DEPTH_TEST) (start shader) (shader_update_matrices shader model view projection) (bind (depth_tex fbo) 0) (glUniform1i (glGetUniformLocation (id shader) "bgl_DepthTexture") 0) (bind (colour_tex fbo) 2) (glUniform1i (glGetUniformLocation (id shader) "bgl_RenderedTexture") 2) (glUniform1f (glGetUniformLocation (id shader) "znear") xtm_render_near) (glUniform1f (glGetUniformLocation (id shader) "zfar") xtm_render_far) (glUniform1f (glGetUniformLocation (id shader) "focalDepth") fdepth) (glUniform1f (glGetUniformLocation (id shader) "focalLength") flength) (glUniform1f (glGetUniformLocation (id shader) "fstop") fstop) (glUniform1i (glGetUniformLocation (id shader) "showFocus") show_focus) (glUniform1i (glGetUniformLocation (id shader) "autofocus") autofocus) (glUniform1f (glGetUniformLocation (id shader) "bgl_RenderedTextureWidth") (i32tof xtm_render_w)) (glUniform1f (glGetUniformLocation (id shader) "bgl_RenderedTextureHeight") (i32tof xtm_render_h)) (pfill! focuspt focusx focusy) (glUniform2fv (glGetUniformLocation (id shader) "focus") 1 focuspt) (draw_quad shader idmat) (unbind (colour_tex fbo) 0) (unbind (depth_tex fbo) 2) (stop shader) void))))) xtm_dof_fx_adhoc_162))
(bind-poly xtm_dof_fx xtm_dof_fx_adhoc_W3ZvaWQsRkJPKixpMzIsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXQsaTMyLGZsb2F0KixmbG9hdCosZmxvYXQqXQ "")
(register-lib-func xtmgraphics-pipeline xtm_dof_fx_adhoc_W3ZvaWQsRkJPKixmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCosZmxvYXQqLGZsb2F0Kl0 [void,FBO*,float,float,float,float*,float*,float*]* 0 "" '(let ((xtm_dof_fx_adhoc_163 (lambda (fbo:FBO* fdepth flength fstop model view projection) (xtm_dof_fx:[void,FBO*,i32,float,float,float,float,float,i32,float*,float*,float*]* fbo 0 0.50000000000000000000 0.50000000000000000000 fdepth flength fstop 0 model view projection)))) xtm_dof_fx_adhoc_163))
(bind-poly xtm_dof_fx xtm_dof_fx_adhoc_W3ZvaWQsRkJPKixmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCosZmxvYXQqLGZsb2F0Kl0 "")
(register-lib-func xtmgraphics-pipeline xtm_dof_fx_adhoc_W3ZvaWQsRkJPKixmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCosZmxvYXQqLGZsb2F0Kl0 [void,FBO*,float,float,float,float,float*,float*,float*]* 0 "" '(let ((xtm_dof_fx_adhoc_164 (lambda (fbo:FBO* x y flength fstop model view projection) (xtm_dof_fx:[void,FBO*,i32,float,float,float,float,float,i32,float*,float*,float*]* fbo 1 x y 0.00000000000000000000 flength fstop 0 model view projection)))) xtm_dof_fx_adhoc_164))
(bind-poly xtm_dof_fx xtm_dof_fx_adhoc_W3ZvaWQsRkJPKixmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCosZmxvYXQqLGZsb2F0Kl0 "")
(register-lib-func xtmgraphics-pipeline xtm_dof_fx_adhoc_W3ZvaWQsRkJPKixmbG9hdCxmbG9hdCxmbG9hdCxpMzIsZmxvYXQqLGZsb2F0KixmbG9hdCpd [void,FBO*,float,float,float,i32,float*,float*,float*]* 0 "" '(let ((xtm_dof_fx_adhoc_165 (lambda (fbo:FBO* fdepth flength fstop show_depth model view projection) (xtm_dof_fx:[void,FBO*,i32,float,float,float,float,float,i32,float*,float*,float*]* fbo 0 0.50000000000000000000 0.50000000000000000000 fdepth flength fstop show_depth model view projection)))) xtm_dof_fx_adhoc_165))
(bind-poly xtm_dof_fx xtm_dof_fx_adhoc_W3ZvaWQsRkJPKixmbG9hdCxmbG9hdCxmbG9hdCxpMzIsZmxvYXQqLGZsb2F0KixmbG9hdCpd "")
(register-lib-func xtmgraphics-pipeline xtm_dof_fx_adhoc_W3ZvaWQsRkJPKixmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxpMzIsZmxvYXQqLGZsb2F0KixmbG9hdCpd [void,FBO*,float,float,float,float,i32,float*,float*,float*]* 0 "" '(let ((xtm_dof_fx_adhoc_166 (lambda (fbo:FBO* x y flength fstop show_depth model view projection) (xtm_dof_fx:[void,FBO*,i32,float,float,float,float,float,i32,float*,float*,float*]* fbo 1 x y 0.00000000000000000000 flength fstop show_depth model view projection)))) xtm_dof_fx_adhoc_166))
(bind-poly xtm_dof_fx xtm_dof_fx_adhoc_W3ZvaWQsRkJPKixmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxpMzIsZmxvYXQqLGZsb2F0KixmbG9hdCpd "")
(register-lib-func xtmgraphics-pipeline xtm_render_fbo_adhoc_W0ZCTypd [FBO*]* 0 "" '(let ((xtm_render_fbo_adhoc_167 (let ((fbo:FBO* null)) (lambda () (if (null? fbo) (set! fbo (FBO xtm_render_w xtm_render_h #t))) fbo)))) xtm_render_fbo_adhoc_167))
(bind-poly xtm_render_fbo xtm_render_fbo_adhoc_W0ZCTypd "")
(register-lib-func xtmgraphics-pipeline xtm_shadow_fbo_adhoc_W0ZCTypd [FBO*]* 0 "" '(let ((xtm_shadow_fbo_adhoc_168 (let ((fbo:FBO* null)) (lambda () (if (null? fbo) (set! fbo (FBO (ftoi32 (* 4.0000000000000000000 1024.0000000000000000)) (ftoi32 (* 4.0000000000000000000 1024.0000000000000000)) #t))) fbo)))) xtm_shadow_fbo_adhoc_168))
(bind-poly xtm_shadow_fbo xtm_shadow_fbo_adhoc_W0ZCTypd "")
(register-lib-func xtmgraphics-pipeline xtm_render_init_adhoc_W3ZvaWQsaTMyLGkzMl0 [void,i32,i32]* 0 "" '(let ((xtm_render_init_adhoc_169 (lambda (w h) (let ((quad-vert (sys_slurp_file "libs/external/gl/quad_v.glsl")) (quad-frag (sys_slurp_file "libs/external/gl/quad_f.glsl")) (dof-frag (sys_slurp_file "libs/external/gl/dof_f.glsl")) (simple-vert (sys_slurp_file "libs/external/gl/simple_v.glsl")) (simple-frag (sys_slurp_file "libs/external/gl/simple_f.glsl")) (lights-vert (sys_slurp_file "libs/external/gl/lights_v.glsl")) (lights-frag (sys_slurp_file "libs/external/gl/lights_f.glsl")) (skybox-vert (sys_slurp_file "libs/external/gl/sky_v.glsl")) (skybox-frag (sys_slurp_file "libs/external/gl/sky_f.glsl"))) (println "XTM RENDER SETUP on thread:" (thread_self)) (println 'init 'draw 'quad) (init_draw_quad) (println 'init 'QUAD 'shader) (xtm_render_init_quad_shader quad-vert quad-frag) (println 'init 'DOF 'shader) (xtm_render_init_dof_shader quad-vert dof-frag) (println 'init 'SIMPLE 'shader) (xtm_render_init_simple_shader simple-vert simple-frag) (println 'init 'LIGHT 'shader) (xtm_render_init_light_shader lights-vert lights-frag) (println 'init 'SKYBOX 'shader) (xtm_render_init_skybox_shader skybox-vert skybox-frag) (println 'all-shaders-initialized) (set! xtm_render_w w) (set! xtm_render_h h) (set! XTM_BACKGROUND_COLOUR (vector 0.7:float 0.69999999999999995559 0.69999999999999995559 1.0000000000000000000)) (xtm_shadow_fbo) (gl_print_error "error setting-up xtm_shadow_fbo") (xtm_render_fbo) (gl_print_error "error setting-up xtm_render_fbo") (printf "XTM Render Setup Complete\n") void)))) xtm_render_init_adhoc_169))
(bind-poly xtm_render_init xtm_render_init_adhoc_W3ZvaWQsaTMyLGkzMl0 "")
(bind-alias XTMRENDERCB [void,i64,ShaderProgram*,float*,float*,float*,i8*]* "")
(register-lib-func xtmgraphics-pipeline xtm_background_colour_adhoc_W3ZvaWQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXRd [void,float,float,float,float]* 0 "" '(let ((xtm_background_colour_adhoc_170 (lambda (r:float g b a) (set! XTM_BACKGROUND_COLOUR (vector r g b a)) void))) xtm_background_colour_adhoc_170))
(bind-poly xtm_background_colour xtm_background_colour_adhoc_W3ZvaWQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXRd "")
(register-lib-func xtmgraphics-pipeline xtm_background_colour_adhoc_W3ZvaWQsZmxvYXQsZmxvYXQsZmxvYXRd [void,float,float,float]* 0 "" '(let ((xtm_background_colour_adhoc_171 (lambda (r:float g b) (set! XTM_BACKGROUND_COLOUR (vector r g b 1.0000000000000000000)) void))) xtm_background_colour_adhoc_171))
(bind-poly xtm_background_colour xtm_background_colour_adhoc_W3ZvaWQsZmxvYXQsZmxvYXQsZmxvYXRd "")
(register-lib-func xtmgraphics-pipeline xtm_render_adhoc_W2k2NCxbdm9pZCxpNjQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqLGZsb2F0KixmbG9hdCosaTgqXSosW3ZvaWQsaTY0LFNoYWRlclByb2dyYW0qLGZsb2F0KixmbG9hdCosZmxvYXQqLGk4Kl0qLFt2b2lkLGk2NCxTaGFkZXJQcm9ncmFtKixmbG9hdCosZmxvYXQqLGZsb2F0KixpOCpdKixbdm9pZCxpNjQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqLGZsb2F0KixmbG9hdCosaTgqXSosaTgqXQ [i64,[void,i64,ShaderProgram*,float*,float*,float*,i8*]*,[void,i64,ShaderProgram*,float*,float*,float*,i8*]*,[void,i64,ShaderProgram*,float*,float*,float*,i8*]*,[void,i64,ShaderProgram*,float*,float*,float*,i8*]*,i8*]* 0 "" '(let ((xtm_render_adhoc_172 (let ((i:i32 0) (frame:i64 0) (lights:xtm_lights* (xtm_get_lights)) (camera:xtm_camera* (xtm_get_camera)) (activelights:i32 0) (framebufsize:float* (alloc 2)) (sh1:ShaderProgram* null) (sh2:ShaderProgram* null) (model:float* (alloc 16)) (view:float* (alloc 16)) (projection:float* (alloc 16)) (shadow_fbo:FBO* null) (render_fbo:FBO* null)) (lambda (pre:XTMRENDERCB opaque:XTMRENDERCB transparent:XTMRENDERCB post:XTMRENDERCB data:i8*) (set! shadow_fbo (xtm_shadow_fbo)) (set! render_fbo (xtm_render_fbo)) (glEnable GL_DEPTH_TEST) (fill_projection_matrix projection xtm_render_angle (/ (i32tof xtm_render_w) (i32tof xtm_render_h)) xtm_render_near xtm_render_far) (if (not (null? pre)) (begin (tset! (xtm_get_lights) 9 0) (xtm_camera_view view) (fill_identity_matrix model) (pre frame null model view projection data))) (gl_print_error "prerender gl error") (set! sh1 xtm_render_simple_shader) (start sh1) (bind shadow_fbo) (glClearColor 0.00000000000000000000 0.25000000000000000000 0.25000000000000000000 1.0000000000000000000) (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT)) (if (not (null? opaque)) (dotimes (i (tref lights 9)) (glViewport (* (% i 4) 1024) (* (ftoi32 (/ (i32tof i) 4.0000000000000000000)) 1024) 1024 1024) (glEnable GL_CULL_FACE) (glCullFace GL_FRONT) (fill_identity_matrix model) (xtm_light_view (+ i 1) view) (xtm_update_matrices sh1 model view projection) (opaque frame sh1 model view projection data) (gl_print_error) void)) (unbind shadow_fbo) (stop sh1) (bind render_fbo) (glClearColor (vref XTM_BACKGROUND_COLOUR 0) (vref XTM_BACKGROUND_COLOUR 1) (vref XTM_BACKGROUND_COLOUR 2) (vref XTM_BACKGROUND_COLOUR 3)) (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT)) (unbind render_fbo) (glViewport xtm_render_x xtm_render_y xtm_render_w xtm_render_h) (if SKY_BOX (begin (xtm_camera_view view) (fill_identity_matrix model) (xtm_skybox_fx render_fbo model view projection))) (set! activelights (tref lights 9)) (if (> activelights 5) (set! activelights (i64toi32 5))) (set! sh2 xtm_render_light_shader) (start sh2) (bind render_fbo) (bind (depth_tex shadow_fbo) 0) (glUniform1i (glGetUniformLocation (id sh2) "shadowMap") 0) (if ENV_MAP (shader_update_envmap sh2 2 ENV_MAP_TEXTURE) (shader_update_envmap sh2 2 null)) (if PROJECTION_TEXTURE_ON (shader_update_projection_texture sh2 3 PROJECTION_TEXTURE) (shader_update_projection_texture sh2 3 null)) (glViewport xtm_render_x xtm_render_y xtm_render_w xtm_render_h) (glDisable GL_CULL_FACE) (if (not (null? opaque)) (begin (fill_projection_matrix projection xtm_render_angle (/ (i32tof xtm_render_w) (i32tof xtm_render_h)) xtm_render_near xtm_render_far) (xtm_camera_view view) (fill_identity_matrix model) (xtm_update_lights sh2) (xtm_update_camera sh2) (xtm_update_matrices sh2 model view projection) (opaque frame sh2 model view projection data) void)) (gl_print_error "Error in XTM pipeline rendering Opaque!") (if (not (null? transparent)) (begin (fill_projection_matrix projection xtm_render_angle (/ (i32tof xtm_render_w) (i32tof xtm_render_h)) xtm_render_near xtm_render_far) (xtm_camera_view view) (fill_identity_matrix model) (xtm_update_lights sh2) (xtm_update_camera sh2) (xtm_update_matrices sh2 model view projection) (transparent frame sh2 model view projection data) void)) (gl_print_error "Error in XTM pipeline rendering Transparent!") (unbind (depth_tex shadow_fbo)) (unbind render_fbo) (stop sh2) (glDisable GL_DEPTH_TEST) (fill_identity_matrix model) (fill_identity_matrix view) (fill_orthographic_matrix projection -1.0000000000000000000 1.0000000000000000000 -1.0000000000000000000 1.0000000000000000000 -1.0000000000000000000 1.0000000000000000000) (bind render_fbo) (if XTM_DOF_ON (if XTM_DOF_AUTOFOCUS (xtm_dof_fx render_fbo XTM_DOF_X XTM_DOF_Y XTM_DOF_FLENGTH XTM_DOF_FSTOP (i1toi32 XTM_DOF_DEBUG) model view projection) (xtm_dof_fx render_fbo XTM_DOF_DISTANCE XTM_DOF_FLENGTH XTM_DOF_FSTOP (i1toi32 XTM_DOF_DEBUG) model view projection))) (unbind render_fbo) (if (null? post) (xtm_draw_tex xtm_render_quad_shader (colour_tex render_fbo) model view projection) (post frame xtm_render_quad_shader model view projection data)) (glEnable GL_DEPTH_TEST) (gl_print_error "Error in xtm_render") (set! XTM_DOF_ON #f) (set! frame (+ frame 1)))))) xtm_render_adhoc_172))
(bind-poly xtm_render xtm_render_adhoc_W2k2NCxbdm9pZCxpNjQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqLGZsb2F0KixmbG9hdCosaTgqXSosW3ZvaWQsaTY0LFNoYWRlclByb2dyYW0qLGZsb2F0KixmbG9hdCosZmxvYXQqLGk4Kl0qLFt2b2lkLGk2NCxTaGFkZXJQcm9ncmFtKixmbG9hdCosZmxvYXQqLGZsb2F0KixpOCpdKixbdm9pZCxpNjQsU2hhZGVyUHJvZ3JhbSosZmxvYXQqLGZsb2F0KixmbG9hdCosaTgqXSosaTgqXQ "")
(print-with-colors 'green 'default #t (print "done"))(print " in" (- (clock:clock) *xtmlib-graphics-pipeline-loaded-timer*) "seconds\n")
(define *xtmlib-graphics-pipeline-loaded-timer* (clock:clock))
(set! *impc:compiler:message:level* *impc:aot:prev-compiler-message-level*)
