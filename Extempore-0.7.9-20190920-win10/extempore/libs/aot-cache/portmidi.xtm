(sys:load "libs/base/base.xtm" 'quiet)
(sys:load-preload-check 'portmidi)
(define *xtmlib-portmidi-loaded* #t)
(define *xtmlib-portmidi-loaded-timer* (clock:clock))
(set! *impc:aot:prev-compiler-message-level* *impc:compiler:message:level*)
(set! *impc:compiler:message:level* 'low)

(print "Loading ")
(print-with-colors 'blue 'default #t (print 'xtmportmidi))
(print " library... ")
(bind-dylib libportmidi (list "portmidi.dll"))(if (not 'libportmidi) (begin (print-with-colors '*impc:compiler:pretty-print-error-color* 'default #t (print "Error")) (print ": could not load the " 'libportmidi " dynamic library - perhaps you can install it through your package manager?\n") (error "")))
(bind-external-dylib-declarations "libportmidi" "xtmportmidi")
(llvm:compile-ir (sys:slurp-file "libs/aot-cache/xtmportmidi.ll"));; flush the JIT-compilation queue, so we only get this file's code in the module
(impc:compiler:flush-jit-compilation-queue)
(register-lib-val xtmportmidi PM_DEFAULT_SYSEX_BUFFER_SIZE i32 "")
(bind-alias PmError i32 "")
(register-lib-val xtmportmidi pmNoError i32 "")
(register-lib-val xtmportmidi pmNoData i32 "")
(register-lib-val xtmportmidi pmGotData i32 "")
(register-lib-val xtmportmidi pmHostError i32 "")
(register-lib-val xtmportmidi pmInvalidDeviceId i32 "")
(register-lib-val xtmportmidi pmInsufficientMemory i32 "")
(register-lib-val xtmportmidi pmBufferTooSmall i32 "")
(register-lib-val xtmportmidi pmBufferOverflow i32 "")
(register-lib-val xtmportmidi pmBadPtr i32 "")
(register-lib-val xtmportmidi pmBadData i32 "")
(register-lib-val xtmportmidi pmInternalError i32 "")
(register-lib-val xtmportmidi pmBufferMaxSize i32 "")
(llvm:bind-symbol libportmidi "Pm_Initialize")
(bind-lib libportmidi Pm_Initialize [PmError]*)
(llvm:bind-symbol libportmidi "Pm_Terminate")
(bind-lib libportmidi Pm_Terminate [PmError]*)
(bind-alias PortMidiStream i8 "")
(bind-alias PmStream i8 "")
(llvm:bind-symbol libportmidi "Pm_HasHostError")
(bind-lib libportmidi Pm_HasHostError [i32,PortMidiStream*]*)
(llvm:bind-symbol libportmidi "Pm_GetErrorText")
(bind-lib libportmidi Pm_GetErrorText [i8*,PmError]*)
(llvm:bind-symbol libportmidi "Pm_GetHostErrorText")
(bind-lib libportmidi Pm_GetHostErrorText [void,i8*,i32]*)
(register-lib-val xtmportmidi HDRLENGTH i32 "")
(register-lib-val xtmportmidi PM_HOST_ERROR_MSG_LEN i32 "")
(bind-alias PmDeviceID i32 "")
(register-lib-val xtmportmidi pmNoDevice i32 "")
(register-lib-type xtmportmidi PmDeviceInfo <i32,i8*,i8*,i32,i32,i32> "")
(register-lib-func xtmportmidi PmDeviceInfo_adhoc_W1BtRGV2aWNlSW5mbyosaTMyLGk4KixpOCosaTMyLGkzMixpMzJd [PmDeviceInfo*,i32,i8*,i8*,i32,i32,i32]* 0 "" '(let ((PmDeviceInfo_adhoc_1 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) obj)))) PmDeviceInfo_adhoc_1))
(bind-poly PmDeviceInfo PmDeviceInfo_adhoc_W1BtRGV2aWNlSW5mbyosaTMyLGk4KixpOCosaTMyLGkzMixpMzJd "")
(register-lib-func xtmportmidi PmDeviceInfo_z_adhoc_W1BtRGV2aWNlSW5mbyosaTMyLGk4KixpOCosaTMyLGkzMixpMzJd [PmDeviceInfo*,i32,i8*,i8*,i32,i32,i32]* 0 "" '(let ((PmDeviceInfo_z_adhoc_2 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) obj)))) PmDeviceInfo_z_adhoc_2))
(bind-poly PmDeviceInfo_z PmDeviceInfo_z_adhoc_W1BtRGV2aWNlSW5mbyosaTMyLGk4KixpOCosaTMyLGkzMixpMzJd "")
(register-lib-func xtmportmidi PmDeviceInfo_h_adhoc_W1BtRGV2aWNlSW5mbyosaTMyLGk4KixpOCosaTMyLGkzMixpMzJd [PmDeviceInfo*,i32,i8*,i8*,i32,i32,i32]* 0 "" '(let ((PmDeviceInfo_h_adhoc_3 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) obj)))) PmDeviceInfo_h_adhoc_3))
(bind-poly PmDeviceInfo_h PmDeviceInfo_h_adhoc_W1BtRGV2aWNlSW5mbyosaTMyLGk4KixpOCosaTMyLGkzMixpMzJd "")
(register-lib-func xtmportmidi PmDeviceInfo_val_adhoc_W1BtRGV2aWNlSW5mbyxpMzIsaTgqLGk4KixpMzIsaTMyLGkzMl0 [PmDeviceInfo,i32,i8*,i8*,i32,i32,i32]* 0 "" '(let ((PmDeviceInfo_val_adhoc_4 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5) (let ((obj:PmDeviceInfo* (salloc))) (tfill! obj arg_0 arg_1 arg_2 arg_3 arg_4 arg_5) (pref obj 0))))) PmDeviceInfo_val_adhoc_4))
(bind-poly PmDeviceInfo_val PmDeviceInfo_val_adhoc_W1BtRGV2aWNlSW5mbyxpMzIsaTgqLGk4KixpMzIsaTMyLGkzMl0 "")
(register-lib-func xtmportmidi hcopy_adhoc_W1BtRGV2aWNlSW5mbyosUG1EZXZpY2VJbmZvKl0 [PmDeviceInfo*,PmDeviceInfo*]* 0 "" '(let ((hcopy_adhoc_5 (lambda (x:PmDeviceInfo*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) (tset! obj 2 (tref x 2)) (tset! obj 3 (tref x 3)) (tset! obj 4 (tref x 4)) (tset! obj 5 (tref x 5)) obj)))) hcopy_adhoc_5))
(bind-poly hcopy hcopy_adhoc_W1BtRGV2aWNlSW5mbyosUG1EZXZpY2VJbmZvKl0 "")
(register-lib-func xtmportmidi hfree_adhoc_W3ZvaWQsUG1EZXZpY2VJbmZvKl0 [void,PmDeviceInfo*]* 0 "" '(let ((hfree_adhoc_6 (lambda (x:PmDeviceInfo*) () () () () () () (free x) void))) hfree_adhoc_6))
(bind-poly hfree hfree_adhoc_W3ZvaWQsUG1EZXZpY2VJbmZvKl0 "")
(register-lib-func xtmportmidi zcopy_adhoc_W1BtRGV2aWNlSW5mbyosUG1EZXZpY2VJbmZvKixtem9uZSosbXpvbmUqXQ [PmDeviceInfo*,PmDeviceInfo*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_7 (lambda (x:PmDeviceInfo* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (if (llvm_ptr_in_zone fromz (cast (tref x 1) i8*)) (let ((newptr:i8* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 1) i8*) 1) (tset! obj 1 newptr)) (tset! obj 1 (tref x 1))) (if (llvm_ptr_in_zone fromz (cast (tref x 2) i8*)) (let ((newptr:i8* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 2) i8*) 1) (tset! obj 2 newptr)) (tset! obj 2 (tref x 2))) (begin (tset! obj 3 (tref x 3))) (begin (tset! obj 4 (tref x 4))) (begin (tset! obj 5 (tref x 5))) (pop_zone) obj)) x)))) zcopy_adhoc_7))
(bind-poly zcopy zcopy_adhoc_W1BtRGV2aWNlSW5mbyosUG1EZXZpY2VJbmZvKixtem9uZSosbXpvbmUqXQ "")
(register-lib-func xtmportmidi print_adhoc_W3ZvaWQsUG1EZXZpY2VJbmZvKl0 [void,PmDeviceInfo*]* 0 "" '(let ((print_adhoc_8 (lambda (pmdi:PmDeviceInfo*) (printf "<PmDeviceInfo: interface=%s name=%s I/O?:" (tref pmdi 1) (tref pmdi 2)) (if (= (tref pmdi 3) 1) (printf "I")) (if (= (tref pmdi 4) 1) (printf "O")) (printf ">") void))) print_adhoc_8))
(bind-poly print print_adhoc_W3ZvaWQsUG1EZXZpY2VJbmZvKl0 "")
(register-lib-func xtmportmidi toString_adhoc_W1N0cmluZyosUG1EZXZpY2VJbmZvKl0 [String*,PmDeviceInfo*]* 0 "" '(let ((toString_adhoc_9 (lambda (pmdi:PmDeviceInfo*) (let ((str:i8* (zalloc 256))) (sprintf str "<PmDeviceInfo: interface=%s name=%s I/O?:" (tref pmdi 1) (tref pmdi 2)) (if (= (tref pmdi 3) 1) (sprintf str "I")) (if (= (tref pmdi 4) 1) (sprintf str "O")) (sprintf str ">") (String str))))) toString_adhoc_9))
(bind-poly toString toString_adhoc_W1N0cmluZyosUG1EZXZpY2VJbmZvKl0 "")
(llvm:bind-symbol libportmidi "Pm_CountDevices")
(bind-lib libportmidi Pm_CountDevices [i32]*)
(llvm:bind-symbol libportmidi "Pm_GetDefaultInputDeviceID")
(bind-lib libportmidi Pm_GetDefaultInputDeviceID [PmDeviceID]*)
(llvm:bind-symbol libportmidi "Pm_GetDefaultOutputDeviceID")
(bind-lib libportmidi Pm_GetDefaultOutputDeviceID [PmDeviceID]*)
(register-lib-func xtmportmidi pm_default_in_adhoc_W2kzMl0 [i32]* 0 "an xtlang wrapper around Pm_GetDefaultInputDeviceID" '(let ((pm_default_in_adhoc_10 (lambda () (Pm_GetDefaultInputDeviceID)))) pm_default_in_adhoc_10))
(bind-poly pm_default_in pm_default_in_adhoc_W2kzMl0 "")
(register-lib-func xtmportmidi pm_default_out_adhoc_W2kzMl0 [i32]* 0 "an xtlang wrapper around Pm_GetDefaultOutputDeviceID" '(let ((pm_default_out_adhoc_11 (lambda () (Pm_GetDefaultOutputDeviceID)))) pm_default_out_adhoc_11))
(bind-poly pm_default_out pm_default_out_adhoc_W2kzMl0 "")
(bind-alias PmTimestamp i32 "")
(bind-alias PmTimeProcPtr [i32,i8*]* "")
(register-lib-func xtmportmidi PmBefore_adhoc_W2kxLGkzMixpMzJd [i1,i32,i32]* 0 "" '(let ((PmBefore_adhoc_12 (lambda (t1:PmTimestamp t2:PmTimestamp) (< t1 t2)))) PmBefore_adhoc_12))
(bind-poly PmBefore PmBefore_adhoc_W2kxLGkzMixpMzJd "")
(llvm:bind-symbol libportmidi "Pm_GetDeviceInfo")
(bind-lib libportmidi Pm_GetDeviceInfo [PmDeviceInfo*,PmDeviceID]*)
(llvm:bind-symbol libportmidi "Pm_OpenInput")
(bind-lib libportmidi Pm_OpenInput [PmError,PortMidiStream**,PmDeviceID,i8*,i32,PmTimeProcPtr,i8*]*)
(llvm:bind-symbol libportmidi "Pm_OpenOutput")
(bind-lib libportmidi Pm_OpenOutput [PmError,PortMidiStream**,PmDeviceID,i8*,i32,PmTimeProcPtr,i8*,i32]*)
(register-lib-val xtmportmidi PM_FILT_ACTIVE i32 "")
(call-as-xtlang (set! PM_FILT_ACTIVE (convert (<< 1 14) i32)) void)
(register-lib-val xtmportmidi PM_FILT_SYSEX i32 "")
(call-as-xtlang (set! PM_FILT_SYSEX (convert (<< 1 0) i32)) void)
(register-lib-val xtmportmidi PM_FILT_CLOCK i32 "")
(call-as-xtlang (set! PM_FILT_CLOCK (convert (<< 1 8) i32)) void)
(register-lib-val xtmportmidi PM_FILT_PLAY i32 "")
(call-as-xtlang (set! PM_FILT_PLAY (convert (+ (<< 1 10) (<< 1 12) (<< 1 11)) i32)) void)
(register-lib-val xtmportmidi PM_FILT_TICK i32 "")
(call-as-xtlang (set! PM_FILT_TICK (convert (<< 1 9) i32)) void)
(register-lib-val xtmportmidi PM_FILT_FD i32 "")
(call-as-xtlang (set! PM_FILT_FD (convert (<< 1 13) i32)) void)
(register-lib-val xtmportmidi PM_FILT_UNDEFINED i32 "")
(call-as-xtlang (set! PM_FILT_UNDEFINED (convert PM_FILT_FD i32)) void)
(register-lib-val xtmportmidi PM_FILT_RESET i32 "")
(call-as-xtlang (set! PM_FILT_RESET (convert (<< 1 15) i32)) void)
(register-lib-val xtmportmidi PM_FILT_REALTIME i32 "")
(call-as-xtlang (set! PM_FILT_REALTIME (convert (+ PM_FILT_ACTIVE PM_FILT_SYSEX PM_FILT_CLOCK PM_FILT_PLAY PM_FILT_UNDEFINED PM_FILT_RESET PM_FILT_TICK) i32)) void)
(register-lib-val xtmportmidi PM_FILT_NOTE i32 "")
(call-as-xtlang (set! PM_FILT_NOTE (convert (+ (<< 1 25) (<< 1 24)) i32)) void)
(register-lib-val xtmportmidi PM_FILT_CHANNEL_AFTERTOUCH i32 "")
(call-as-xtlang (set! PM_FILT_CHANNEL_AFTERTOUCH (convert (<< 1 29) i32)) void)
(register-lib-val xtmportmidi PM_FILT_POLY_AFTERTOUCH i32 "")
(call-as-xtlang (set! PM_FILT_POLY_AFTERTOUCH (convert (<< 1 26) i32)) void)
(register-lib-val xtmportmidi PM_FILT_AFTERTOUCH i32 "")
(call-as-xtlang (set! PM_FILT_AFTERTOUCH (convert (+ PM_FILT_CHANNEL_AFTERTOUCH PM_FILT_POLY_AFTERTOUCH) i32)) void)
(register-lib-val xtmportmidi PM_FILT_PROGRAM i32 "")
(call-as-xtlang (set! PM_FILT_PROGRAM (convert (<< 1 28) i32)) void)
(register-lib-val xtmportmidi PM_FILT_CONTROL i32 "")
(call-as-xtlang (set! PM_FILT_CONTROL (convert (<< 1 27) i32)) void)
(register-lib-val xtmportmidi PM_FILT_PITCHBEND i32 "")
(call-as-xtlang (set! PM_FILT_PITCHBEND (convert (<< 1 30) i32)) void)
(register-lib-val xtmportmidi PM_FILT_MTC i32 "")
(call-as-xtlang (set! PM_FILT_MTC (convert (<< 1 1) i32)) void)
(register-lib-val xtmportmidi PM_FILT_SONG_POSITION i32 "")
(call-as-xtlang (set! PM_FILT_SONG_POSITION (convert (<< 1 2) i32)) void)
(register-lib-val xtmportmidi PM_FILT_SONG_SELECT i32 "")
(call-as-xtlang (set! PM_FILT_SONG_SELECT (convert (<< 1 3) i32)) void)
(register-lib-val xtmportmidi PM_FILT_TUNE i32 "")
(call-as-xtlang (set! PM_FILT_TUNE (convert (<< 1 6) i32)) void)
(register-lib-val xtmportmidi PM_FILT_SYSTEMCOMMON i32 "")
(call-as-xtlang (set! PM_FILT_SYSTEMCOMMON (convert (+ PM_FILT_MTC PM_FILT_SONG_POSITION PM_FILT_SONG_SELECT PM_FILT_TUNE) i32)) void)
(llvm:bind-symbol libportmidi "Pm_SetFilter")
(bind-lib libportmidi Pm_SetFilter [PmError,PortMidiStream*,i32]*)
(llvm:bind-symbol libportmidi "Pm_SetChannelMask")
(bind-lib libportmidi Pm_SetChannelMask [PmError,PortMidiStream*,i32]*)
(llvm:bind-symbol libportmidi "Pm_Abort")
(bind-lib libportmidi Pm_Abort [PmError,PortMidiStream*]*)
(llvm:bind-symbol libportmidi "Pm_Close")
(bind-lib libportmidi Pm_Close [PmError,PortMidiStream*]*)
(bind-alias PmMessage i32 "")
(register-lib-func xtmportmidi Pm_Message_adhoc_W2kzMixpMzIsaTMyLGkzMl0 [i32,i32,i32,i32]* 0 "" '(let ((Pm_Message_adhoc_13 (lambda (status:PmMessage data1:PmMessage data2:PmMessage) (+ (& (<< data2 16) 16711680) (& (<< data1 8) 65280) (& status 255))))) Pm_Message_adhoc_13))
(bind-poly Pm_Message Pm_Message_adhoc_W2kzMixpMzIsaTMyLGkzMl0 "")
(register-lib-func xtmportmidi Pm_Message_Status_adhoc_W2kzMixpMzJd [i32,i32]* 0 "" '(let ((Pm_Message_Status_adhoc_14 (lambda (msg:PmMessage) (& msg 255)))) Pm_Message_Status_adhoc_14))
(bind-poly Pm_Message_Status Pm_Message_Status_adhoc_W2kzMixpMzJd "")
(register-lib-func xtmportmidi Pm_Message_Channel_adhoc_W2kzMixpMzJd [i32,i32]* 0 "" '(let ((Pm_Message_Channel_adhoc_15 (lambda (msg:PmMessage) (& msg 15)))) Pm_Message_Channel_adhoc_15))
(bind-poly Pm_Message_Channel Pm_Message_Channel_adhoc_W2kzMixpMzJd "")
(register-lib-func xtmportmidi Pm_Message_Type_adhoc_W2kzMixpMzJd [i32,i32]* 0 "" '(let ((Pm_Message_Type_adhoc_16 (lambda (msg:PmMessage) (& msg 240)))) Pm_Message_Type_adhoc_16))
(bind-poly Pm_Message_Type Pm_Message_Type_adhoc_W2kzMixpMzJd "")
(register-lib-func xtmportmidi Pm_Message_Data1_adhoc_W2kzMixpMzJd [i32,i32]* 0 "" '(let ((Pm_Message_Data1_adhoc_17 (lambda (msg:PmMessage) (& (>> msg 8) 255)))) Pm_Message_Data1_adhoc_17))
(bind-poly Pm_Message_Data1 Pm_Message_Data1_adhoc_W2kzMixpMzJd "")
(register-lib-func xtmportmidi Pm_Message_Data2_adhoc_W2kzMixpMzJd [i32,i32]* 0 "" '(let ((Pm_Message_Data2_adhoc_18 (lambda (msg:PmMessage) (& (>> msg 16) 255)))) Pm_Message_Data2_adhoc_18))
(bind-poly Pm_Message_Data2 Pm_Message_Data2_adhoc_W2kzMixpMzJd "")
(register-lib-type xtmportmidi PmEvent <i32,i32> "")
(register-lib-func xtmportmidi PmEvent_adhoc_W1BtRXZlbnQqLGkzMixpMzJd [PmEvent*,i32,i32]* 0 "" '(let ((PmEvent_adhoc_19 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) PmEvent_adhoc_19))
(bind-poly PmEvent PmEvent_adhoc_W1BtRXZlbnQqLGkzMixpMzJd "")
(register-lib-func xtmportmidi PmEvent_z_adhoc_W1BtRXZlbnQqLGkzMixpMzJd [PmEvent*,i32,i32]* 0 "" '(let ((PmEvent_z_adhoc_20 (lambda (arg_0 arg_1) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) PmEvent_z_adhoc_20))
(bind-poly PmEvent_z PmEvent_z_adhoc_W1BtRXZlbnQqLGkzMixpMzJd "")
(register-lib-func xtmportmidi PmEvent_h_adhoc_W1BtRXZlbnQqLGkzMixpMzJd [PmEvent*,i32,i32]* 0 "" '(let ((PmEvent_h_adhoc_21 (lambda (arg_0 arg_1) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) obj)))) PmEvent_h_adhoc_21))
(bind-poly PmEvent_h PmEvent_h_adhoc_W1BtRXZlbnQqLGkzMixpMzJd "")
(register-lib-func xtmportmidi PmEvent_val_adhoc_W1BtRXZlbnQsaTMyLGkzMl0 [PmEvent,i32,i32]* 0 "" '(let ((PmEvent_val_adhoc_22 (lambda (arg_0 arg_1) (let ((obj:PmEvent* (salloc))) (tfill! obj arg_0 arg_1) (pref obj 0))))) PmEvent_val_adhoc_22))
(bind-poly PmEvent_val PmEvent_val_adhoc_W1BtRXZlbnQsaTMyLGkzMl0 "")
(register-lib-func xtmportmidi hcopy_adhoc_W1BtRXZlbnQqLFBtRXZlbnQqXQ [PmEvent*,PmEvent*]* 0 "" '(let ((hcopy_adhoc_23 (lambda (x:PmEvent*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) obj)))) hcopy_adhoc_23))
(bind-poly hcopy hcopy_adhoc_W1BtRXZlbnQqLFBtRXZlbnQqXQ "")
(register-lib-func xtmportmidi hfree_adhoc_W3ZvaWQsUG1FdmVudCpd [void,PmEvent*]* 0 "" '(let ((hfree_adhoc_24 (lambda (x:PmEvent*) () () (free x) void))) hfree_adhoc_24))
(bind-poly hfree hfree_adhoc_W3ZvaWQsUG1FdmVudCpd "")
(register-lib-func xtmportmidi zcopy_adhoc_W1BtRXZlbnQqLFBtRXZlbnQqLG16b25lKixtem9uZSpd [PmEvent*,PmEvent*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_25 (lambda (x:PmEvent* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (begin (tset! obj 1 (tref x 1))) (pop_zone) obj)) x)))) zcopy_adhoc_25))
(bind-poly zcopy zcopy_adhoc_W1BtRXZlbnQqLFBtRXZlbnQqLG16b25lKixtem9uZSpd "")
(register-lib-func xtmportmidi Pm_Event_Message_adhoc_W2kzMixQbUV2ZW50Kl0 [i32,PmEvent*]* 0 "" '(let ((Pm_Event_Message_adhoc_26 (lambda (event:PmEvent*) (tref event 0)))) Pm_Event_Message_adhoc_26))
(bind-poly Pm_Event_Message Pm_Event_Message_adhoc_W2kzMixQbUV2ZW50Kl0 "")
(register-lib-func xtmportmidi Pm_Event_Timestamp_adhoc_W2kzMixQbUV2ZW50Kl0 [i32,PmEvent*]* 0 "" '(let ((Pm_Event_Timestamp_adhoc_27 (lambda (event:PmEvent*) (tref event 1)))) Pm_Event_Timestamp_adhoc_27))
(bind-poly Pm_Event_Timestamp Pm_Event_Timestamp_adhoc_W2kzMixQbUV2ZW50Kl0 "")
(register-lib-func xtmportmidi print_adhoc_W3ZvaWQsUG1FdmVudCpd [void,PmEvent*]* 0 "specialised print function for PmEvent*" '(let ((print_adhoc_28 (lambda (pmevent:PmEvent*) (printf "<PmEvent: type=%d chan=%d data1=%d data2=%d timestamp=%d>" (Pm_Message_Type (tref pmevent 0)) (Pm_Message_Channel (tref pmevent 0)) (Pm_Message_Data1 (tref pmevent 0)) (Pm_Message_Data2 (tref pmevent 0)) (tref pmevent 1)) void))) print_adhoc_28))
(bind-poly print print_adhoc_W3ZvaWQsUG1FdmVudCpd "")
(register-lib-func xtmportmidi toString_adhoc_W1N0cmluZyosUG1FdmVudCpd [String*,PmEvent*]* 0 "specialised toString function for PmEvent*" '(let ((toString_adhoc_29 (lambda (pmevent:PmEvent*) (let ((str:i8* (salloc 256))) (sprintf str "<PmEvent: type=%d chan=%d data1=%d data2=%d timestamp=%d>" (Pm_Message_Type (tref pmevent 0)) (Pm_Message_Channel (tref pmevent 0)) (Pm_Message_Data1 (tref pmevent 0)) (Pm_Message_Data2 (tref pmevent 0)) (tref pmevent 1)) (String str))))) toString_adhoc_29))
(bind-poly toString toString_adhoc_W1N0cmluZyosUG1FdmVudCpd "")
(register-lib-func xtmportmidi Pm_Event_Channel_adhoc_W2kzMixQbUV2ZW50Kl0 [i32,PmEvent*]* 0 "" '(let ((Pm_Event_Channel_adhoc_30 (lambda (event:PmEvent*) (& (tref event 0) 15)))) Pm_Event_Channel_adhoc_30))
(bind-poly Pm_Event_Channel Pm_Event_Channel_adhoc_W2kzMixQbUV2ZW50Kl0 "")
(register-lib-func xtmportmidi Pm_Event_Type_adhoc_W2kzMixQbUV2ZW50Kl0 [i32,PmEvent*]* 0 "" '(let ((Pm_Event_Type_adhoc_31 (lambda (event:PmEvent*) (& (tref event 0) 240)))) Pm_Event_Type_adhoc_31))
(bind-poly Pm_Event_Type Pm_Event_Type_adhoc_W2kzMixQbUV2ZW50Kl0 "")
(register-lib-func xtmportmidi Pm_Event_Data1_adhoc_W2kzMixQbUV2ZW50Kl0 [i32,PmEvent*]* 0 "" '(let ((Pm_Event_Data1_adhoc_32 (lambda (event:PmEvent*) (& (>> (tref event 0) 8) 255)))) Pm_Event_Data1_adhoc_32))
(bind-poly Pm_Event_Data1 Pm_Event_Data1_adhoc_W2kzMixQbUV2ZW50Kl0 "")
(register-lib-func xtmportmidi Pm_Event_Data2_adhoc_W2kzMixQbUV2ZW50Kl0 [i32,PmEvent*]* 0 "" '(let ((Pm_Event_Data2_adhoc_33 (lambda (event:PmEvent*) (& (>> (tref event 0) 16) 255)))) Pm_Event_Data2_adhoc_33))
(bind-poly Pm_Event_Data2 Pm_Event_Data2_adhoc_W2kzMixQbUV2ZW50Kl0 "")
(llvm:bind-symbol libportmidi "Pm_Read")
(bind-lib libportmidi Pm_Read [i32,PortMidiStream*,PmEvent*,i32]*)
(llvm:bind-symbol libportmidi "Pm_Poll")
(bind-lib libportmidi Pm_Poll [PmError,PortMidiStream*]*)
(llvm:bind-symbol libportmidi "Pm_Write")
(bind-lib libportmidi Pm_Write [PmError,PortMidiStream*,PmEvent*,i32]*)
(llvm:bind-symbol libportmidi "Pm_WriteShort")
(bind-lib libportmidi Pm_WriteShort [PmError,PortMidiStream*,PmTimestamp,i32]*)
(register-lib-func xtmportmidi pm_write_adhoc_W2kzMixpOCosaTMyXQ [i32,i8*,i32]* 0 "a wrapper around Pm_WriteShort with timestamp == 0\r\n\r\nmost of the time this is what you'll want to call (especially from\r\nScheme)" '(let ((pm_write_adhoc_34 (lambda (stream message) (Pm_WriteShort stream 0 message)))) pm_write_adhoc_34))
(bind-poly pm_write pm_write_adhoc_W2kzMixpOCosaTMyXQ "")
(register-lib-func xtmportmidi pm_send_adhoc_W2kzMixpOCosaTMyLGkzMixpMzIsaTMyXQ [i32,i8*,i32,i32,i32,i32]* 0 "a wrapper around Pm_WriteShort with timestamp == 0\r\n\r\nmost of the time this is what you'll want to call (especially from\r\nScheme)" '(let ((pm_send_adhoc_35 (lambda (stream type chan a b) (Pm_WriteShort stream 0 (Pm_Message (+ type chan) a b))))) pm_send_adhoc_35))
(bind-poly pm_send pm_send_adhoc_W2kzMixpOCosaTMyLGkzMixpMzIsaTMyXQ "")
(llvm:bind-symbol libportmidi "Pm_WriteSysEx")
(bind-lib libportmidi Pm_WriteSysEx [PmError,PortMidiStream*,PmTimestamp,i8*]*)
(register-lib-val xtmportmidi MIDI_NOTE_ON i32 "args: key, velocity")
(register-lib-val xtmportmidi MIDI_NOTE_OFF i32 "args: key, velocity")
(register-lib-val xtmportmidi MIDI_CHANNEL_AFTERTOUCH i32 "")
(register-lib-val xtmportmidi MIDI_POLY_AFTERTOUCH i32 "")
(register-lib-val xtmportmidi MIDI_PROGRAM_CHANGE i32 "args: value, ignored")
(register-lib-val xtmportmidi MIDI_CONTROL_CHANGE i32 "args: controller, value")
(register-lib-val xtmportmidi MIDI_CC i32 "args: controller, value")
(register-lib-val xtmportmidi MIDI_PITCH_BEND i32 "args: lsb (7 bits), msb (7 bits)")
(register-lib-val xtmportmidi MIDI_SYSEX i32 "")
(register-lib-val xtmportmidi MIDI_TIME_CODE i32 "")
(register-lib-val xtmportmidi MIDI_SONG_POSITION i32 "")
(register-lib-val xtmportmidi MIDI_SONG_SELECT i32 "")
(register-lib-val xtmportmidi MIDI_TUNE i32 "")
(register-lib-val xtmportmidi MIDI_SYSEX_END i32 "")
(register-lib-val xtmportmidi MIDI_TIMIING_CLOCK i32 "")
(register-lib-val xtmportmidi MIDI_START i32 "")
(register-lib-val xtmportmidi MIDI_CONTINUE i32 "")
(register-lib-val xtmportmidi MIDI_STOP i32 "")
(register-lib-val xtmportmidi MIDI_ACTIVE_SENSING i32 "")
(register-lib-val xtmportmidi MIDI_RESET i32 "")
(define *midi-note-on* 144)
(define *midi-note-off* 128)
(define *midi-channel-aftertouch* 208)
(define *midi-poly-aftertouch* 160)
(define *midi-program-change* 192)
(define *midi-control-change* 176)
(define *midi-cc* 176)
(define *midi-pitch-bend* 224)
(define *midi-sysex* 240)
(define *midi-time-code* 241)
(define *midi-song-position* 242)
(define *midi-song-select* 243)
(define *midi-tune* 246)
(define *midi-sysex-end* 247)
(define *midi-timiing-clock* 248)
(define *midi-start* 250)
(define *midi-continue* 251)
(define *midi-stop* 252)
(define *midi-active-sensing* 254)
(define *midi-reset* 255)
(register-lib-func xtmportmidi pm_initialize_adhoc_W3ZvaWRd [void]* 0 "" '(let ((pm_initialize_adhoc_36 (lambda () (if (<> (Pm_Initialize) pmNoError) (println "Error initialising Portmidi") (println "Portmidi successfully initialised."))))) pm_initialize_adhoc_36))
(bind-poly pm_initialize pm_initialize_adhoc_W3ZvaWRd "")
(register-lib-func xtmportmidi pm_print_devices_adhoc_W3ZvaWRd [void]* 0 "" '(let ((pm_print_devices_adhoc_37 (lambda () (let ((ndev (Pm_CountDevices))) (if (= ndev 0) (println "No MIDI devices found") (begin (println "\n-- MIDI input devices --\n") (doloop (i ndev) (if (= (tref (Pm_GetDeviceInfo i) 3) 1) (println "  device id" i ":" (Pm_GetDeviceInfo i)))) (println "\n-- MIDI output devices --\n") (doloop (i ndev) (if (= (tref (Pm_GetDeviceInfo i) 4) 1) (println "  device id" i ":" (Pm_GetDeviceInfo i)))))))))) pm_print_devices_adhoc_37))
(bind-poly pm_print_devices pm_print_devices_adhoc_W3ZvaWRd "")
(register-lib-func xtmportmidi pm_input_device_with_name_adhoc_W2kzMixpOCpd [i32,i8*]* 0 "return device ID for input device with NAME\r\n\r\nreturns -1 if no input device with that name is found" '(let ((pm_input_device_with_name_adhoc_38 (lambda (name:i8*) (let ((ndev (Pm_CountDevices)) (dev -1)) (doloop (i ndev) (if (and (= (strncmp (tref (Pm_GetDeviceInfo i) 2) name 1024) 0) (= (tref (Pm_GetDeviceInfo i) 3) 1)) (set! dev i))) dev)))) pm_input_device_with_name_adhoc_38))
(bind-poly pm_input_device_with_name pm_input_device_with_name_adhoc_W2kzMixpOCpd "")
(register-lib-func xtmportmidi pm_output_device_with_name_adhoc_W2kzMixpOCpd [i32,i8*]* 0 "return device ID for output device with NAME\r\n\r\nreturns -1 if no output device with that name is found" '(let ((pm_output_device_with_name_adhoc_39 (lambda (name) (let ((ndev (Pm_CountDevices)) (dev -1)) (doloop (i ndev) (if (and (= (strncmp (tref (Pm_GetDeviceInfo i) 2) name 1024) 0) (= (tref (Pm_GetDeviceInfo i) 4) 1)) (set! dev i))) dev)))) pm_output_device_with_name_adhoc_39))
(bind-poly pm_output_device_with_name pm_output_device_with_name_adhoc_W2kzMixpOCpd "")
(register-lib-func xtmportmidi pm_current_time_in_ms_adhoc_W2kzMixpOCpd [i32,i8*]* 0 "return current time in ms - required for the portmidi API\r\n\r\n@param time_info - ignored\r\n@return - current time (ms), retrieved through call to (now)" '(let ((pm_current_time_in_ms_adhoc_40 (lambda (time_info:i8*) (convert (* 1000.:f (/ (convert (now) float) 44100.:f)) i32)))) pm_current_time_in_ms_adhoc_40))
(bind-poly pm_current_time_in_ms pm_current_time_in_ms_adhoc_W2kzMixpOCpd "")
(register-lib-val xtmportmidi PM_MIDI_BUFFER_SIZE i32 "default size of the MIDI input/output buffers")
(register-lib-func xtmportmidi pm_create_input_stream_adhoc_W2k4KixpMzJd [i8*,i32]* 0 "create a midi *input* PmStream pointer for device\r\n\r\nCheck the output of pm_print_devices to see the device id of your\r\ninput device(s)\r\n\r\n@paran dev - device id of a midi input device" '(let ((pm_create_input_stream_adhoc_41 (lambda (dev) (let ((stream_ptr:PmStream** (salloc)) (res (Pm_OpenInput stream_ptr dev null PM_MIDI_BUFFER_SIZE (convert (get_native_fptr pm_current_time_in_ms)) null))) (if (<> res pmNoError) (println "PortMIDI error opening input port:" (String (Pm_GetErrorText res)))) (pref stream_ptr 0))))) pm_create_input_stream_adhoc_41))
(bind-poly pm_create_input_stream pm_create_input_stream_adhoc_W2k4KixpMzJd "")
(register-lib-func xtmportmidi pm_create_output_stream_adhoc_W2k4KixpMzJd [i8*,i32]* 0 "create a midi *output* PmStream pointer for device\r\n\r\nCheck the output of pm_print_devices to see the device id of your\r\noutput device(s)\r\n\r\n@paran dev - device id of a midi output device" '(let ((pm_create_output_stream_adhoc_42 (lambda (dev) (let ((stream_ptr:PmStream** (salloc)) (res (Pm_OpenOutput stream_ptr dev null PM_MIDI_BUFFER_SIZE (convert (get_native_fptr pm_current_time_in_ms)) null 0))) (if (<> res pmNoError) (println "PortMIDI error opening output port:" (String (Pm_GetErrorText res)))) (pref stream_ptr 0))))) pm_create_output_stream_adhoc_42))
(bind-poly pm_create_output_stream pm_create_output_stream_adhoc_W2k4KixpMzJd "")
(register-lib-func xtmportmidi PmEvent_note_on_p_adhoc_W2kxLFBtRXZlbnQqXQ [i1,PmEvent*]* 0 "" '(let ((PmEvent_note_on_p_adhoc_43 (lambda (event:PmEvent*) (= (& (tref event 0) 240) MIDI_NOTE_ON)))) PmEvent_note_on_p_adhoc_43))
(bind-poly PmEvent_note_on_p PmEvent_note_on_p_adhoc_W2kxLFBtRXZlbnQqXQ "")
(register-lib-func xtmportmidi PmEvent_note_off_p_adhoc_W2kxLFBtRXZlbnQqXQ [i1,PmEvent*]* 0 "" '(let ((PmEvent_note_off_p_adhoc_44 (lambda (event:PmEvent*) (= (& (tref event 0) 240) MIDI_NOTE_OFF)))) PmEvent_note_off_p_adhoc_44))
(bind-poly PmEvent_note_off_p PmEvent_note_off_p_adhoc_W2kxLFBtRXZlbnQqXQ "")
(register-lib-func xtmportmidi PmEvent_cc_p_adhoc_W2kxLFBtRXZlbnQqXQ [i1,PmEvent*]* 0 "" '(let ((PmEvent_cc_p_adhoc_45 (lambda (event:PmEvent*) (= (& (tref event 0) 240) MIDI_CONTROL_CHANGE)))) PmEvent_cc_p_adhoc_45))
(bind-poly PmEvent_cc_p PmEvent_cc_p_adhoc_W2kxLFBtRXZlbnQqXQ "")
(register-lib-val xtmportmidi midi_out i8* "")
(call-as-xtlang (set! midi_out (cast (malloc 8) PmStream*)) void)
(register-lib-func xtmportmidi set_midi_out_adhoc_W2k4KixpMzJd [i8*,i32]* 0 "" '(let ((set_midi_out_adhoc_46 (lambda (idx) (set! midi_out (pm_create_output_stream idx)) midi_out))) set_midi_out_adhoc_46))
(bind-poly set_midi_out set_midi_out_adhoc_W2k4KixpMzJd "")
(register-lib-func xtmportmidi get_midi_out_adhoc_W2k4Kl0 [i8*]* 0 "" '(let ((get_midi_out_adhoc_47 (lambda () midi_out))) get_midi_out_adhoc_47))
(bind-poly get_midi_out get_midi_out_adhoc_W2k4Kl0 "")
(register-lib-val xtmportmidi midi_in i8* "")
(call-as-xtlang (set! midi_in (cast (malloc 8) PmStream*)) void)
(register-lib-func xtmportmidi set_midi_in_adhoc_W2k4KixpMzJd [i8*,i32]* 0 "" '(let ((set_midi_in_adhoc_48 (lambda (idx) (set! midi_in (pm_create_input_stream idx)) midi_in))) set_midi_in_adhoc_48))
(bind-poly set_midi_in set_midi_in_adhoc_W2k4KixpMzJd "")
(register-lib-func xtmportmidi get_midi_in_adhoc_W2k4Kl0 [i8*]* 0 "" '(let ((get_midi_in_adhoc_49 (lambda () midi_in))) get_midi_in_adhoc_49))
(bind-poly get_midi_in get_midi_in_adhoc_W2k4Kl0 "")
(register-lib-func xtmportmidi print_midi_devices_adhoc_W3ZvaWRd [void]* 0 "" '(let ((print_midi_devices_adhoc_50 (lambda () (pm_print_devices)))) print_midi_devices_adhoc_50))
(bind-poly print_midi_devices print_midi_devices_adhoc_W3ZvaWRd "")
(register-lib-func xtmportmidi start_midi_adhoc_W3ZvaWRd [void]* 0 "" '(let ((start_midi_adhoc_51 (lambda () (pm_initialize)))) start_midi_adhoc_51))
(bind-poly start_midi start_midi_adhoc_W3ZvaWRd "")
(define play-midi-note (lambda (time device pitch velocity duration channel) (callback time 'pm_send device *midi-note-on* channel pitch velocity) (callback (+ time duration) 'pm_send device *midi-note-off* channel pitch velocity)))
(define send-midi-cc (lambda (time device cc val channel) (callback time 'pm_send device *midi-cc* channel (real->integer cc) (real->integer val))))
(define homo-play-midi-note (let ((notes (make-vector 127 0))) (lambda (time device pitch velocity duration channel) (if (> time (vector-ref notes pitch)) (let ((dur (- duration (* 2 *au:block-size*)))) (vector-set! notes pitch (+ time dur)) (callback time 'pm_send device *midi-note-on* channel pitch velocity) (callback (+ time duration) 'pm_send device *midi-note-off* channel pitch velocity))))))
(define *midioffset* 0)
(define-macro (mplay . args) (if (symbol? (car args)) `(if (list? ,(cadr args)) (map (lambda (p) (play-midi-note (+ (*metro* beat) *midioffset*) ,(car args) (real->integer p) (real->integer ,(caddr args)) (*metro* 'dur ,(car (cdddr args))) (real->integer ,(car (cddddr args))))) ,(cadr args)) (play-midi-note (+ (*metro* beat) *midioffset*) ,(car args) (real->integer ,(cadr args)) (real->integer ,(caddr args)) (*metro* 'dur ,(car (cdddr args))) (real->integer ,(car (cddddr args))))) `(if (list? ,(caddr args)) (map (lambda (p) (play-midi-note (+ (*metro* (+ beat ,(car args))) *midioffset*) ,(cadr args) (real->integer p) (real->integer ,(car (cdddr args))) (*metro* 'dur ,(cadr (cdddr args))) (real->integer ,(cadr (cddddr args))))) ,(caddr args)) (play-midi-note (+ (*metro* (+ beat ,(car args))) *midioffset*) ,(cadr args) (real->integer ,(caddr args)) (real->integer ,(car (cdddr args))) (*metro* 'dur ,(cadr (cdddr args))) (real->integer ,(cadr (cddddr args)))))))
(define-macro (mcc . args) (if (symbol? (car args)) `(send-midi-cc (+ (*metro* beat) *midioffset*) ,(car args) (real->integer ,(cadr args)) (real->integer ,(caddr args)) (real->integer ,(car (cdddr args)))) `(send-midi-cc (+ (*metro* (+ beat ,(car args))) *midioffset*) ,(cadr args) (real->integer ,(caddr args)) (real->integer ,(car (cdddr args))) (real->integer ,(car (cddddr args))))))
(define-macro (mplayob o b . args) `(if (= 0 (modulo (+ ,o beat) ,b)) (mplay ,@args) #f))
(define-macro (mplayobs l b . args) `(if (member (modulo beat ,b) ,l) (mplay ,@args) #f))
(print-with-colors 'green 'default #t (print "done"))(print " in" (- (clock:clock) *xtmlib-portmidi-loaded-timer*) "seconds\n")
(define *xtmlib-portmidi-loaded-timer* (clock:clock))
(set! *impc:compiler:message:level* *impc:aot:prev-compiler-message-level*)
