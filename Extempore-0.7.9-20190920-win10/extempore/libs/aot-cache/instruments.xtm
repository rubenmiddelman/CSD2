(sys:load "libs/core/audio_dsp.xtm" 'quiet)
(sys:load-preload-check 'instruments)
(define *xtmlib-instruments-loaded* #t)
(define *xtmlib-instruments-loaded-timer* (clock:clock))
(set! *impc:aot:prev-compiler-message-level* *impc:compiler:message:level*)
(set! *impc:compiler:message:level* 'low)

(print "Loading ")
(print-with-colors 'blue 'default #t (print 'xtminstruments))
(print " library... ")
(llvm:compile-ir (sys:slurp-file "libs/aot-cache/xtminstruments.ll"));; flush the JIT-compilation queue, so we only get this file's code in the module
(impc:compiler:flush-jit-compilation-queue)
(register-lib-val xtminstruments MAXPOLYPHONY i64 "")
(register-lib-type xtminstruments NoteData <i64,i64,float,float,i64,float,i1,i64,i8*> "")
(register-lib-func xtminstruments NoteData_adhoc_W05vdGVEYXRhKixpNjQsaTY0LGZsb2F0LGZsb2F0LGk2NCxmbG9hdCxpMSxpNjQsaTgqXQ [NoteData*,i64,i64,float,float,i64,float,i1,i64,i8*]* 0 "" '(let ((NoteData_adhoc_1 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) (tset! obj 7 arg_7) (tset! obj 8 arg_8) obj)))) NoteData_adhoc_1))
(bind-poly NoteData NoteData_adhoc_W05vdGVEYXRhKixpNjQsaTY0LGZsb2F0LGZsb2F0LGk2NCxmbG9hdCxpMSxpNjQsaTgqXQ "")
(register-lib-func xtminstruments NoteData_z_adhoc_W05vdGVEYXRhKixpNjQsaTY0LGZsb2F0LGZsb2F0LGk2NCxmbG9hdCxpMSxpNjQsaTgqXQ [NoteData*,i64,i64,float,float,i64,float,i1,i64,i8*]* 0 "" '(let ((NoteData_z_adhoc_2 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) (tset! obj 7 arg_7) (tset! obj 8 arg_8) obj)))) NoteData_z_adhoc_2))
(bind-poly NoteData_z NoteData_z_adhoc_W05vdGVEYXRhKixpNjQsaTY0LGZsb2F0LGZsb2F0LGk2NCxmbG9hdCxpMSxpNjQsaTgqXQ "")
(register-lib-func xtminstruments NoteData_h_adhoc_W05vdGVEYXRhKixpNjQsaTY0LGZsb2F0LGZsb2F0LGk2NCxmbG9hdCxpMSxpNjQsaTgqXQ [NoteData*,i64,i64,float,float,i64,float,i1,i64,i8*]* 0 "" '(let ((NoteData_h_adhoc_3 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) (tset! obj 7 arg_7) (tset! obj 8 arg_8) obj)))) NoteData_h_adhoc_3))
(bind-poly NoteData_h NoteData_h_adhoc_W05vdGVEYXRhKixpNjQsaTY0LGZsb2F0LGZsb2F0LGk2NCxmbG9hdCxpMSxpNjQsaTgqXQ "")
(register-lib-func xtminstruments toString_adhoc_W1N0cmluZyosTm90ZURhdGEqXQ [String*,NoteData*]* 0 "" '(let ((toString_adhoc_4 (lambda (x:NoteData*) (if (null? x) (sprintout "<NoteData:null>") (sprintout "<NoteData:" (tref x 0) "," (tref x 1) "," (tref x 2) "," (tref x 3) "," (tref x 4) "," (tref x 5) "," (tref x 6) "," (tref x 7) "," (tref x 8) ">"))))) toString_adhoc_4))
(bind-poly toString toString_adhoc_W1N0cmluZyosTm90ZURhdGEqXQ "")
(register-lib-func xtminstruments print_adhoc_W3ZvaWQsTm90ZURhdGEqXQ [void,NoteData*]* 0 "" '(let ((print_adhoc_5 (lambda (x:NoteData*) (if (null? x) (printout "<NoteData:null>") (printout "<NoteData:" (tref x 0) "," (tref x 1) "," (tref x 2) "," (tref x 3) "," (tref x 4) "," (tref x 5) "," (tref x 6) "," (tref x 7) "," (tref x 8) ">")) void))) print_adhoc_5))
(bind-poly print print_adhoc_W3ZvaWQsTm90ZURhdGEqXQ "")
(register-lib-func xtminstruments NoteData_val_adhoc_W05vdGVEYXRhLGk2NCxpNjQsZmxvYXQsZmxvYXQsaTY0LGZsb2F0LGkxLGk2NCxpOCpd [NoteData,i64,i64,float,float,i64,float,i1,i64,i8*]* 0 "" '(let ((NoteData_val_adhoc_6 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8) (let ((obj:NoteData* (salloc))) (tfill! obj arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8) (pref obj 0))))) NoteData_val_adhoc_6))
(bind-poly NoteData_val NoteData_val_adhoc_W05vdGVEYXRhLGk2NCxpNjQsZmxvYXQsZmxvYXQsaTY0LGZsb2F0LGkxLGk2NCxpOCpd "")
(register-lib-func xtminstruments hcopy_adhoc_W05vdGVEYXRhKixOb3RlRGF0YSpd [NoteData*,NoteData*]* 0 "" '(let ((hcopy_adhoc_7 (lambda (x:NoteData*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) (tset! obj 2 (tref x 2)) (tset! obj 3 (tref x 3)) (tset! obj 4 (tref x 4)) (tset! obj 5 (tref x 5)) (tset! obj 6 (tref x 6)) (tset! obj 7 (tref x 7)) (tset! obj 8 (tref x 8)) obj)))) hcopy_adhoc_7))
(bind-poly hcopy hcopy_adhoc_W05vdGVEYXRhKixOb3RlRGF0YSpd "")
(register-lib-func xtminstruments hfree_adhoc_W3ZvaWQsTm90ZURhdGEqXQ [void,NoteData*]* 0 "" '(let ((hfree_adhoc_8 (lambda (x:NoteData*) () () () () () () () () () (free x) void))) hfree_adhoc_8))
(bind-poly hfree hfree_adhoc_W3ZvaWQsTm90ZURhdGEqXQ "")
(register-lib-func xtminstruments zcopy_adhoc_W05vdGVEYXRhKixOb3RlRGF0YSosbXpvbmUqLG16b25lKl0 [NoteData*,NoteData*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_9 (lambda (x:NoteData* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (begin (tset! obj 1 (tref x 1))) (begin (tset! obj 2 (tref x 2))) (begin (tset! obj 3 (tref x 3))) (begin (tset! obj 4 (tref x 4))) (begin (tset! obj 5 (tref x 5))) (begin (tset! obj 6 (tref x 6))) (begin (tset! obj 7 (tref x 7))) (if (llvm_ptr_in_zone fromz (cast (tref x 8) i8*)) (let ((newptr:i8* (zalloc))) (memcpy (cast newptr i8*) (cast (tref x 8) i8*) 1) (tset! obj 8 newptr)) (tset! obj 8 (tref x 8))) (pop_zone) obj)) x)))) zcopy_adhoc_9))
(bind-poly zcopy zcopy_adhoc_W05vdGVEYXRhKixOb3RlRGF0YSosbXpvbmUqLG16b25lKl0 "")
(bind-lib xtminstruments note_idx [i64,NoteData*]*)
(bind-lib xtminstruments note_idx_scheme [i8*,i8*,i8*]*)
(mk-ff "note_idx" (llvm:get-function-pointer "note_idx_scheme"))
(bind-lib xtminstruments note_starttime [i64,NoteData*]*)
(bind-lib xtminstruments note_starttime_scheme [i8*,i8*,i8*]*)
(mk-ff "note_starttime" (llvm:get-function-pointer "note_starttime_scheme"))
(bind-lib xtminstruments note_frequency [float,NoteData*]*)
(bind-lib xtminstruments note_frequency_scheme [i8*,i8*,i8*]*)
(mk-ff "note_frequency" (llvm:get-function-pointer "note_frequency_scheme"))
(bind-lib xtminstruments note_amplitude [float,NoteData*]*)
(bind-lib xtminstruments note_amplitude_scheme [i8*,i8*,i8*]*)
(mk-ff "note_amplitude" (llvm:get-function-pointer "note_amplitude_scheme"))
(bind-lib xtminstruments note_duration [i64,NoteData*]*)
(bind-lib xtminstruments note_duration_scheme [i8*,i8*,i8*]*)
(mk-ff "note_duration" (llvm:get-function-pointer "note_duration_scheme"))
(bind-lib xtminstruments note_gate_get [float,NoteData*]*)
(bind-lib xtminstruments note_gate_get_scheme [i8*,i8*,i8*]*)
(mk-ff "note_gate_get" (llvm:get-function-pointer "note_gate_get_scheme"))
(bind-lib xtminstruments note_gate_set [float,NoteData*,float]*)
(bind-lib xtminstruments note_gate_set_scheme [i8*,i8*,i8*]*)
(mk-ff "note_gate_set" (llvm:get-function-pointer "note_gate_set_scheme"))
(bind-poly note_gate note_gate_get "")
(bind-poly note_gate note_gate_set "")
(bind-lib xtminstruments note_active_get [i1,NoteData*]*)
(bind-lib xtminstruments note_active_get_scheme [i8*,i8*,i8*]*)
(mk-ff "note_active_get" (llvm:get-function-pointer "note_active_get_scheme"))
(bind-lib xtminstruments note_active_set [i1,NoteData*,i1]*)
(bind-lib xtminstruments note_active_set_scheme [i8*,i8*,i8*]*)
(mk-ff "note_active_set" (llvm:get-function-pointer "note_active_set_scheme"))
(bind-poly note_active note_active_get "")
(bind-poly note_active note_active_set "")
(bind-lib xtminstruments note_restarttime [i64,NoteData*]*)
(bind-lib xtminstruments note_restarttime_scheme [i8*,i8*,i8*]*)
(mk-ff "note_restarttime" (llvm:get-function-pointer "note_restarttime_scheme"))
(bind-lib xtminstruments note_zone [mzone*,NoteData*]*)
(bind-lib xtminstruments note_zone_scheme [i8*,i8*,i8*]*)
(mk-ff "note_zone" (llvm:get-function-pointer "note_zone_scheme"))
(bind-alias INSTRUMENT [float,float,i64,i64,float*]* "")
(bind-alias NOTE_KERNEL [[float,i64,i64]*,NoteData*,i64,float*]* "")
(bind-alias FX_KERNEL [float,float,i64,i64,float*]* "")
(register-lib-func xtminstruments instrument_find_note_adhoc_W05vdGVEYXRhKixOb3RlRGF0YSoqLGk2NF0 [NoteData*,NoteData**,i64]* 0 "" '(let ((instrument_find_note_adhoc_21 (lambda (notes:NoteData** lgth) (let ((idx 0) (i 0) (old (note_starttime (pref notes 0))) (active #f) (starttime 0) (go #t)) (while (= #t go) (set! starttime (note_starttime (pref notes i))) (if (< starttime old) (begin (set! old starttime) (set! idx i))) (set! active (note_active (pref notes i))) (if (not active) (begin (set! idx i) (set! go #f))) (set! i (+ i 1)) (if (= i lgth) (set! go #f)) void) (pref notes idx))))) instrument_find_note_adhoc_21))
(bind-poly instrument_find_note instrument_find_note_adhoc_W05vdGVEYXRhKixOb3RlRGF0YSoqLGk2NF0 "")
(register-lib-func xtminstruments make_instrument_adhoc_W1tmbG9hdCxmbG9hdCxpNjQsaTY0LGZsb2F0Kl0qLFtbZmxvYXQsaTY0LGk2NF0qLE5vdGVEYXRhKixpNjQsZmxvYXQqXSosW2Zsb2F0LGZsb2F0LGk2NCxpNjQsZmxvYXQqXSpd [[float,float,i64,i64,float*]*,[[float,i64,i64]*,NoteData*,i64,float*]*,[float,float,i64,i64,float*]*]* 0 "" '(let ((make_instrument_adhoc_22 (lambda (note_kernel:NOTE_KERNEL effect_kernel:FX_KERNEL) (effect_kernel.notekernel:NOTE_KERNEL note_kernel) (let* ((maxpoly:i64 MAXPOLYPHONY) (tmp_active:i64 0) (numactive:i64 0) (poly:i64 maxpoly) (notes:NoteData** (zalloc poly)) (note_event_buf:i64 10) (note_events:<i64,SAMPLE,SAMPLE,i64,NoteData*>* (alloc note_event_buf)) (note_event:<i64,SAMPLE,SAMPLE,i64,NoteData*>* null) (note_event_b:<i64,SAMPLE,SAMPLE,i64,NoteData*>* null) (note_event_c:<i64,SAMPLE,SAMPLE,i64,NoteData*>* null) (note_event_in_idx:i64 0) (note_event_out_idx:i64 0) (note_event_out_idx_b:i64 0) (note_event_out_idx_c:i64 0) (note_event_out_time:i64 -1) (note_event_out_time_b:i64 -1) (note_event_out_time_c:i64 -1) (note_event_note:NoteData* null) (note:NoteData* null) (kernels:[SAMPLE,i64,i64]** (zalloc poly)) (kernel:[SAMPLE,i64,i64]* null) (nullkernel:[SAMPLE,i64,i64]* null) (starttime:i64 0) (out:SAMPLE 0.00000000000000000000) (zzone:mzone* null) (k:i64 0) (i:i64 0) (j:i64 0) (new_note (lambda (start:i64 freq:SAMPLE dur:i64 amp:SAMPLE nargs:i64 dargs:SAMPLE*) (let ((free_note (instrument_find_note notes poly)) (idx (note_idx free_note)) (zone (note_zone free_note))) (if (null? free_note) null (if (or (note_active free_note) #f) (begin (set! kernel (pref kernels (note_idx free_note))) (tset! free_note 2 freq) (tset! free_note 3 amp) (tset! free_note 4 dur) (tset! free_note 5 1.0000000000000000000) (tset! free_note 7 start) (cset! (cast kernel [void]*) data free_note NoteData*) free_note) (begin (reset_zone zone) (push_zone zone) (tfill! free_note idx start freq amp dur 1.0000000000000000000 #f start (cast zone i8*)) (pset! kernels idx (note_kernel free_note nargs dargs)) (note_active free_note #t) (pop_zone) free_note))))))) (dotimes (i 10) (tfill! (pref-ptr note_events i) -1 0.00000000000000000000 0.00000000000000000000 0 null)) (dotimes (i poly) (pset! kernels i (cast null)) (pset! notes i (NoteData i 0 0.00000000000000000000 0.00000000000000000000 0 1.0000000000000000000 #f 0 (cast (create_zone (* 10 1024)))))) (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*) (set! out 0.00000000000000000000) (set! tmp_active 0) (dotimes (k poly) (set! note (pref notes k)) (set! starttime (tref note 1)) (if (not (tref note 6)) (begin void) (begin (set! tmp_active (+ tmp_active 1)) void)) (set! kernel (pref kernels k)) (if (and (>= time starttime) (tref note 6)) (set! out (+ out (* 0.20000000000000001110 (kernel time chan)))))) (set! numactive tmp_active) (effect_kernel out time chan dat)))))) make_instrument_adhoc_22))
(bind-poly make_instrument make_instrument_adhoc_W1tmbG9hdCxmbG9hdCxpNjQsaTY0LGZsb2F0Kl0qLFtbZmxvYXQsaTY0LGk2NF0qLE5vdGVEYXRhKixpNjQsZmxvYXQqXSosW2Zsb2F0LGZsb2F0LGk2NCxpNjQsZmxvYXQqXSpd "")
(register-lib-func xtminstruments xtm_play_note_adhoc_W05vdGVEYXRhKixpNjQsW2Zsb2F0LGZsb2F0LGk2NCxpNjQsZmxvYXQqXSosZmxvYXQsZmxvYXQsaTY0LGk2NCxmbG9hdCpd [NoteData*,i64,[float,float,i64,i64,float*]*,float,float,i64,i64,float*]* 0 "" '(let ((xtm_play_note_adhoc_23 (lambda (time inst:INSTRUMENT freq amp dur nargs:i64 dargs) (if (> freq 10.000000000000000000) (let ((f (inst.new_note:[NoteData*,i64,SAMPLE,i64,SAMPLE,i64,SAMPLE*]*)) (note:NoteData* (f time freq dur amp nargs dargs))) note) null)))) xtm_play_note_adhoc_23))
(bind-poly xtm_play_note xtm_play_note_adhoc_W05vdGVEYXRhKixpNjQsW2Zsb2F0LGZsb2F0LGk2NCxpNjQsZmxvYXQqXSosZmxvYXQsZmxvYXQsaTY0LGk2NCxmbG9hdCpd "")
(register-lib-func xtminstruments xtm_start_note_adhoc_W05vdGVEYXRhKixpNjQsW2Zsb2F0LGZsb2F0LGk2NCxpNjQsZmxvYXQqXSosZmxvYXQsZmxvYXQsaTY0LGZsb2F0Kl0 [NoteData*,i64,[float,float,i64,i64,float*]*,float,float,i64,float*]* 0 "" '(let ((xtm_start_note_adhoc_24 (lambda (time inst:INSTRUMENT freq amp nargs:i64 dargs) (if (> freq 10.000000000000000000) (let ((dur 1000000000000) (f (inst.new_note:[NoteData*,i64,SAMPLE,i64,SAMPLE,i64,SAMPLE*]*)) (note:NoteData* (f time freq dur amp nargs dargs))) note) null)))) xtm_start_note_adhoc_24))
(bind-poly xtm_start_note xtm_start_note_adhoc_W05vdGVEYXRhKixpNjQsW2Zsb2F0LGZsb2F0LGk2NCxpNjQsZmxvYXQqXSosZmxvYXQsZmxvYXQsaTY0LGZsb2F0Kl0 "")
(register-lib-func xtminstruments xtm_stop_note_adhoc_W3ZvaWQsaTgqXQ [void,i8*]* 0 "" '(let ((xtm_stop_note_adhoc_25 (lambda (note:i8*) (let ((nd:NoteData* (cast note))) (if (not (null? nd)) (note_active nd #f))) void))) xtm_stop_note_adhoc_25))
(bind-poly xtm_stop_note xtm_stop_note_adhoc_W3ZvaWQsaTgqXQ "")
(register-lib-func xtminstruments xtm_release_note_adhoc_W3ZvaWQsaTgqXQ [void,i8*]* 0 "" '(let ((xtm_release_note_adhoc_26 (lambda (note:i8*) (let ((nd:NoteData* (cast note))) (if (not (null? nd)) (note_gate nd 0.00000000000000000000))) void))) xtm_release_note_adhoc_26))
(bind-poly xtm_release_note xtm_release_note_adhoc_W3ZvaWQsaTgqXQ "")
(register-lib-func xtminstruments xtm_play_adhoc_W05vdGVEYXRhKixkb3VibGUsW3ZvaWRdKixbZmxvYXQsZmxvYXQsaTY0LGk2NCxmbG9hdCpdKixkb3VibGUsZG91YmxlLGRvdWJsZSxpNjQsZmxvYXQqXQ [NoteData*,double,[void]*,[float,float,i64,i64,float*]*,double,double,double,i64,float*]* 0 "" '(let ((xtm_play_adhoc_27 (lambda (offset:double bsched:[void]* inst:[SAMPLE,SAMPLE,i64,i64,SAMPLE*]* pitch:double vol:double dur:double num:i64 mem:SAMPLE*) (let ((bpm (bsched.bpm))) (xtm_play_note (+ (now) (dtoi64 (* offset (/ 60.000000000000000000 bpm) SRd))) inst (midi2frq (convert pitch)) (convert (/ (exp (/ vol 26.222000000000001307)) 127.00000000000000000)) (dtoi64 (* dur (/ 60.000000000000000000 bpm) SRd)) num mem))))) xtm_play_adhoc_27))
(bind-poly xtm_play xtm_play_adhoc_W05vdGVEYXRhKixkb3VibGUsW3ZvaWRdKixbZmxvYXQsZmxvYXQsaTY0LGk2NCxmbG9hdCpdKixkb3VibGUsZG91YmxlLGRvdWJsZSxpNjQsZmxvYXQqXQ "")
(bind-macro (play . args) "xtlang play macro\r\n\r\nfor use with native beat shceduler" (let ((ns 0) (instargs '())) (if (symbol? (car args)) (begin (set! ns (- (length args) 5)) (set! instargs (map (lambda (a) (list 'convert (list '* '1.0:double a))) (cdr (cddddr args)))) `(let ((dat:SAMPLE* ,(if (= ns 0) 'null `(alloc ,ns)))) ,(if (> ns 0) `(pfill! dat ,@instargs) 1) (xtm_play 0.00000000000000000000 ,(car args) ,(cadr args) (convert ,(caddr args)) (convert ,(cadddr args)) (convert (* 1.0:double (* 1/1 ,(car (cddddr args))))) ,ns dat))) (begin (set! ns (- (length args) 6)) (set! instargs (map (lambda (a) (list 'convert (list '* '1.0:double a))) (cddr (cddddr args)))) `(let ((dat:SAMPLE* ,(if (= ns 0) 'null `(alloc ,ns)))) ,(if (> ns 0) `(pfill! dat ,@instargs) 1) (xtm_play ,(car args) ,(cadr args) ,(caddr args) (convert ,(cadddr args)) (convert ,(car (cddddr args))) (convert (* 1.0:double (* 1/1 ,(cadr (cddddr args))))) ,ns dat))))))
(sys:load "libs/core/instruments-scm.xtm")
(register-lib-val xtminstruments PARAM_SINE i32 "")
(register-lib-val xtminstruments PARAM_SAW i32 "")
(register-lib-val xtminstruments PARAM_PULSE i32 "")
(register-lib-val xtminstruments PARAM_TRI i32 "")
(register-lib-val xtminstruments PARAM_WT i32 "")
(register-lib-val xtminstruments PARAM_AD i32 "")
(register-lib-val xtminstruments PARAM_CONST i32 "")
(register-lib-val xtminstruments PARAM_RANDOM i32 "")
(register-lib-val xtminstruments PARAM_WHITE i32 "")
(register-lib-val xtminstruments PARAM_PINK i32 "")
(register-lib-val xtminstruments PARAM_LPF i32 "")
(register-lib-val xtminstruments PARAM_BPF i32 "")
(register-lib-val xtminstruments PARAM_HPF i32 "")
(register-lib-val xtminstruments PARAM_Notch i32 "")
(register-lib-val xtminstruments PARAM_Peak i32 "")
(register-lib-val xtminstruments PARAM_APF i32 "")
(register-lib-val xtminstruments PARAM_LFO1 i32 "")
(register-lib-val xtminstruments PARAM_LFO2 i32 "")
(register-lib-val xtminstruments PARAM_LFO3 i32 "")
(register-lib-val xtminstruments PARAM_LFO4 i32 "")
(register-lib-val xtminstruments PARAM_OSC1_AMP i32 "")
(register-lib-val xtminstruments PARAM_OSC1_FRQ i32 "")
(register-lib-val xtminstruments PARAM_OSC1_PW i32 "")
(register-lib-val xtminstruments PARAM_OSC1_PHASE i32 "")
(register-lib-val xtminstruments PARAM_OSC2_AMP i32 "")
(register-lib-val xtminstruments PARAM_OSC2_FRQ i32 "")
(register-lib-val xtminstruments PARAM_OSC2_PW i32 "")
(register-lib-val xtminstruments PARAM_OSC2_PHASE i32 "")
(register-lib-val xtminstruments PARAM_OSC3_AMP i32 "")
(register-lib-val xtminstruments PARAM_OSC3_FRQ i32 "")
(register-lib-val xtminstruments PARAM_OSC3_PW i32 "")
(register-lib-val xtminstruments PARAM_OSC3_PHASE i32 "")
(register-lib-val xtminstruments PARAM_OSC4_AMP i32 "")
(register-lib-val xtminstruments PARAM_OSC4_FRQ i32 "")
(register-lib-val xtminstruments PARAM_OSC4_PW i32 "")
(register-lib-val xtminstruments PARAM_OSC4_PHASE i32 "")
(register-lib-val xtminstruments PARAM_NOISE_AMP i32 "")
(register-lib-val xtminstruments PARAM_FILTER_FRQ i32 "")
(register-lib-val xtminstruments PARAM_FILTER_RES i32 "")
(register-lib-val xtminstruments PARAM_PAN_WIDTH i32 "")
(register-lib-val xtminstruments PARAM_PAN_POS i32 "")
(register-lib-val xtminstruments PARAM_DELAY_TIME_LEFT i32 "")
(register-lib-val xtminstruments PARAM_DELAY_TIME_RIGHT i32 "")
(register-lib-val xtminstruments PARAM_DELAY_FB i32 "")
(register-lib-val xtminstruments PARAM_REVERB_SIZE i32 "")
(register-lib-val xtminstruments PARAM_REVERB_PREDELAY i32 "")
(register-lib-val xtminstruments PARAM_REVERB_ABSORB i32 "")
(register-lib-val xtminstruments PARAM_REVERB_MIX i32 "")
(register-lib-val xtminstruments PARAM_FLANGER_LOW i32 "")
(register-lib-val xtminstruments PARAM_FLANGER_HIGH i32 "")
(register-lib-val xtminstruments PARAM_FLANGER_RATE i32 "")
(register-lib-val xtminstruments PARAM_FLANGER_FB i32 "")
(register-lib-func xtminstruments stop_running_adhoc_W3ZvaWQsaTgqXQ [void,i8*]* 0 "" '(let ((stop_running_adhoc_28 (lambda (inst:i8*) (let ((notes (cref (cast inst [void]*) notes NoteData**)) (i 0)) (dotimes (i MAXPOLYPHONY) (pset! notes i (NoteData i 0 0.00000000000000000000 0.00000000000000000000 0 1.0000000000000000000 #f 0 (cast (create_zone (* 10 1024)))))) void)))) stop_running_adhoc_28))
(bind-poly stop_running stop_running_adhoc_W3ZvaWQsaTgqXQ "")
(register-lib-func xtminstruments set_polyphony_adhoc_W3ZvaWQsaTgqLGk2NF0 [void,i8*,i64]* 0 "" '(let ((set_polyphony_adhoc_29 (lambda (inst:i8* val:i64) (stop_running inst) (if (and (> val 0) (< val (+ 1 MAXPOLYPHONY))) (begin (cset! (cast inst [void]*) poly val i64) void) (begin (println "Invalid argument, must be greater than 0 and less than MAXPOLYPHONY") void)) void))) set_polyphony_adhoc_29))
(bind-poly set_polyphony set_polyphony_adhoc_W3ZvaWQsaTgqLGk2NF0 "")
(register-lib-func xtminstruments get_polyphony_adhoc_W2k2NCxpOCpd [i64,i8*]* 0 "" '(let ((get_polyphony_adhoc_30 (lambda (inst:i8*) (cref (cast inst [void]*) poly i64)))) get_polyphony_adhoc_30))
(bind-poly get_polyphony get_polyphony_adhoc_W2k2NCxpOCpd "")
(register-lib-func xtminstruments set_monophonic_adhoc_W3ZvaWQsaTgqXQ [void,i8*]* 0 "" '(let ((set_monophonic_adhoc_31 (lambda (inst:i8*) (stop_running inst) (cset! (cast inst [void]*) poly 1 i64) void))) set_monophonic_adhoc_31))
(bind-poly set_monophonic set_monophonic_adhoc_W3ZvaWQsaTgqXQ "")
(register-lib-func xtminstruments set_polyphonic_adhoc_W3ZvaWQsaTgqXQ [void,i8*]* 0 "" '(let ((set_polyphonic_adhoc_32 (lambda (inst:i8*) (stop_running inst) (cset! (cast inst [void]*) poly MAXPOLYPHONY i64) void))) set_polyphonic_adhoc_32))
(bind-poly set_polyphonic set_polyphonic_adhoc_W3ZvaWQsaTgqXQ "")
(register-lib-func xtminstruments active_notes_adhoc_W2kzMixpOCpd [i32,i8*]* 0 "" '(let ((active_notes_adhoc_33 (lambda (inst:i8*) (let ((val (cref (cast inst [void]*) numactive i64))) (convert val i32))))) active_notes_adhoc_33))
(bind-poly active_notes active_notes_adhoc_W2kzMixpOCpd "")
(bind-lib xtminstruments set_portamento [void,i8*,float]*)
(bind-lib xtminstruments set_portamento_scheme [i8*,i8*,i8*]*)
(mk-ff "set_portamento" (llvm:get-function-pointer "set_portamento_scheme"))
(bind-lib xtminstruments get_portamento [float,i8*]*)
(bind-lib xtminstruments get_portamento_scheme [i8*,i8*,i8*]*)
(mk-ff "get_portamento" (llvm:get-function-pointer "get_portamento_scheme"))
(bind-lib xtminstruments set_legato [void,i8*,i32]*)
(bind-lib xtminstruments set_legato_scheme [i8*,i8*,i8*]*)
(mk-ff "set_legato" (llvm:get-function-pointer "set_legato_scheme"))
(bind-lib xtminstruments get_legato [i1,i8*]*)
(bind-lib xtminstruments get_legato_scheme [i8*,i8*,i8*]*)
(mk-ff "get_legato" (llvm:get-function-pointer "get_legato_scheme"))
(bind-lib xtminstruments set_osc1_phase [void,i8*,float]*)
(bind-lib xtminstruments set_osc1_phase_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc1_phase" (llvm:get-function-pointer "set_osc1_phase_scheme"))
(bind-lib xtminstruments get_osc1_phase [float,i8*]*)
(bind-lib xtminstruments get_osc1_phase_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc1_phase" (llvm:get-function-pointer "get_osc1_phase_scheme"))
(bind-lib xtminstruments set_osc1_amp [void,i8*,float]*)
(bind-lib xtminstruments set_osc1_amp_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc1_amp" (llvm:get-function-pointer "set_osc1_amp_scheme"))
(bind-lib xtminstruments get_osc1_amp [float,i8*]*)
(bind-lib xtminstruments get_osc1_amp_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc1_amp" (llvm:get-function-pointer "get_osc1_amp_scheme"))
(bind-lib xtminstruments set_osc1_tune [void,i8*,float]*)
(bind-lib xtminstruments set_osc1_tune_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc1_tune" (llvm:get-function-pointer "set_osc1_tune_scheme"))
(bind-lib xtminstruments get_osc1_tune [float,i8*]*)
(bind-lib xtminstruments get_osc1_tune_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc1_tune" (llvm:get-function-pointer "get_osc1_tune_scheme"))
(bind-lib xtminstruments set_osc1_pw [void,i8*,float]*)
(bind-lib xtminstruments set_osc1_pw_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc1_pw" (llvm:get-function-pointer "set_osc1_pw_scheme"))
(bind-lib xtminstruments get_osc1_pw [float,i8*]*)
(bind-lib xtminstruments get_osc1_pw_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc1_pw" (llvm:get-function-pointer "get_osc1_pw_scheme"))
(bind-lib xtminstruments set_osc1_wave [void,i8*,i32]*)
(bind-lib xtminstruments set_osc1_wave_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc1_wave" (llvm:get-function-pointer "set_osc1_wave_scheme"))
(bind-lib xtminstruments get_osc1_wave [i32,i8*]*)
(bind-lib xtminstruments get_osc1_wave_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc1_wave" (llvm:get-function-pointer "get_osc1_wave_scheme"))
(bind-lib xtminstruments set_osc1_wt [void,i8*,AudioBuffer*]*)
(bind-lib xtminstruments set_osc1_wt_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc1_wt" (llvm:get-function-pointer "set_osc1_wt_scheme"))
(bind-lib xtminstruments get_osc1_wt [AudioBuffer*,i8*]*)
(bind-lib xtminstruments get_osc1_wt_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc1_wt" (llvm:get-function-pointer "get_osc1_wt_scheme"))
(bind-lib xtminstruments set_osc2_phase [void,i8*,float]*)
(bind-lib xtminstruments set_osc2_phase_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc2_phase" (llvm:get-function-pointer "set_osc2_phase_scheme"))
(bind-lib xtminstruments get_osc2_phase [float,i8*]*)
(bind-lib xtminstruments get_osc2_phase_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc2_phase" (llvm:get-function-pointer "get_osc2_phase_scheme"))
(bind-lib xtminstruments set_osc2_amp [void,i8*,float]*)
(bind-lib xtminstruments set_osc2_amp_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc2_amp" (llvm:get-function-pointer "set_osc2_amp_scheme"))
(bind-lib xtminstruments get_osc2_amp [float,i8*]*)
(bind-lib xtminstruments get_osc2_amp_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc2_amp" (llvm:get-function-pointer "get_osc2_amp_scheme"))
(bind-lib xtminstruments set_osc2_tune [void,i8*,float]*)
(bind-lib xtminstruments set_osc2_tune_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc2_tune" (llvm:get-function-pointer "set_osc2_tune_scheme"))
(bind-lib xtminstruments get_osc2_tune [float,i8*]*)
(bind-lib xtminstruments get_osc2_tune_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc2_tune" (llvm:get-function-pointer "get_osc2_tune_scheme"))
(bind-lib xtminstruments set_osc2_pw [void,i8*,float]*)
(bind-lib xtminstruments set_osc2_pw_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc2_pw" (llvm:get-function-pointer "set_osc2_pw_scheme"))
(bind-lib xtminstruments get_osc2_pw [float,i8*]*)
(bind-lib xtminstruments get_osc2_pw_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc2_pw" (llvm:get-function-pointer "get_osc2_pw_scheme"))
(bind-lib xtminstruments set_osc2_wave [void,i8*,i32]*)
(bind-lib xtminstruments set_osc2_wave_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc2_wave" (llvm:get-function-pointer "set_osc2_wave_scheme"))
(bind-lib xtminstruments get_osc2_wave [i32,i8*]*)
(bind-lib xtminstruments get_osc2_wave_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc2_wave" (llvm:get-function-pointer "get_osc2_wave_scheme"))
(bind-lib xtminstruments set_osc2_wt [void,i8*,AudioBuffer*]*)
(bind-lib xtminstruments set_osc2_wt_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc2_wt" (llvm:get-function-pointer "set_osc2_wt_scheme"))
(bind-lib xtminstruments get_osc2_wt [AudioBuffer*,i8*]*)
(bind-lib xtminstruments get_osc2_wt_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc2_wt" (llvm:get-function-pointer "get_osc2_wt_scheme"))
(bind-lib xtminstruments set_osc3_phase [void,i8*,float]*)
(bind-lib xtminstruments set_osc3_phase_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc3_phase" (llvm:get-function-pointer "set_osc3_phase_scheme"))
(bind-lib xtminstruments get_osc3_phase [float,i8*]*)
(bind-lib xtminstruments get_osc3_phase_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc3_phase" (llvm:get-function-pointer "get_osc3_phase_scheme"))
(bind-lib xtminstruments set_osc3_amp [void,i8*,float]*)
(bind-lib xtminstruments set_osc3_amp_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc3_amp" (llvm:get-function-pointer "set_osc3_amp_scheme"))
(bind-lib xtminstruments get_osc3_amp [float,i8*]*)
(bind-lib xtminstruments get_osc3_amp_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc3_amp" (llvm:get-function-pointer "get_osc3_amp_scheme"))
(bind-lib xtminstruments set_osc3_tune [void,i8*,float]*)
(bind-lib xtminstruments set_osc3_tune_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc3_tune" (llvm:get-function-pointer "set_osc3_tune_scheme"))
(bind-lib xtminstruments get_osc3_tune [float,i8*]*)
(bind-lib xtminstruments get_osc3_tune_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc3_tune" (llvm:get-function-pointer "get_osc3_tune_scheme"))
(bind-lib xtminstruments set_osc3_pw [void,i8*,float]*)
(bind-lib xtminstruments set_osc3_pw_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc3_pw" (llvm:get-function-pointer "set_osc3_pw_scheme"))
(bind-lib xtminstruments get_osc3_pw [float,i8*]*)
(bind-lib xtminstruments get_osc3_pw_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc3_pw" (llvm:get-function-pointer "get_osc3_pw_scheme"))
(bind-lib xtminstruments set_osc3_wave [void,i8*,i32]*)
(bind-lib xtminstruments set_osc3_wave_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc3_wave" (llvm:get-function-pointer "set_osc3_wave_scheme"))
(bind-lib xtminstruments get_osc3_wave [i32,i8*]*)
(bind-lib xtminstruments get_osc3_wave_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc3_wave" (llvm:get-function-pointer "get_osc3_wave_scheme"))
(bind-lib xtminstruments set_osc3_wt [void,i8*,AudioBuffer*]*)
(bind-lib xtminstruments set_osc3_wt_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc3_wt" (llvm:get-function-pointer "set_osc3_wt_scheme"))
(bind-lib xtminstruments get_osc3_wt [AudioBuffer*,i8*]*)
(bind-lib xtminstruments get_osc3_wt_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc3_wt" (llvm:get-function-pointer "get_osc3_wt_scheme"))
(bind-lib xtminstruments set_osc4_phase [void,i8*,float]*)
(bind-lib xtminstruments set_osc4_phase_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc4_phase" (llvm:get-function-pointer "set_osc4_phase_scheme"))
(bind-lib xtminstruments get_osc4_phase [float,i8*]*)
(bind-lib xtminstruments get_osc4_phase_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc4_phase" (llvm:get-function-pointer "get_osc4_phase_scheme"))
(bind-lib xtminstruments set_osc4_amp [void,i8*,float]*)
(bind-lib xtminstruments set_osc4_amp_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc4_amp" (llvm:get-function-pointer "set_osc4_amp_scheme"))
(bind-lib xtminstruments get_osc4_amp [float,i8*]*)
(bind-lib xtminstruments get_osc4_amp_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc4_amp" (llvm:get-function-pointer "get_osc4_amp_scheme"))
(bind-lib xtminstruments set_osc4_tune [void,i8*,float]*)
(bind-lib xtminstruments set_osc4_tune_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc4_tune" (llvm:get-function-pointer "set_osc4_tune_scheme"))
(bind-lib xtminstruments get_osc4_tune [float,i8*]*)
(bind-lib xtminstruments get_osc4_tune_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc4_tune" (llvm:get-function-pointer "get_osc4_tune_scheme"))
(bind-lib xtminstruments set_osc4_pw [void,i8*,float]*)
(bind-lib xtminstruments set_osc4_pw_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc4_pw" (llvm:get-function-pointer "set_osc4_pw_scheme"))
(bind-lib xtminstruments get_osc4_pw [float,i8*]*)
(bind-lib xtminstruments get_osc4_pw_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc4_pw" (llvm:get-function-pointer "get_osc4_pw_scheme"))
(bind-lib xtminstruments set_osc4_wave [void,i8*,i32]*)
(bind-lib xtminstruments set_osc4_wave_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc4_wave" (llvm:get-function-pointer "set_osc4_wave_scheme"))
(bind-lib xtminstruments get_osc4_wave [i32,i8*]*)
(bind-lib xtminstruments get_osc4_wave_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc4_wave" (llvm:get-function-pointer "get_osc4_wave_scheme"))
(bind-lib xtminstruments set_osc4_wt [void,i8*,AudioBuffer*]*)
(bind-lib xtminstruments set_osc4_wt_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc4_wt" (llvm:get-function-pointer "set_osc4_wt_scheme"))
(bind-lib xtminstruments get_osc4_wt [AudioBuffer*,i8*]*)
(bind-lib xtminstruments get_osc4_wt_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc4_wt" (llvm:get-function-pointer "get_osc4_wt_scheme"))
(bind-lib xtminstruments set_osc_slop [void,i8*,float]*)
(bind-lib xtminstruments set_osc_slop_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc_slop" (llvm:get-function-pointer "set_osc_slop_scheme"))
(bind-lib xtminstruments get_osc_slop [float,i8*]*)
(bind-lib xtminstruments get_osc_slop_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc_slop" (llvm:get-function-pointer "get_osc_slop_scheme"))
(bind-lib xtminstruments set_osc_phase_slop [void,i8*,float]*)
(bind-lib xtminstruments set_osc_phase_slop_scheme [i8*,i8*,i8*]*)
(mk-ff "set_osc_phase_slop" (llvm:get-function-pointer "set_osc_phase_slop_scheme"))
(bind-lib xtminstruments get_osc_phase_slop [float,i8*]*)
(bind-lib xtminstruments get_osc_phase_slop_scheme [i8*,i8*,i8*]*)
(mk-ff "get_osc_phase_slop" (llvm:get-function-pointer "get_osc_phase_slop_scheme"))
(bind-lib xtminstruments set_sub_amp [void,i8*,float]*)
(bind-lib xtminstruments set_sub_amp_scheme [i8*,i8*,i8*]*)
(mk-ff "set_sub_amp" (llvm:get-function-pointer "set_sub_amp_scheme"))
(bind-lib xtminstruments get_sub_amp [float,i8*]*)
(bind-lib xtminstruments get_sub_amp_scheme [i8*,i8*,i8*]*)
(mk-ff "get_sub_amp" (llvm:get-function-pointer "get_sub_amp_scheme"))
(register-lib-func xtminstruments set_noise_type_adhoc_W3ZvaWQsaTgqLGkzMl0 [void,i8*,i32]* 0 "" '(let ((set_noise_type_adhoc_92 (lambda (inst:i8* val:i32) (let ((note (cref (cast inst [void]*) note_kernel [void]*))) (cset! note noise val enum) void)))) set_noise_type_adhoc_92))
(bind-poly set_noise_type set_noise_type_adhoc_W3ZvaWQsaTgqLGkzMl0 "")
(register-lib-func xtminstruments get_noise_type_adhoc_W2kzMixpOCpd [i32,i8*]* 0 "" '(let ((get_noise_type_adhoc_93 (lambda (inst:i8*) (let ((note (cref (cast inst [void]*) note_kernel [void]*))) (cref note noise enum))))) get_noise_type_adhoc_93))
(bind-poly get_noise_type get_noise_type_adhoc_W2kzMixpOCpd "")
(register-lib-func xtminstruments set_noise_amp_adhoc_W3ZvaWQsaTgqLGZsb2F0XQ [void,i8*,float]* 0 "" '(let ((set_noise_amp_adhoc_94 (lambda (inst:i8* val:float) (let ((note (cref (cast inst [void]*) note_kernel [void]*))) (cset! note noise_amp val float) void)))) set_noise_amp_adhoc_94))
(bind-poly set_noise_amp set_noise_amp_adhoc_W3ZvaWQsaTgqLGZsb2F0XQ "")
(register-lib-func xtminstruments get_noise_amp_adhoc_W2Zsb2F0LGk4Kl0 [float,i8*]* 0 "" '(let ((get_noise_amp_adhoc_95 (lambda (inst:i8*) (let ((note (cref (cast inst [void]*) note_kernel [void]*))) (cref note noise_amp float))))) get_noise_amp_adhoc_95))
(bind-poly get_noise_amp get_noise_amp_adhoc_W2Zsb2F0LGk4Kl0 "")
(bind-lib xtminstruments set_cutoff [void,i8*,float]*)
(bind-lib xtminstruments set_cutoff_scheme [i8*,i8*,i8*]*)
(mk-ff "set_cutoff" (llvm:get-function-pointer "set_cutoff_scheme"))
(bind-lib xtminstruments get_cutoff [float,i8*]*)
(bind-lib xtminstruments get_cutoff_scheme [i8*,i8*,i8*]*)
(mk-ff "get_cutoff" (llvm:get-function-pointer "get_cutoff_scheme"))
(bind-lib xtminstruments set_filter_cutoff [void,i8*,float]*)
(bind-lib xtminstruments set_filter_cutoff_scheme [i8*,i8*,i8*]*)
(mk-ff "set_filter_cutoff" (llvm:get-function-pointer "set_filter_cutoff_scheme"))
(bind-lib xtminstruments get_filter_cutoff [float,i8*]*)
(bind-lib xtminstruments get_filter_cutoff_scheme [i8*,i8*,i8*]*)
(mk-ff "get_filter_cutoff" (llvm:get-function-pointer "get_filter_cutoff_scheme"))
(bind-lib xtminstruments set_filter_frq [void,i8*,float]*)
(bind-lib xtminstruments set_filter_frq_scheme [i8*,i8*,i8*]*)
(mk-ff "set_filter_frq" (llvm:get-function-pointer "set_filter_frq_scheme"))
(bind-lib xtminstruments get_filter_frq [float,i8*]*)
(bind-lib xtminstruments get_filter_frq_scheme [i8*,i8*,i8*]*)
(mk-ff "get_filter_frq" (llvm:get-function-pointer "get_filter_frq_scheme"))
(bind-lib xtminstruments set_lpf_frq [void,i8*,float]*)
(bind-lib xtminstruments set_lpf_frq_scheme [i8*,i8*,i8*]*)
(mk-ff "set_lpf_frq" (llvm:get-function-pointer "set_lpf_frq_scheme"))
(bind-lib xtminstruments get_lpf_frq [float,i8*]*)
(bind-lib xtminstruments get_lpf_frq_scheme [i8*,i8*,i8*]*)
(mk-ff "get_lpf_frq" (llvm:get-function-pointer "get_lpf_frq_scheme"))
(bind-lib xtminstruments set_lpf_cutoff [void,i8*,float]*)
(bind-lib xtminstruments set_lpf_cutoff_scheme [i8*,i8*,i8*]*)
(mk-ff "set_lpf_cutoff" (llvm:get-function-pointer "set_lpf_cutoff_scheme"))
(bind-lib xtminstruments get_lpf_cutoff [float,i8*]*)
(bind-lib xtminstruments get_lpf_cutoff_scheme [i8*,i8*,i8*]*)
(mk-ff "get_lpf_cutoff" (llvm:get-function-pointer "get_lpf_cutoff_scheme"))
(bind-lib xtminstruments set_filter_type [void,i8*,i32]*)
(bind-lib xtminstruments set_filter_type_scheme [i8*,i8*,i8*]*)
(mk-ff "set_filter_type" (llvm:get-function-pointer "set_filter_type_scheme"))
(bind-lib xtminstruments get_filter_type [i32,i8*]*)
(bind-lib xtminstruments get_filter_type_scheme [i8*,i8*,i8*]*)
(mk-ff "get_filter_type" (llvm:get-function-pointer "get_filter_type_scheme"))
(bind-lib xtminstruments set_filter_res [void,i8*,float]*)
(bind-lib xtminstruments set_filter_res_scheme [i8*,i8*,i8*]*)
(mk-ff "set_filter_res" (llvm:get-function-pointer "set_filter_res_scheme"))
(bind-lib xtminstruments get_filter_res [float,i8*]*)
(bind-lib xtminstruments get_filter_res_scheme [i8*,i8*,i8*]*)
(mk-ff "get_filter_res" (llvm:get-function-pointer "get_filter_res_scheme"))
(bind-lib xtminstruments set_lpf_res [void,i8*,float]*)
(bind-lib xtminstruments set_lpf_res_scheme [i8*,i8*,i8*]*)
(mk-ff "set_lpf_res" (llvm:get-function-pointer "set_lpf_res_scheme"))
(bind-lib xtminstruments get_lpf_res [float,i8*,float]*)
(bind-lib xtminstruments get_lpf_res_scheme [i8*,i8*,i8*]*)
(mk-ff "get_lpf_res" (llvm:get-function-pointer "get_lpf_res_scheme"))
(register-lib-func xtminstruments set_amp_env_adhoc_W3ZvaWQsaTgqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ [void,i8*,float,float,float,float]* 0 "" '(let ((set_amp_env_adhoc_112 (lambda (inst:i8* a:float d s r) (let ((note (cref (cast inst [void]*) note_kernel [void]*))) (cset! note amp_env (array a d s r) |4,float|) void)))) set_amp_env_adhoc_112))
(bind-poly set_amp_env set_amp_env_adhoc_W3ZvaWQsaTgqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtminstruments get_amp_env_adhoc_W3w0LGZsb2F0fCxpOCpd [|4,float|,i8*]* 0 "" '(let ((get_amp_env_adhoc_113 (lambda (inst:i8*) (let ((note (cref (cast inst [void]*) note_kernel [void]*))) (cref note amp_env |4,float|))))) get_amp_env_adhoc_113))
(bind-poly get_amp_env get_amp_env_adhoc_W3w0LGZsb2F0fCxpOCpd "")
(bind-lib xtminstruments get_amp_env_attack [float,i8*]*)
(bind-lib xtminstruments get_amp_env_attack_scheme [i8*,i8*,i8*]*)
(mk-ff "get_amp_env_attack" (llvm:get-function-pointer "get_amp_env_attack_scheme"))
(bind-lib xtminstruments set_amp_env_attack [void,i8*,float]*)
(bind-lib xtminstruments set_amp_env_attack_scheme [i8*,i8*,i8*]*)
(mk-ff "set_amp_env_attack" (llvm:get-function-pointer "set_amp_env_attack_scheme"))
(bind-lib xtminstruments get_amp_env_decay [float,i8*]*)
(bind-lib xtminstruments get_amp_env_decay_scheme [i8*,i8*,i8*]*)
(mk-ff "get_amp_env_decay" (llvm:get-function-pointer "get_amp_env_decay_scheme"))
(bind-lib xtminstruments set_amp_env_decay [void,i8*,float]*)
(bind-lib xtminstruments set_amp_env_decay_scheme [i8*,i8*,i8*]*)
(mk-ff "set_amp_env_decay" (llvm:get-function-pointer "set_amp_env_decay_scheme"))
(bind-lib xtminstruments get_amp_env_sustain [float,i8*]*)
(bind-lib xtminstruments get_amp_env_sustain_scheme [i8*,i8*,i8*]*)
(mk-ff "get_amp_env_sustain" (llvm:get-function-pointer "get_amp_env_sustain_scheme"))
(bind-lib xtminstruments set_amp_env_sustain [void,i8*,float]*)
(bind-lib xtminstruments set_amp_env_sustain_scheme [i8*,i8*,i8*]*)
(mk-ff "set_amp_env_sustain" (llvm:get-function-pointer "set_amp_env_sustain_scheme"))
(bind-lib xtminstruments get_amp_env_release [float,i8*]*)
(bind-lib xtminstruments get_amp_env_release_scheme [i8*,i8*,i8*]*)
(mk-ff "get_amp_env_release" (llvm:get-function-pointer "get_amp_env_release_scheme"))
(bind-lib xtminstruments set_amp_env_release [void,i8*,float]*)
(bind-lib xtminstruments set_amp_env_release_scheme [i8*,i8*,i8*]*)
(mk-ff "set_amp_env_release" (llvm:get-function-pointer "set_amp_env_release_scheme"))
(bind-lib xtminstruments get_mod_env_delay [float,i8*]*)
(bind-lib xtminstruments get_mod_env_delay_scheme [i8*,i8*,i8*]*)
(mk-ff "get_mod_env_delay" (llvm:get-function-pointer "get_mod_env_delay_scheme"))
(bind-lib xtminstruments set_mod_env_delay [void,i8*,float]*)
(bind-lib xtminstruments set_mod_env_delay_scheme [i8*,i8*,i8*]*)
(mk-ff "set_mod_env_delay" (llvm:get-function-pointer "set_mod_env_delay_scheme"))
(bind-lib xtminstruments set_mod_env [void,i8*,float,float,float,float]*)
(bind-lib xtminstruments set_mod_env_scheme [i8*,i8*,i8*]*)
(mk-ff "set_mod_env" (llvm:get-function-pointer "set_mod_env_scheme"))
(bind-lib xtminstruments get_mod_env [|4,float|,i8*]*)
(bind-lib xtminstruments get_mod_env_attack [float,i8*]*)
(bind-lib xtminstruments get_mod_env_attack_scheme [i8*,i8*,i8*]*)
(mk-ff "get_mod_env_attack" (llvm:get-function-pointer "get_mod_env_attack_scheme"))
(bind-lib xtminstruments set_mod_env_attack [void,i8*,float]*)
(bind-lib xtminstruments set_mod_env_attack_scheme [i8*,i8*,i8*]*)
(mk-ff "set_mod_env_attack" (llvm:get-function-pointer "set_mod_env_attack_scheme"))
(bind-lib xtminstruments get_mod_env_decay [float,i8*]*)
(bind-lib xtminstruments get_mod_env_decay_scheme [i8*,i8*,i8*]*)
(mk-ff "get_mod_env_decay" (llvm:get-function-pointer "get_mod_env_decay_scheme"))
(bind-lib xtminstruments set_mod_env_decay [void,i8*,float]*)
(bind-lib xtminstruments set_mod_env_decay_scheme [i8*,i8*,i8*]*)
(mk-ff "set_mod_env_decay" (llvm:get-function-pointer "set_mod_env_decay_scheme"))
(bind-lib xtminstruments get_mod_env_sustain [float,i8*]*)
(bind-lib xtminstruments get_mod_env_sustain_scheme [i8*,i8*,i8*]*)
(mk-ff "get_mod_env_sustain" (llvm:get-function-pointer "get_mod_env_sustain_scheme"))
(bind-lib xtminstruments set_mod_env_sustain [void,i8*,float]*)
(bind-lib xtminstruments set_mod_env_sustain_scheme [i8*,i8*,i8*]*)
(mk-ff "set_mod_env_sustain" (llvm:get-function-pointer "set_mod_env_sustain_scheme"))
(bind-lib xtminstruments get_mod_env_release [float,i8*]*)
(bind-lib xtminstruments get_mod_env_release_scheme [i8*,i8*,i8*]*)
(mk-ff "get_mod_env_release" (llvm:get-function-pointer "get_mod_env_release_scheme"))
(bind-lib xtminstruments set_mod_env_release [void,i8*,float]*)
(bind-lib xtminstruments set_mod_env_release_scheme [i8*,i8*,i8*]*)
(mk-ff "set_mod_env_release" (llvm:get-function-pointer "set_mod_env_release_scheme"))
(register-lib-func xtminstruments set_filter_env_adhoc_W3ZvaWQsaTgqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ [void,i8*,float,float,float,float]* 0 "" '(let ((set_filter_env_adhoc_134 (lambda (inst:i8* a:float d s r) (let ((note (cref (cast inst [void]*) note_kernel [void]*))) (cset! note filter_env (array a d s r) |4,float|) void)))) set_filter_env_adhoc_134))
(bind-poly set_filter_env set_filter_env_adhoc_W3ZvaWQsaTgqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtminstruments get_filter_env_adhoc_W3w0LGZsb2F0fCxpOCpd [|4,float|,i8*]* 0 "" '(let ((get_filter_env_adhoc_135 (lambda (inst:i8*) (let ((note (cref (cast inst [void]*) note_kernel [void]*))) (cref note filter_env |4,float|))))) get_filter_env_adhoc_135))
(bind-poly get_filter_env get_filter_env_adhoc_W3w0LGZsb2F0fCxpOCpd "")
(bind-lib xtminstruments get_filter_env_attack [float,i8*]*)
(bind-lib xtminstruments get_filter_env_attack_scheme [i8*,i8*,i8*]*)
(mk-ff "get_filter_env_attack" (llvm:get-function-pointer "get_filter_env_attack_scheme"))
(bind-lib xtminstruments set_filter_env_attack [void,i8*,float]*)
(bind-lib xtminstruments set_filter_env_attack_scheme [i8*,i8*,i8*]*)
(mk-ff "set_filter_env_attack" (llvm:get-function-pointer "set_filter_env_attack_scheme"))
(bind-lib xtminstruments get_filter_env_decay [float,i8*]*)
(bind-lib xtminstruments get_filter_env_decay_scheme [i8*,i8*,i8*]*)
(mk-ff "get_filter_env_decay" (llvm:get-function-pointer "get_filter_env_decay_scheme"))
(bind-lib xtminstruments set_filter_env_decay [void,i8*,float]*)
(bind-lib xtminstruments set_filter_env_decay_scheme [i8*,i8*,i8*]*)
(mk-ff "set_filter_env_decay" (llvm:get-function-pointer "set_filter_env_decay_scheme"))
(bind-lib xtminstruments get_filter_env_sustain [float,i8*]*)
(bind-lib xtminstruments get_filter_env_sustain_scheme [i8*,i8*,i8*]*)
(mk-ff "get_filter_env_sustain" (llvm:get-function-pointer "get_filter_env_sustain_scheme"))
(bind-lib xtminstruments set_filter_env_sustain [void,i8*,float]*)
(bind-lib xtminstruments set_filter_env_sustain_scheme [i8*,i8*,i8*]*)
(mk-ff "set_filter_env_sustain" (llvm:get-function-pointer "set_filter_env_sustain_scheme"))
(bind-lib xtminstruments get_filter_env_release [float,i8*]*)
(bind-lib xtminstruments get_filter_env_release_scheme [i8*,i8*,i8*]*)
(mk-ff "get_filter_env_release" (llvm:get-function-pointer "get_filter_env_release_scheme"))
(bind-lib xtminstruments set_filter_env_release [void,i8*,float]*)
(bind-lib xtminstruments set_filter_env_release_scheme [i8*,i8*,i8*]*)
(mk-ff "set_filter_env_release" (llvm:get-function-pointer "set_filter_env_release_scheme"))
(bind-lib xtminstruments set_filter_env_amt [void,i8*,float]*)
(bind-lib xtminstruments set_filter_env_amt_scheme [i8*,i8*,i8*]*)
(mk-ff "set_filter_env_amt" (llvm:get-function-pointer "set_filter_env_amt_scheme"))
(bind-lib xtminstruments get_filter_env_amt [float,i8*]*)
(bind-lib xtminstruments get_filter_env_amt_scheme [i8*,i8*,i8*]*)
(mk-ff "get_filter_env_amt" (llvm:get-function-pointer "get_filter_env_amt_scheme"))
(register-lib-func xtminstruments set_pitch_env_adhoc_W3ZvaWQsaTgqLGZsb2F0LGZsb2F0XQ [void,i8*,float,float]* 0 "" '(let ((set_pitch_env_adhoc_146 (lambda (inst:i8* a:float d) (let ((note (cref (cast inst [void]*) note_kernel [void]*))) (cset! note pitch_env (array a d) |2,float|) void)))) set_pitch_env_adhoc_146))
(bind-poly set_pitch_env set_pitch_env_adhoc_W3ZvaWQsaTgqLGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtminstruments get_pitch_env_adhoc_W3wyLGZsb2F0fCxpOCpd [|2,float|,i8*]* 0 "" '(let ((get_pitch_env_adhoc_147 (lambda (inst:i8*) (let ((note (cref (cast inst [void]*) note_kernel [void]*))) (cref note pitch_env |2,float|))))) get_pitch_env_adhoc_147))
(bind-poly get_pitch_env get_pitch_env_adhoc_W3wyLGZsb2F0fCxpOCpd "")
(bind-lib xtminstruments get_pitch_env_attack [float,i8*]*)
(bind-lib xtminstruments get_pitch_env_attack_scheme [i8*,i8*,i8*]*)
(mk-ff "get_pitch_env_attack" (llvm:get-function-pointer "get_pitch_env_attack_scheme"))
(bind-lib xtminstruments set_pitch_env_attack [void,i8*,float]*)
(bind-lib xtminstruments set_pitch_env_attack_scheme [i8*,i8*,i8*]*)
(mk-ff "set_pitch_env_attack" (llvm:get-function-pointer "set_pitch_env_attack_scheme"))
(bind-lib xtminstruments get_pitch_env_decay [float,i8*]*)
(bind-lib xtminstruments get_pitch_env_decay_scheme [i8*,i8*,i8*]*)
(mk-ff "get_pitch_env_decay" (llvm:get-function-pointer "get_pitch_env_decay_scheme"))
(bind-lib xtminstruments set_pitch_env_decay [void,i8*,float]*)
(bind-lib xtminstruments set_pitch_env_decay_scheme [i8*,i8*,i8*]*)
(mk-ff "set_pitch_env_decay" (llvm:get-function-pointer "set_pitch_env_decay_scheme"))
(bind-lib xtminstruments set_pitch_env_amt [void,i8*,float]*)
(bind-lib xtminstruments set_pitch_env_amt_scheme [i8*,i8*,i8*]*)
(mk-ff "set_pitch_env_amt" (llvm:get-function-pointer "set_pitch_env_amt_scheme"))
(bind-lib xtminstruments get_pitch_env_amt [float,i8*]*)
(bind-lib xtminstruments get_pitch_env_amt_scheme [i8*,i8*,i8*]*)
(mk-ff "get_pitch_env_amt" (llvm:get-function-pointer "get_pitch_env_amt_scheme"))
(bind-lib xtminstruments set_filter_env_follow_frq [void,i8*,float]*)
(bind-lib xtminstruments set_filter_env_follow_frq_scheme [i8*,i8*,i8*]*)
(mk-ff "set_filter_env_follow_frq" (llvm:get-function-pointer "set_filter_env_follow_frq_scheme"))
(bind-lib xtminstruments get_filter_env_follow_frq [float,i8*]*)
(bind-lib xtminstruments get_filter_env_follow_frq_scheme [i8*,i8*,i8*]*)
(mk-ff "get_filter_env_follow_frq" (llvm:get-function-pointer "get_filter_env_follow_frq_scheme"))
(bind-lib xtminstruments set_filter_env_follow_amp [void,i8*,float]*)
(bind-lib xtminstruments set_filter_env_follow_amp_scheme [i8*,i8*,i8*]*)
(mk-ff "set_filter_env_follow_amp" (llvm:get-function-pointer "set_filter_env_follow_amp_scheme"))
(bind-lib xtminstruments get_filter_env_follow_amp [float,i8*]*)
(bind-lib xtminstruments get_filter_env_follow_amp_scheme [i8*,i8*,i8*]*)
(mk-ff "get_filter_env_follow_amp" (llvm:get-function-pointer "get_filter_env_follow_amp_scheme"))
(bind-lib xtminstruments set_filter_drive [void,i8*,float]*)
(bind-lib xtminstruments set_filter_drive_scheme [i8*,i8*,i8*]*)
(mk-ff "set_filter_drive" (llvm:get-function-pointer "set_filter_drive_scheme"))
(bind-lib xtminstruments get_filter_drive [float,i8*]*)
(bind-lib xtminstruments get_filter_drive_scheme [i8*,i8*,i8*]*)
(mk-ff "get_filter_drive" (llvm:get-function-pointer "get_filter_drive_scheme"))
(bind-lib xtminstruments set_gain [void,i8*,float]*)
(bind-lib xtminstruments set_gain_scheme [i8*,i8*,i8*]*)
(mk-ff "set_gain" (llvm:get-function-pointer "set_gain_scheme"))
(bind-lib xtminstruments get_gain [float,i8*]*)
(bind-lib xtminstruments get_gain_scheme [i8*,i8*,i8*]*)
(mk-ff "get_gain" (llvm:get-function-pointer "get_gain_scheme"))
(bind-lib xtminstruments set_hpf_frq [void,i8*,float]*)
(bind-lib xtminstruments set_hpf_frq_scheme [i8*,i8*,i8*]*)
(mk-ff "set_hpf_frq" (llvm:get-function-pointer "set_hpf_frq_scheme"))
(bind-lib xtminstruments get_hpf_frq [float,i8*]*)
(bind-lib xtminstruments get_hpf_frq_scheme [i8*,i8*,i8*]*)
(mk-ff "get_hpf_frq" (llvm:get-function-pointer "get_hpf_frq_scheme"))
(bind-lib xtminstruments set_delay_time [void,i8*,float]*)
(bind-lib xtminstruments set_delay_time_scheme [i8*,i8*,i8*]*)
(mk-ff "set_delay_time" (llvm:get-function-pointer "set_delay_time_scheme"))
(bind-lib xtminstruments get_delay_time [|2,float|,i8*]*)
(bind-lib xtminstruments set_delay_time_left [void,i8*,float]*)
(bind-lib xtminstruments set_delay_time_left_scheme [i8*,i8*,i8*]*)
(mk-ff "set_delay_time_left" (llvm:get-function-pointer "set_delay_time_left_scheme"))
(bind-lib xtminstruments get_delay_time_left [float,i8*]*)
(bind-lib xtminstruments get_delay_time_left_scheme [i8*,i8*,i8*]*)
(mk-ff "get_delay_time_left" (llvm:get-function-pointer "get_delay_time_left_scheme"))
(bind-lib xtminstruments set_delay_time_right [void,i8*,float]*)
(bind-lib xtminstruments set_delay_time_right_scheme [i8*,i8*,i8*]*)
(mk-ff "set_delay_time_right" (llvm:get-function-pointer "set_delay_time_right_scheme"))
(bind-lib xtminstruments get_delay_time_right [float,i8*]*)
(bind-lib xtminstruments get_delay_time_right_scheme [i8*,i8*,i8*]*)
(mk-ff "get_delay_time_right" (llvm:get-function-pointer "get_delay_time_right_scheme"))
(bind-lib xtminstruments set_delay_mix [void,i8*,float]*)
(bind-lib xtminstruments set_delay_mix_scheme [i8*,i8*,i8*]*)
(mk-ff "set_delay_mix" (llvm:get-function-pointer "set_delay_mix_scheme"))
(bind-lib xtminstruments get_delay_mix [float,i8*]*)
(bind-lib xtminstruments get_delay_mix_scheme [i8*,i8*,i8*]*)
(mk-ff "get_delay_mix" (llvm:get-function-pointer "get_delay_mix_scheme"))
(bind-lib xtminstruments set_delay_fb [void,i8*,float]*)
(bind-lib xtminstruments set_delay_fb_scheme [i8*,i8*,i8*]*)
(mk-ff "set_delay_fb" (llvm:get-function-pointer "set_delay_fb_scheme"))
(bind-lib xtminstruments get_delay_fb [float,i8*]*)
(bind-lib xtminstruments get_delay_fb_scheme [i8*,i8*,i8*]*)
(mk-ff "get_delay_fb" (llvm:get-function-pointer "get_delay_fb_scheme"))
(bind-lib xtminstruments set_delay_frq [void,i8*,float]*)
(bind-lib xtminstruments set_delay_frq_scheme [i8*,i8*,i8*]*)
(mk-ff "set_delay_frq" (llvm:get-function-pointer "set_delay_frq_scheme"))
(bind-lib xtminstruments get_delay_frq [float,i8*]*)
(bind-lib xtminstruments get_delay_frq_scheme [i8*,i8*,i8*]*)
(mk-ff "get_delay_frq" (llvm:get-function-pointer "get_delay_frq_scheme"))
(bind-lib xtminstruments set_delay_res [void,i8*,float]*)
(bind-lib xtminstruments set_delay_res_scheme [i8*,i8*,i8*]*)
(mk-ff "set_delay_res" (llvm:get-function-pointer "set_delay_res_scheme"))
(bind-lib xtminstruments get_delay_res [float,i8*]*)
(bind-lib xtminstruments get_delay_res_scheme [i8*,i8*,i8*]*)
(mk-ff "get_delay_res" (llvm:get-function-pointer "get_delay_res_scheme"))
(bind-lib xtminstruments set_overdrive_amt [void,i8*,float]*)
(bind-lib xtminstruments set_overdrive_amt_scheme [i8*,i8*,i8*]*)
(mk-ff "set_overdrive_amt" (llvm:get-function-pointer "set_overdrive_amt_scheme"))
(bind-lib xtminstruments get_overdrive_amt [float,i8*,float]*)
(bind-lib xtminstruments get_overdrive_amt_scheme [i8*,i8*,i8*]*)
(mk-ff "get_overdrive_amt" (llvm:get-function-pointer "get_overdrive_amt_scheme"))
(bind-lib xtminstruments set_lfo_ad [void,i8*,i32,float,float,float,float]*)
(bind-lib xtminstruments set_lfo_ad_scheme [i8*,i8*,i8*]*)
(mk-ff "set_lfo_ad" (llvm:get-function-pointer "set_lfo_ad_scheme"))
(bind-lib xtminstruments get_lfo_ad [|4,float|,i8*,i32]*)
(bind-lib xtminstruments get_lfo_ad_attack [float,i8*,i32]*)
(bind-lib xtminstruments get_lfo_ad_attack_scheme [i8*,i8*,i8*]*)
(mk-ff "get_lfo_ad_attack" (llvm:get-function-pointer "get_lfo_ad_attack_scheme"))
(bind-lib xtminstruments get_lfo_ad_decay [float,i8*,i32]*)
(bind-lib xtminstruments get_lfo_ad_decay_scheme [i8*,i8*,i8*]*)
(mk-ff "get_lfo_ad_decay" (llvm:get-function-pointer "get_lfo_ad_decay_scheme"))
(bind-lib xtminstruments get_lfo_ad_attack_slope [float,i8*,i32]*)
(bind-lib xtminstruments get_lfo_ad_attack_slope_scheme [i8*,i8*,i8*]*)
(mk-ff "get_lfo_ad_attack_slope" (llvm:get-function-pointer "get_lfo_ad_attack_slope_scheme"))
(bind-lib xtminstruments get_lfo_ad_decay_slope [float,i8*,i32]*)
(bind-lib xtminstruments get_lfo_ad_decay_slope_scheme [i8*,i8*,i8*]*)
(mk-ff "get_lfo_ad_decay_slope" (llvm:get-function-pointer "get_lfo_ad_decay_slope_scheme"))
(bind-lib xtminstruments set_lfo_ad_attack [float,i8*,i32,float]*)
(bind-lib xtminstruments set_lfo_ad_attack_scheme [i8*,i8*,i8*]*)
(mk-ff "set_lfo_ad_attack" (llvm:get-function-pointer "set_lfo_ad_attack_scheme"))
(bind-lib xtminstruments set_lfo_ad_decay [float,i8*,i32,float]*)
(bind-lib xtminstruments set_lfo_ad_decay_scheme [i8*,i8*,i8*]*)
(mk-ff "set_lfo_ad_decay" (llvm:get-function-pointer "set_lfo_ad_decay_scheme"))
(bind-lib xtminstruments set_lfo_ad_attack_slope [float,i8*,i32,float]*)
(bind-lib xtminstruments set_lfo_ad_attack_slope_scheme [i8*,i8*,i8*]*)
(mk-ff "set_lfo_ad_attack_slope" (llvm:get-function-pointer "set_lfo_ad_attack_slope_scheme"))
(bind-lib xtminstruments set_lfo_ad_decay_slope [float,i8*,i32,float]*)
(bind-lib xtminstruments set_lfo_ad_decay_slope_scheme [i8*,i8*,i8*]*)
(mk-ff "set_lfo_ad_decay_slope" (llvm:get-function-pointer "set_lfo_ad_decay_slope_scheme"))
(bind-lib xtminstruments set_lfo [void,i8*,i32,float,float]*)
(bind-lib xtminstruments set_lfo_scheme [i8*,i8*,i8*]*)
(mk-ff "set_lfo" (llvm:get-function-pointer "set_lfo_scheme"))
(bind-lib xtminstruments get_lfo [|2,float|,i8*,i32]*)
(bind-lib xtminstruments get_lfo_amp [float,i8*,i32]*)
(bind-lib xtminstruments get_lfo_amp_scheme [i8*,i8*,i8*]*)
(mk-ff "get_lfo_amp" (llvm:get-function-pointer "get_lfo_amp_scheme"))
(bind-lib xtminstruments set_lfo_amp [float,i8*,i32,float]*)
(bind-lib xtminstruments set_lfo_amp_scheme [i8*,i8*,i8*]*)
(mk-ff "set_lfo_amp" (llvm:get-function-pointer "set_lfo_amp_scheme"))
(bind-lib xtminstruments get_lfo_frq [float,i8*,i32]*)
(bind-lib xtminstruments get_lfo_frq_scheme [i8*,i8*,i8*]*)
(mk-ff "get_lfo_frq" (llvm:get-function-pointer "get_lfo_frq_scheme"))
(bind-lib xtminstruments set_lfo_frq [float,i8*,i32,float]*)
(bind-lib xtminstruments set_lfo_frq_scheme [i8*,i8*,i8*]*)
(mk-ff "set_lfo_frq" (llvm:get-function-pointer "set_lfo_frq_scheme"))
(bind-lib xtminstruments set_lfo_type [void,i8*,i32,i32]*)
(bind-lib xtminstruments set_lfo_type_scheme [i8*,i8*,i8*]*)
(mk-ff "set_lfo_type" (llvm:get-function-pointer "set_lfo_type_scheme"))
(bind-lib xtminstruments get_lfo_type [i32,i8*,i32]*)
(bind-lib xtminstruments get_lfo_type_scheme [i8*,i8*,i8*]*)
(mk-ff "get_lfo_type" (llvm:get-function-pointer "get_lfo_type_scheme"))
(bind-lib xtminstruments set_pan_width [void,i8*,float]*)
(bind-lib xtminstruments set_pan_width_scheme [i8*,i8*,i8*]*)
(mk-ff "set_pan_width" (llvm:get-function-pointer "set_pan_width_scheme"))
(bind-lib xtminstruments get_pan_width [float,i8*]*)
(bind-lib xtminstruments get_pan_width_scheme [i8*,i8*,i8*]*)
(mk-ff "get_pan_width" (llvm:get-function-pointer "get_pan_width_scheme"))
(bind-lib xtminstruments set_pan_pos [void,i8*,float]*)
(bind-lib xtminstruments set_pan_pos_scheme [i8*,i8*,i8*]*)
(mk-ff "set_pan_pos" (llvm:get-function-pointer "set_pan_pos_scheme"))
(bind-lib xtminstruments get_pan_pos [float,i8*]*)
(bind-lib xtminstruments get_pan_pos_scheme [i8*,i8*,i8*]*)
(mk-ff "get_pan_pos" (llvm:get-function-pointer "get_pan_pos_scheme"))
(bind-lib xtminstruments set_reverb_mix [void,i8*,float]*)
(bind-lib xtminstruments set_reverb_mix_scheme [i8*,i8*,i8*]*)
(mk-ff "set_reverb_mix" (llvm:get-function-pointer "set_reverb_mix_scheme"))
(bind-lib xtminstruments get_reverb_mix [float,i8*]*)
(bind-lib xtminstruments get_reverb_mix_scheme [i8*,i8*,i8*]*)
(mk-ff "get_reverb_mix" (llvm:get-function-pointer "get_reverb_mix_scheme"))
(bind-lib xtminstruments set_reverb_size [void,i8*,float]*)
(bind-lib xtminstruments set_reverb_size_scheme [i8*,i8*,i8*]*)
(mk-ff "set_reverb_size" (llvm:get-function-pointer "set_reverb_size_scheme"))
(bind-lib xtminstruments get_reverb_size [float,i8*]*)
(bind-lib xtminstruments get_reverb_size_scheme [i8*,i8*,i8*]*)
(mk-ff "get_reverb_size" (llvm:get-function-pointer "get_reverb_size_scheme"))
(bind-lib xtminstruments set_reverb_absorb [void,i8*,float]*)
(bind-lib xtminstruments set_reverb_absorb_scheme [i8*,i8*,i8*]*)
(mk-ff "set_reverb_absorb" (llvm:get-function-pointer "set_reverb_absorb_scheme"))
(bind-lib xtminstruments get_reverb_absorb [float,i8*]*)
(bind-lib xtminstruments get_reverb_absorb_scheme [i8*,i8*,i8*]*)
(mk-ff "get_reverb_absorb" (llvm:get-function-pointer "get_reverb_absorb_scheme"))
(bind-lib xtminstruments set_reverb_predelay [void,i8*,float]*)
(bind-lib xtminstruments set_reverb_predelay_scheme [i8*,i8*,i8*]*)
(mk-ff "set_reverb_predelay" (llvm:get-function-pointer "set_reverb_predelay_scheme"))
(bind-lib xtminstruments get_reverb_predelay [float,i8*]*)
(bind-lib xtminstruments get_reverb_predelay_scheme [i8*,i8*,i8*]*)
(mk-ff "get_reverb_predelay" (llvm:get-function-pointer "get_reverb_predelay_scheme"))
(bind-lib xtminstruments set_flanger_mix [void,i8*,float]*)
(bind-lib xtminstruments set_flanger_mix_scheme [i8*,i8*,i8*]*)
(mk-ff "set_flanger_mix" (llvm:get-function-pointer "set_flanger_mix_scheme"))
(bind-lib xtminstruments get_flanger_mix [float,i8*]*)
(bind-lib xtminstruments get_flanger_mix_scheme [i8*,i8*,i8*]*)
(mk-ff "get_flanger_mix" (llvm:get-function-pointer "get_flanger_mix_scheme"))
(bind-lib xtminstruments set_flanger_low [void,i8*,float]*)
(bind-lib xtminstruments set_flanger_low_scheme [i8*,i8*,i8*]*)
(mk-ff "set_flanger_low" (llvm:get-function-pointer "set_flanger_low_scheme"))
(bind-lib xtminstruments get_flanger_low [float,i8*]*)
(bind-lib xtminstruments get_flanger_low_scheme [i8*,i8*,i8*]*)
(mk-ff "get_flanger_low" (llvm:get-function-pointer "get_flanger_low_scheme"))
(bind-lib xtminstruments set_flanger_high [void,i8*,float]*)
(bind-lib xtminstruments set_flanger_high_scheme [i8*,i8*,i8*]*)
(mk-ff "set_flanger_high" (llvm:get-function-pointer "set_flanger_high_scheme"))
(bind-lib xtminstruments get_flanger_high [float,i8*]*)
(bind-lib xtminstruments get_flanger_high_scheme [i8*,i8*,i8*]*)
(mk-ff "get_flanger_high" (llvm:get-function-pointer "get_flanger_high_scheme"))
(bind-lib xtminstruments set_flanger_rate [void,i8*,float]*)
(bind-lib xtminstruments set_flanger_rate_scheme [i8*,i8*,i8*]*)
(mk-ff "set_flanger_rate" (llvm:get-function-pointer "set_flanger_rate_scheme"))
(bind-lib xtminstruments get_flanger_rate [float,i8*]*)
(bind-lib xtminstruments get_flanger_rate_scheme [i8*,i8*,i8*]*)
(mk-ff "get_flanger_rate" (llvm:get-function-pointer "get_flanger_rate_scheme"))
(bind-lib xtminstruments set_flanger_fb [void,i8*,float]*)
(bind-lib xtminstruments set_flanger_fb_scheme [i8*,i8*,i8*]*)
(mk-ff "set_flanger_fb" (llvm:get-function-pointer "set_flanger_fb_scheme"))
(bind-lib xtminstruments get_flanger_fb [float,i8*]*)
(bind-lib xtminstruments get_flanger_fb_scheme [i8*,i8*,i8*]*)
(mk-ff "get_flanger_fb" (llvm:get-function-pointer "get_flanger_fb_scheme"))
(register-lib-func xtminstruments set_mod_matrix_adhoc_W2Zsb2F0LGk4KixpMzIsaTMyLGZsb2F0XQ [float,i8*,i32,i32,float]* 0 "" '(let ((set_mod_matrix_adhoc_220 (lambda (inst:i8* src:enum dst:enum value:float) (let ((fx (cref (cast inst [void]*) effect_kernel [void]*)) (mod_matrix (fx.mod_matrix:|4,|32,SAMPLE||*))) (if (< dst 32) (aset! (aref-ptr mod_matrix src) dst value)) value)))) set_mod_matrix_adhoc_220))
(bind-poly set_mod_matrix set_mod_matrix_adhoc_W2Zsb2F0LGk4KixpMzIsaTMyLGZsb2F0XQ "")
(register-lib-func xtminstruments get_mod_matrix_adhoc_W2Zsb2F0LGk4KixpMzIsaTMyXQ [float,i8*,i32,i32]* 0 "" '(let ((get_mod_matrix_adhoc_221 (lambda (inst:i8* src:enum dst:enum) (let ((fx (cref (cast inst [void]*) effect_kernel [void]*)) (mod_matrix (fx.mod_matrix:|4,|32,SAMPLE||*))) (if (< dst 32) (aref (aref-ptr mod_matrix src) dst) 0.00000000000000000000))))) get_mod_matrix_adhoc_221))
(bind-poly get_mod_matrix get_mod_matrix_adhoc_W2Zsb2F0LGk4KixpMzIsaTMyXQ "")
(register-lib-func xtminstruments set_osc_adhoc_W3ZvaWQsaTgqLGk2NCxmbG9hdCxpMzIsZmxvYXQsZmxvYXQsZmxvYXRd [void,i8*,i64,float,i32,float,float,float]* 0 "" '(let ((set_osc_adhoc_222 (lambda (inst:i8* osc_num:i64 gain:float wave:i32 tune:float pw:float phase:float) (let ((note (cref (cast inst [void]*) note_kernel [void]*))) (cond ((= osc_num 1) (cset! note osc1_amp gain float) (cset! note osc1_wave wave i32) (cset! note tune1 tune float) (cset! note pw1 pw float) (cset! note osc1_phase phase float) void) ((= osc_num 2) (cset! note osc2_amp gain float) (cset! note osc2_wave wave i32) (cset! note tune2 tune float) (cset! note pw2 pw float) (cset! note osc2_phase phase float) void) ((= osc_num 3) (cset! note osc3_amp gain float) (cset! note osc3_wave wave i32) (cset! note tune3 tune float) (cset! note pw3 pw float) (cset! note osc3_phase phase float) void) ((= osc_num 4) (cset! note osc4_amp gain float) (cset! note osc4_wave wave i32) (cset! note tune4 tune float) (cset! note pw4 pw float) (cset! note osc4_phase phase float) void) (else (println "bad osc num 1-4") void)))))) set_osc_adhoc_222))
(bind-poly set_osc set_osc_adhoc_W3ZvaWQsaTgqLGk2NCxmbG9hdCxpMzIsZmxvYXQsZmxvYXQsZmxvYXRd "")
(register-lib-func xtminstruments set_filter_adhoc_W3ZvaWQsaTgqLGZsb2F0LGZsb2F0LGZsb2F0LGk2NCxmbG9hdCxmbG9hdCxmbG9hdF0 [void,i8*,float,float,float,i64,float,float,float]* 0 "" '(let ((set_filter_adhoc_223 (lambda (inst:i8* frq:float res:float drive:float type:i64 envamt:float trackfrq:float trackamp:float) (let ((note (cref (cast inst [void]*) note_kernel [void]*))) (cset! note filter_frq frq float) (cset! note reso (clamp res 0.00000000000000000000 1.0000000000000000000) float) (cset! note filter_saturation (clamp drive 0.00000000000000000000 2.5000000000000000000) float) (cset! note filter_type (if (= type 12) 1 2) i64) (cset! note filter_env_amt envamt float) (cset! note follow_frq trackfrq float) (cset! note follow_amp trackamp float) void)))) set_filter_adhoc_223))
(bind-poly set_filter set_filter_adhoc_W3ZvaWQsaTgqLGZsb2F0LGZsb2F0LGZsb2F0LGk2NCxmbG9hdCxmbG9hdCxmbG9hdF0 "")
(register-lib-func xtminstruments set_delay_adhoc_W3ZvaWQsaTgqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ [void,i8*,float,float,float,float]* 0 "" '(let ((set_delay_adhoc_224 (lambda (inst:i8* mix:float left:float right:float fb:float) (let ((effect (cref (cast inst [void]*) effect_kernel [void]*))) (cset! effect delay_mix mix float) (cset! effect delay_time_left left float) (cset! effect delay_time_right right float) (cset! effect delay_fb (clamp fb 0.00000000000000000000 1.0000000000000000000) float) void)))) set_delay_adhoc_224))
(bind-poly set_delay set_delay_adhoc_W3ZvaWQsaTgqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtminstruments set_reverb_adhoc_W3ZvaWQsaTgqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ [void,i8*,float,float,float,float]* 0 "" '(let ((set_reverb_adhoc_225 (lambda (inst:i8* mix:float size:float predel:float absorb:float) (let ((effect (cref (cast inst [void]*) effect_kernel [void]*))) (cset! effect reverb_mix mix float) (cset! effect reverb_size (clamp size 0.00000000000000000000 1.0000000000000000000) float) (cset! effect reverb_predelay size float) (cset! effect reverb_absorb (clamp absorb 0.00000000000000000000 1.0000000000000000000) float) void)))) set_reverb_adhoc_225))
(bind-poly set_reverb set_reverb_adhoc_W3ZvaWQsaTgqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtminstruments set_flanger_adhoc_W3ZvaWQsaTgqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ [void,i8*,float,float,float,float,float]* 0 "" '(let ((set_flanger_adhoc_226 (lambda (inst:i8* mix:float min:float max:float rate:float fb:float) (let ((effect (cref (cast inst [void]*) effect_kernel [void]*))) (cset! effect flanger_mix mix float) (cset! effect flanger_low (clamp min 0.050000000000000002776 2000.0000000000000000) float) (cset! effect flanger_high (clamp max 0.10000000000000000555 2000.0000000000000000) float) (cset! effect flanger_rate rate float) (cset! effect flanger_fb (clamp fb 0.00000000000000000000 1.0000000000000000000) float) void)))) set_flanger_adhoc_226))
(bind-poly set_flanger set_flanger_adhoc_W3ZvaWQsaTgqLGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtminstruments set_main_adhoc_W3ZvaWQsaTgqLGZsb2F0LGZsb2F0LGZsb2F0LGkzMl0 [void,i8*,float,float,float,i32]* 0 "" '(let ((set_main_adhoc_227 (lambda (inst:i8* gain:float pan:float portamento:float legato:i32) (let ((effect (cref (cast inst [void]*) effect_kernel [void]*)) (note (cref (cast inst [void]*) note_kernel [void]*))) (cset! effect gain gain float) (cset! effect pan_pos pan float) (cset! note portamento portamento float) (cset! note legato (if (= legato 0) #f #t) i1) void)))) set_main_adhoc_227))
(bind-poly set_main set_main_adhoc_W3ZvaWQsaTgqLGZsb2F0LGZsb2F0LGZsb2F0LGkzMl0 "")
(register-lib-func xtminstruments fmsynth_note_adhoc_W1tbZmxvYXQsaTY0LGk2NF0qLE5vdGVEYXRhKixpNjQsZmxvYXQqXSpd [[[float,i64,i64]*,NoteData*,i64,float*]*]* 0 "" '(let ((fmsynth_note_adhoc_228 (lambda () (let ((amp_env:|4,float| (array 10.0:f 50.000000000000000000 0.59999999999999997780 200.00000000000000000))) (lambda (data:NoteData* nargs:i64 dargs:SAMPLE*) (let ((starttime (note_starttime data)) (frequency (note_frequency data)) (amplitude (note_amplitude data)) (duration (note_duration data)) (a (aref amp_env 0)) (d (aref amp_env 1)) (s (aref amp_env 2)) (r (aref amp_env 3)) (release (convert (* SRs (convert (/ (aref amp_env 3) 1000.0000000000000000))) i64)) (o1 (osc_c 0.00000000000000000000)) (o2 (osc_c 0.00000000000000000000)) (env (adsr_c)) (eamp 0.0:f) (I (if (> nargs 0) (pref dargs 0) 0.10000000000000000555)) (H (if (> nargs 1) (pref dargs 1) 10.000000000000000000)) (out:SAMPLE 0.00000000000000000000)) (lambda (time:i64 chan:i64) (if (= chan 0) (begin (if (> (- time starttime) duration) (note_gate data 0.00000000000000000000)) (set! eamp (env chan (note_gate data) a d s r)) (if (> (- time starttime) (+ duration release)) (note_active data #f)) (set! out (o1 (* (/ 5.0000000000000000000 (log frequency)) (* eamp amplitude)) (+ frequency (o2 (* (* H frequency) I) (* H frequency))))))) (* 1.0000000000000000000 out)))))))) fmsynth_note_adhoc_228))
(bind-poly fmsynth_note fmsynth_note_adhoc_W1tbZmxvYXQsaTY0LGk2NF0qLE5vdGVEYXRhKixpNjQsZmxvYXQqXSpd "")
(register-lib-func xtminstruments fmsynth_fx_adhoc_W1tmbG9hdCxmbG9hdCxpNjQsaTY0LGZsb2F0Kl0qXQ [[float,float,i64,i64,float*]*]* 0 "" '(let ((fmsynth_fx_adhoc_229 (lambda () (let ((notekernel:NOTE_KERNEL null) (o1 (osc_c 0.00000000000000000000)) (o2 (osc_c (* 0.50000000000000000000 SPI))) (cl (chorus_c 0.00000000000000000000)) (cr (chorus_c 0.31400000000000000133)) (del1 (delay_c (convert (/ (convert SAMPLE_RATE double) 2.0000000000000000000)))) (del2 (delay_c (convert (/ (convert SAMPLE_RATE double) 3.0000000000000000000)))) (lpfl (lpf_c)) (lpfr (lpf_c)) (reso 0.40000000000000002220) (cwet 0.50000000000000000000) (cfb 0.50000000000000000000) (gain 1.0000000000000000000) (delay_mix 0.50000000000000000000) (delay_fb 0.50000000000000000000)) (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*) (cond ((= chan 0) (* gain (lpfl (del1 (cl in 1.0000000000000000000 cwet cfb) delay_mix delay_fb) (+ 8000.0000000000000000 (o1 6000.0000000000000000 0.33329999999999998517)) reso))) ((= chan 1) (* gain (lpfr (del2 (cr in 1.0000000000000000000 cwet cfb) delay_mix delay_fb) (+ 8000.0000000000000000 (o2 6000.0000000000000000 0.20000000000000001110)) reso))) (else 0.00000000000000000000))))))) fmsynth_fx_adhoc_229))
(bind-poly fmsynth_fx fmsynth_fx_adhoc_W1tmbG9hdCxmbG9hdCxpNjQsaTY0LGZsb2F0Kl0qXQ "")
(register-lib-val xtminstruments DefaultWaveTable AudioBuffer* "")
(call-as-xtlang (set! DefaultWaveTable (AudioBuffer 600 1 44100.000000000000000 0.00000000000000000000 50 0 600 (String "AMAbPAAA6zwAUEQ9AJiJPQD4sD0AQNg9AGD/PQAYEz4AVCY+AGQ5PgAwTD4AuF4+APBwPgBogT4AJoo+ALCSPgAAmz4AEqM+AOaqPgBusj4Asrk+AKrAPgBQxz4Aps0+AKTTPgBM2T4AmN4+AITjPgAQ6D4APOw+AAbwPgBq8z4AZvY+AP74PgAs+z4A9Pw+AFT+PgBM/z4A2v8+AP7/PgC+/z4AFv8+AAr+PgCc/D4Ayvo+AJj4PgAI9j4AHPM+ANrvPgA87D4ATOg+AAzkPgB+3z4Aoto+AH7VPgAa0D4Acso+AJDEPgByvj4AILg+AJyxPgDsqj4AEqQ+AA6dPgDslT4ArI4+AFKHPgDEfz4AvHA+AJxhPgBsUj4AKEM+AOQzPgCcJD4AZBU+ADQGPgBI7j0AUNA9AKiyPQBQlT0AsHA9AJA3PQDA/jwAIJA8AICOOwCADLwAIK68AMAJvQAwO70AIGu9AOCMvQCAo70AWLm9AHjOvQDQ4r0AYPa9AJgEvgCUDb4AMBa+AFwevgAoJr4AiC2+AIQ0vgAYO74AREG+AAxHvgBoTL4AZFG+AABWvgA4Wr4ADF6+AIRhvgCcZL4AWGe+ALhpvgC8a74AaG2+AMBuvgDEb74AcHC+ANBwvgDccL4AnHC+AAxwvgA0b74ADG6+AKBsvgDoar4A7Gi+AKxmvgAoZL4AXGG+AFRevgAIW74AgFe+ALRTvgC0T74AcEu+AOxGvgA4Qr4AQD2+ABQ4vgCwMr4AEC2+AEAnvgA0Ib4A+Bq+AIgUvgDkDb4AEAe+AAwAvgC48b0A6OK9ANDTvQBYxL0AmLS9AICkvQAYlL0AaIO9APBkvQCQQr0AkB+9AGD4vADAsLwAgFC8AAB4uwCAqjsAAGo8AMC/PABwBT0AMCs9AABRPQDgdj0AUI49ADihPQAAtD0AsMY9ADjZPQCg6z0A0P09AOAHPgC0ED4AYBk+AOAhPgAsKj4ARDI+ACA6PgC4QT4ADEk+ABhQPgDYVj4AQF0+AFRjPgAQaT4AaG4+AFxzPgDkdz4ACHw+ALh/PgB6gT4A3II+AAaEPgDyhD4AnoU+AAaGPgA0hj4AHoY+AMSFPgAohT4ASIQ+ACaDPgDAgT4AGIA+AFx8PgAAeD4AHHM+ALRtPgDMZz4AbGE+AIRaPgAoUz4AUEs+AARDPgBMOj4AIDE+AIgnPgCQHT4AOBM+AIgIPgD4+j0AQOQ9APjMPQAwtT0A8Jw9ADiEPQBAVj0AkCM9AKDgPADAcjwAAAw7AAAtvACAvrwAMBO9APBGvQBAer0AkJa9AKivvQBwyL0AuOC9AIj4vQDoB74AQBO+ADwevgDgKL4AHDO+APA8vgBURr4AQE++ALRXvgCkX74ADGe+AOxtvgA8dL4A+Hm+ABh/vgDUgb4AyIO+AG6FvgDEhr4Axoe+AHiIvgDUiL4A3oi+AJSIvgD4h74ACoe+AMqFvgA4hL4AVoK+ACKAvgBIe74AtHW+AIRvvgDMaL4AhGG+ALBZvgBkUb4AlEi+AEw/vgCcNb4AfCu+AAAhvgAkFr4A8Aq+AOj+vQBg570AaM+9AAC3vQBInr0AQIW9ABBYvQBwJb0AAOW8AMB+vAAAT7sAQBY8AGCvPABACT0AQDo9AHBqPQDYjD0A+KM9AIi6PQB40D0AwOU9AEj6PQAABz4AfBA+AIAZPgAQIj4ALCo+AMQxPgDYOD4AaD8+AGhFPgDcSj4AxE8+ABRUPgDUVz4A/Fo+AIxdPgCEXz4A5GA+ALBhPgDkYT4AfGE+AIRgPgD0Xj4A1Fw+ACxaPgD0Vj4AMFM+AOxOPgAsSj4A6EQ+ACw/PgAAOT4AZDI+AGQrPgD8Iz4AOBw+ABwUPgCwCz4A8AI+APDzPQB44T0AiM49ADi7PQCIpz0AmJM9AOB+PQAwVj0AMC09ABAEPQCAtTwAAEY8AAAHOwCAAbwAIJK8AGDivAAAGb0AIEC9AMBmvQBQhr0A2Ji9APiqvQCgvL0A0M29AIjevQCo7r0AQP69AKQGvgDcDb4AxBS+AFgbvgCgIb4AjCe+ACgtvgBwMr4AYDe+APw7vgBAQL4AMES+AMRHvgAIS74A9E2+AJBQvgDYUr4AyFS+AGxWvgDAV74AxFi+AIRZvgDwWb4AHFq+APxZvgCcWb4A+Fi+ABRYvgDsVr4AjFW+APRTvgAkUr4AGFC+ANxNvgBoS74AzEi+APxFvgD4Qr4AzD++AHQ8vgD4OL4AUDW+AIAxvgCQLb4AdCm+ADQlvgDUIL4AUBy+AKwXvgDkEr4A/A2+APgIvgDQA74AIP29AFjyvQBY570AENy9AKDQvQDoxL0AALm9ANCsvQB4oL0A6JO9ABiHvQBQdL0A4Fm9ABA/vQDQI70AUAi9AODYvABgoLwAgE68AIC1uwAAzjoAgA88ACCDPADAvjwA4Po8ALAbPQAAOj0AQFg9ALB2PQCIij0AoJk9ALCoPQCwtz0AgMY9ACjVPQCo4z0A6PE9AOD/PQDIBj4AeA0+APATPgBAGj4AVCA+ACgmPgC8Kz4ADDE+ABQ2PgDMOj4ALD8+ADxDPgD0Rj4ATEo+ADxNPgDMTz4A8FE+AKhTPgD0VD4A1FU+ADxWPgAsVj4ArFU+ALBUPgA4Uz4ATFE+ANhOPgDwSz4AjEg+ALBEPgBMQD4AeDs+ACA2PgBUMD4AECo+AFAjPgAkHD4AfBQ+AGQMPgDkAz4A6PU9ADDjPQC4zz0AeLs9AHCmPQDIkD0AsHQ9AIBGPQAwFz0AQM08AABUPAAAGDoAwES8AIDLvAAQG70AIFG9AOCDvQB4n70AOLu9ADDXvQBA870AqAe+ALQVvgC4I74ApDG+AHg/vgAwTb4AuFq+AAxovgAodb4AAoG+AEiHvgBqjb4AXJO+ABqZvgCmnr4A+KO+AA6pvgDmrb4AdrK+AMK2vgDEur4AeL6+AODBvgDwxL4Arse+ABbKvgAgzL4A0s2+ACjPvgAg0L4AttC+AOzQvgDC0L4ANtC+AEjPvgD4zb4ARMy+AC7KvgC6x74A4MS+AKjBvgASvr4AHLq+AMy1vgAgsb4AGqy+AMCmvgAQob4ADJu+ALiUvgAWjr4ALIe+APB/vgD8cL4AjGG+AJhRvgAsQb4AVDC+AAwfvgBoDb4A2Pa9ADjSvQD4rL0AQIe9ACBCvQAA6rwAAB28"))) void)
(register-lib-func xtminstruments analogue_remove_file_adhoc_W2kzMixpOCpd [i32,i8*]* 0 "" '(let ((analogue_remove_file_adhoc_230 (lambda (f) (remove f)))) analogue_remove_file_adhoc_230))
(bind-poly analogue_remove_file analogue_remove_file_adhoc_W2kzMixpOCpd "")
(register-lib-func xtminstruments oscXAnalogue_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0XQ [[float,float,float,float]*,float]* 0 "" '(let ((oscXAnalogue_c_adhoc_231 (lambda (phase) (set! phase (- (* phase STWOPI) SPI)) (let ((t (/ STWOPI SAMPLERATE))) (lambda (amp:float freq:float nothing:float) (set! phase (+ phase (* t (clamp freq (- 0.00000000000000000000 SRs) SRs)))) (if (> phase SPI) (set! phase (- phase STWOPI))) (* amp (parabolicSineHP phase))))))) oscXAnalogue_c_adhoc_231))
(bind-poly oscXAnalogue_c oscXAnalogue_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0XQ "")
(register-lib-func xtminstruments bltriXAnalogue_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0XQ [[float,float,float,float]*,float]* 0 "" '(let ((bltriXAnalogue_c_adhoc_232 (lambda (mod:float) (let ((sawout:float 0.00000000000000000000) (sqrout 0.00000000000000000000) (inc 0.00000000000000000000) (out:float 0.00000000000000000000) (sqrmod 1.0000000000000000000) (diffout 0.00000000000000000000) (zreg:float 0.00000000000000000000) (c 0.00000000000000000000)) (lambda (amp:float frq:float nothing:float) (set! inc (/ frq SRs)) (if (and (> inc 0.00000000000000000000) (>= mod 1.0000000000000000000)) (begin (set! mod (- mod 1.0000000000000000000)) (set! sqrmod (* sqrmod -1.0000000000000000000)))) (if (and (< inc 0.00000000000000000000) (<= mod 0.00000000000000000000)) (begin (set! mod (+ mod 1.0000000000000000000)) (set! sqrmod (* sqrmod -1.0000000000000000000)))) (set! sawout (- (* mod 2.0000000000000000000) 1.0000000000000000000)) (set! sawout (* sawout sawout)) (set! sawout (- 1.0000000000000000000 sawout)) (set! out (* sawout sqrmod)) (set! diffout (- out zreg)) (set! zreg out) (set! c (/ SRs (* 4.0000000000000000000 2.0000000000000000000 frq (- 1.0000000000000000000 inc)))) (set! mod (+ mod inc)) (set! mod (+ mod inc)) (* diffout c amp)))))) bltriXAnalogue_c_adhoc_232))
(bind-poly bltriXAnalogue_c bltriXAnalogue_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0XQ "")
(register-lib-func xtminstruments blsawXAnalogue_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0LGkxLGkxXQ [[float,float,float,float]*,float,i1,i1]* 0 "" '(let ((blsawXAnalogue_c_adhoc_233 (lambda (mod inverted:i1 highcpu:i1) (let ((inc 0.00000000000000000000) (absinc 0.0:f) (out 0.00000000000000000000) (blep 0.00000000000000000000) (t 0.00000000000000000000) (rising (if inverted #t #f)) (inv (if inverted -1.0000000000000000000 1.0000000000000000000))) (lambda (amp:float frq:float nothing:float) (set! inc (/ frq SRs)) (if (and (> inc 0.00000000000000000000) (>= mod 1.0000000000000000000)) (set! mod (- mod 1.0000000000000000000))) (if (and (< inc 0.00000000000000000000) (<= mod 0.00000000000000000000)) (set! mod (+ mod 1.0000000000000000000))) (set! blep (if highcpu (blep_n (cast fBLEPTable_8_BLKHAR SAMPLE*) 4096.0000000000000000 mod (fabs inc) 1.0000000000000000000 rising 4.0000000000000000000 #f) (poly_blep mod (fabs inc) 1.0000000000000000000 rising))) (set! out (* inv (- (* mod 2.0000000000000000000) 1.0000000000000000000))) (set! mod (+ mod inc)) (* amp (+ out blep))))))) blsawXAnalogue_c_adhoc_233))
(bind-poly blsawXAnalogue_c blsawXAnalogue_c_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0qLGZsb2F0LGkxLGkxXQ "")
(register-lib-func xtminstruments moog_ladder_inlined_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0qLGkzMl0 [[float,float,float,float]*,i32]* 0 "" '(let ((moog_ladder_inlined_adhoc_234 (lambda (type) (let ((i:i64 0) (m_dK 0.00000000000000000000) (m_dAlpha_0 1.0000000000000000000) (m_dAlpha 0.00000000000000000000) (m_dGamma 0.00000000000000000000) (dSigma 0.00000000000000000000) (dU 0.00000000000000000000) (m_dA 0.00000000000000000000) (m_dB 0.00000000000000000000) (m_dC 0.00000000000000000000) (m_dD 0.00000000000000000000) (m_dE 1.0000000000000000000) (op_m_dAlpha:|4,SAMPLE|* (alloc)) (op_m_dBeta:|4,SAMPLE|* (alloc)) (op_m_dZ1:|4,SAMPLE|* (alloc)) (op_fb_out:|4,SAMPLE|* (alloc)) (op_out:|4,SAMPLE|* (alloc)) (op_tmp:SAMPLE 0.00000000000000000000) (op_vn:SAMPLE 0.00000000000000000000) (feedback:SAMPLE 0.010000000000000000208) (saturation:SAMPLE 1.0000000000000000000) (out:SAMPLE 0.00000000000000000000) (T (/ 1.0000000000000000000 SRs)) (g:SAMPLE 0.00000000000000000000) (G:SAMPLE 0.00000000000000000000) (t2 (/ 2.0000000000000000000 T)) (halfT (/ T 2.0000000000000000000)) (oldfrq 0.00000000000000000000) (fconfig:|5,SAMPLE|* (alloc)) (oldQ 0.00000000000000000000)) (cond ((= type LPF4) (afill! fconfig 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000)) ((= type LPF2) (afill! fconfig 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000 0.00000000000000000000)) (else (afill! fconfig 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000))) (lambda (in:SAMPLE frq:SAMPLE Q:SAMPLE) (if (or (<> oldQ Q) (<> oldfrq frq)) (begin (if (< frq 0.00000000000000000000) (set! frq (fabs frq))) (if (< Q 0.00000000000000000000) (set! Q (fabs Q))) (set! oldQ Q) (set! oldfrq frq) (set! m_dK (* 4.0000000000000000000 Q)) (set! oldfrq frq) (set! m_dAlpha (* t2 (tan (* STWOPI frq halfT)))) (set! g (* halfT m_dAlpha)) (set! G (/ g (+ 1.0000000000000000000 g))) (afill! op_m_dAlpha G G G G) (afill! op_m_dBeta (* G G (/ G (+ 1.0000000000000000000 g))) (* G (/ G (+ 1.0000000000000000000 g))) (/ G (+ 1.0000000000000000000 g)) (/ 1.0000000000000000000 (+ 1.0000000000000000000 g))) (set! m_dGamma (* G G G G)) (set! m_dAlpha_0 (/ 1.0000000000000000000 (+ 1.0000000000000000000 (* m_dK m_dGamma)))))) (set! dSigma (+ (aref op_fb_out 0) (aref op_fb_out 1) (aref op_fb_out 2) (aref op_fb_out 3))) (set! in (* in (+ 1.0000000000000000000 m_dK))) (set! dU (* (- in (* m_dK dSigma)) m_dAlpha_0)) (set! dU (tanh (* saturation dU))) (set! op_tmp dU) (set! out 0.00000000000000000000) (dotimes (i 4) (aset! op_fb_out i (* (aref op_m_dBeta i) (aref op_m_dZ1 i))) (set! op_vn (* (- op_tmp (aref op_m_dZ1 i)) (aref op_m_dAlpha i))) (set! op_tmp (+ op_vn (aref op_m_dZ1 i))) (aset! op_m_dZ1 i (+ op_vn op_tmp)) (aset! op_out i op_tmp) (set! out (+ out (* (aref fconfig (+ i 1)) op_tmp)))) out))))) moog_ladder_inlined_adhoc_234))
(bind-poly moog_ladder_inlined moog_ladder_inlined_adhoc_W1tmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0qLGkzMl0 "")
(register-lib-func xtminstruments analogue_note_adhoc_W1tbZmxvYXQsaTY0LGk2NF0qLE5vdGVEYXRhKixpNjQsZmxvYXQqXSpd [[[float,i64,i64]*,NoteData*,i64,float*]*]* 0 "" '(let ((analogue_note_adhoc_235 (lambda () (let ((MILLISEC (* 0.0010000000000000000208 SRs)) (amp_env:|4,SAMPLE| (array 0.0:f 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000)) (filter_env:|4,SAMPLE| (array 0.0:f 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000)) (pitch_env:|2,SAMPLE| (array 0.0:f 0.00000000000000000000)) (mod_env:|4,SAMPLE| (array 0.0:f 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000)) (mod_env_delay:SAMPLE 0.00000000000000000000) (oldfreq 440.0:f) (tune1:SAMPLE 1.0000000000000000000) (tune2:SAMPLE 1.0000000000000000000) (tune3:SAMPLE 1.0000000000000000000) (tune4:SAMPLE 1.0000000000000000000) (osc1_wave:enum PARAM_SAW) (osc2_wave:enum PARAM_SAW) (osc3_wave:enum PARAM_SAW) (osc4_wave:enum PARAM_SAW) (pw1:SAMPLE 0.50000000000000000000) (pw2:SAMPLE 0.50000000000000000000) (pw3:SAMPLE 0.50000000000000000000) (pw4:SAMPLE 0.50000000000000000000) (noise:enum PARAM_WHITE) (noise_amp:SAMPLE 0.00000000000000000000) (osc1_amp:SAMPLE 0.25000000000000000000) (osc2_amp:SAMPLE 0.00000000000000000000) (osc3_amp:SAMPLE 0.00000000000000000000) (osc4_amp:SAMPLE 0.00000000000000000000) (osc_phase_slop 0.10000000000000000555) (osc1_phase:SAMPLE (* osc_phase_slop 0.10000000000000000555 (random))) (osc2_phase:SAMPLE (* osc_phase_slop 0.10000000000000000555 (random))) (osc3_phase:SAMPLE (* osc_phase_slop 0.10000000000000000555 (random))) (osc4_phase:SAMPLE (* osc_phase_slop 0.10000000000000000555 (random))) (osc1_wt:AudioBuffer* DefaultWaveTable) (osc2_wt:AudioBuffer* DefaultWaveTable) (osc3_wt:AudioBuffer* DefaultWaveTable) (osc4_wt:AudioBuffer* DefaultWaveTable) (osc_slop:SAMPLE 0.00000000000000000000) (sub_amp:SAMPLE 0.00000000000000000000) (mods:|32,SAMPLE|* (alloc)) (noise_amp_mod:SAMPLE 0.00000000000000000000) (filter_type:i64 2) (follow_frq 0.00000000000000000000) (follow_amp 0.00000000000000000000) (legato #t) (filter_frq:SAMPLE 15000.000000000000000) (filter_env_amt:SAMPLE 0.00000000000000000000) (filter_saturation:SAMPLE 1.0000000000000000000) (pitch_env_amt:SAMPLE 0.00000000000000000000) (portamento:SAMPLE 0.00000000000000000000) (res:SAMPLE 0.00000000000000000000) (performance_profile:i64 0) (reso:SAMPLE 0.00000000000000000000)) (lambda (data:NoteData* nargs:i64 dargs:SAMPLE*) (let ((starttime:i64 (note_starttime data)) (notetime:i64 starttime) (frequency:SAMPLE (+ (note_frequency data) (* (- (random) 0.50000000000000000000) (note_frequency data) osc_slop 0.050000000000000002776))) (target_frq:SAMPLE frequency) (amplitude:SAMPLE (note_amplitude data)) (gate:SAMPLE (note_gate data)) (target_amp:SAMPLE amplitude) (newampinc:SAMPLE 0.00000000000000000000) (duration:i64 (note_duration data)) (glideinc:SAMPLE 0.00000000000000000000) (midifrq:SAMPLE 0.00000000000000000000) (new_note_timer:i64 0) (frq 0.00000000000000000000) (adsr1 (adsr_c)) (adsr2 (adsr_c)) (adsr3 (adsr_c)) (adsr4 (dadsr_c)) (adsr1_val 0.00000000000000000000) (adsr2_val 0.00000000000000000000) (adsr3_val 0.00000000000000000000) (adsr4_val:SAMPLE 0.00000000000000000000) (amp:SAMPLE 0.00000000000000000000) (cof:SAMPLE 0.00000000000000000000) (amp_attack (aref amp_env 0)) (amp_decay (aref amp_env 1)) (amp_sustain (aref amp_env 2)) (amp_release (+ 3.0000000000000000000 (aref amp_env 3))) (amp_release_samples (convert (* SRs (/ amp_release 1000.0000000000000000)) i64)) (reltime:i64 0) (filter_attack (aref filter_env 0)) (filter_decay (aref filter_env 1)) (filter_sustain (aref filter_env 2)) (filter_release (aref filter_env 3)) (pitch_attack (aref pitch_env 0)) (pitch_decay (aref pitch_env 1)) (mod_delay mod_env_delay) (mod_attack (aref mod_env 0)) (mod_decay (aref mod_env 1)) (mod_sustain (aref mod_env 2)) (mod_release (aref mod_env 3)) (filter:[SAMPLE,SAMPLE,SAMPLE,SAMPLE]* (if (= 0 performance_profile) (moog_ladder_inlined (i64toi32 filter_type)) (lpf_c))) (_osc1_phase (+ osc1_phase (* osc_phase_slop 0.10000000000000000555 (random)))) (_osc2_phase (+ osc2_phase (* osc_phase_slop 0.10000000000000000555 (random)))) (_osc3_phase (+ osc3_phase (* osc_phase_slop 0.10000000000000000555 (random)))) (_osc4_phase (+ osc4_phase (* osc_phase_slop 0.10000000000000000555 (random)))) (sin1 (osc_c _osc1_phase)) (sin2 (osc_c _osc2_phase)) (sin3 (osc_c _osc3_phase)) (sin4 (osc_c _osc4_phase)) (saw1 (blsaw_c _osc1_phase #f #f)) (saw2 (blsaw_c _osc2_phase #f #f)) (saw3 (blsaw_c _osc3_phase #f #f)) (saw4 (blsaw_c _osc4_phase #f #f)) (pulse1 (blpulse_c _osc1_phase #f)) (pulse2 (blpulse_c _osc2_phase #f)) (pulse3 (blpulse_c _osc3_phase #f)) (pulse4 (blpulse_c _osc4_phase #f)) (tri1 (bltri_c _osc1_phase)) (tri2 (bltri_c _osc2_phase)) (tri3 (bltri_c _osc3_phase)) (tri4 (bltri_c _osc4_phase)) (wt1 (AudioBuffer_shared_data osc1_wt)) (wt2 (AudioBuffer_shared_data osc2_wt)) (wt3 (AudioBuffer_shared_data osc3_wt)) (wt4 (AudioBuffer_shared_data osc4_wt)) (osc1_out:SAMPLE 0.00000000000000000000) (osc2_out:SAMPLE 0.00000000000000000000) (osc3_out:SAMPLE 0.00000000000000000000) (osc4_out:SAMPLE 0.00000000000000000000) (zero:SAMPLE 0.00000000000000000000) (white (white_c)) (pink (pink_c)) (sub_out 0.00000000000000000000) (noise_out 0.00000000000000000000) (subosc (osc_c 0.00000000000000000000)) (main_out 0.0:f)) (if (= 0 performance_profile) (filter.saturation (clamp filter_saturation 1.0:f 3.0:f))) (lambda (time:i64 chan:i64) (if (= chan 0) (begin (set! notetime (tref data 7)) (if (and (<> starttime notetime) (>= time notetime)) (begin (if (not legato) (begin (set! amplitude (note_amplitude data)) (retrigger_adsr adsr1) (retrigger_adsr adsr2) (retrigger_adsr adsr3) (retrigger_dadsr adsr4))) (set! starttime (tref data 7)) (set! target_frq (note_frequency data)) (set! glideinc (/ (- target_frq frequency) (* portamento 0.0010000000000000000208 SRf))) (if (< portamento 0.0010000000000000000208) (set! frequency target_frq)) (AudioBuffer_set_phase wt1 0.00000000000000000000) (AudioBuffer_set_phase wt2 0.00000000000000000000) (AudioBuffer_set_phase wt3 0.00000000000000000000) (AudioBuffer_set_phase wt4 0.00000000000000000000) (set! reltime 0) (set! gate 1.0000000000000000000) (set! duration (note_duration data)))) (if (> (fabs (- target_frq frequency)) 0.12500000000000000000) (set! frequency (+ frequency glideinc))) (if (and (> gate 0.50000000000000000000) (> (- time starttime) duration)) (set! gate 0.00000000000000000000)) (set! adsr1_val (adsr1 chan gate amp_attack amp_decay amp_sustain amp_release)) (set! adsr2_val (adsr2 chan gate filter_attack filter_decay filter_sustain filter_release)) (set! adsr3_val (adsr3 chan gate pitch_attack pitch_decay 0.00000000000000000000 0.00000000000000000000)) (set! adsr4_val (adsr4 chan gate mod_delay mod_attack mod_decay mod_sustain mod_release)) (set! amp (* amplitude adsr1_val)) (set! cof (clamp (+ filter_frq (* follow_frq 8.0000000000000000000 frequency) (* follow_amp amplitude 12000.000000000000000) (* adsr4_val (aref mods PARAM_FILTER_FRQ)) (* filter_env_amt adsr2_val)) 0.00000000000000000000 22000.000000000000000)) (set! res (+ reso (* adsr4_val (aref mods PARAM_FILTER_RES)))) (set! frq (+ frequency (* pitch_env_amt frequency adsr3_val) 0.00000000000000000000)) (if (< frq 10.000000000000000000) (set! frq 10.000000000000000000)) (if (< gate 0.10000000000000000555) (set! reltime (+ reltime 1))) (if (> reltime amp_release_samples) (if (< amp 0.010000000000000000208) (note_active data #f) (begin (set! amplitude (- amplitude 0.010000000000000000208)) #t))) (if (> osc1_amp 0.0010000000000000000208) (set! osc1_out (* (+ osc1_amp (* adsr4_val (aref mods PARAM_OSC1_AMP))) (cond ((= osc1_wave 0) (sin1 1.0000000000000000000 (+ (* tune1 frq) (* adsr4_val (aref mods PARAM_OSC1_FRQ))))) ((= osc1_wave 1) (saw1 1.0000000000000000000 (+ (* tune1 frq) (* adsr4_val (aref mods PARAM_OSC1_FRQ))))) ((= osc1_wave 2) (pulse1 1.0000000000000000000 (+ (* tune1 frq) (* adsr4_val (aref mods PARAM_OSC1_FRQ))) (+ pw1 (* adsr4_val (aref mods PARAM_OSC1_PW))))) ((= osc1_wave 3) (tri1 1.0000000000000000000 (+ (* tune1 frq) (* adsr4_val (aref mods PARAM_OSC1_FRQ))))) ((= osc1_wave 4) (AudioBuffer_read_interp_pw wt1 (+ (* tune1 frq) (* adsr4_val (aref mods PARAM_OSC1_FRQ))) 0 (+ pw1 (* adsr4_val (aref mods PARAM_OSC1_PW))))) (else zero)))) (set! osc1_out 0.00000000000000000000)) (if (> osc2_amp 0.0010000000000000000208) (set! osc2_out (* (+ osc2_amp (* adsr4_val (aref mods PARAM_OSC2_AMP))) (cond ((= osc2_wave 0) (sin2 1.0000000000000000000 (+ (* tune2 frq) (* adsr4_val (aref mods PARAM_OSC2_FRQ))))) ((= osc2_wave 1) (saw2 1.0000000000000000000 (+ (* tune2 frq) (* adsr4_val (aref mods PARAM_OSC2_FRQ))))) ((= osc2_wave 2) (pulse2 1.0000000000000000000 (+ (* tune2 frq) (* adsr4_val (aref mods PARAM_OSC2_FRQ))) (+ pw2 (* adsr4_val (aref mods PARAM_OSC2_PW))))) ((= osc2_wave 3) (tri2 1.0000000000000000000 (+ (* tune2 frq) (* adsr4_val (aref mods PARAM_OSC2_FRQ))))) ((= osc2_wave 4) (AudioBuffer_read_interp_pw wt2 (+ (* tune2 frq) (* adsr4_val (aref mods PARAM_OSC2_FRQ))) 0 (+ pw2 (* adsr4_val (aref mods PARAM_OSC2_PW))))) (else zero)))) (set! osc2_out 0.00000000000000000000)) (if (> osc3_amp 0.0010000000000000000208) (set! osc3_out (* (+ osc3_amp (* adsr4_val (aref mods PARAM_OSC3_AMP))) (cond ((= osc3_wave 0) (sin3 1.0000000000000000000 (+ (* tune3 frq) (* adsr4_val (aref mods PARAM_OSC3_FRQ))))) ((= osc3_wave 1) (saw3 1.0000000000000000000 (+ (* tune3 frq) (* adsr4_val (aref mods PARAM_OSC3_FRQ))))) ((= osc3_wave 2) (pulse3 1.0000000000000000000 (+ (* tune3 frq) (* adsr4_val (aref mods PARAM_OSC3_FRQ))) (+ pw3 (* adsr4_val (aref mods PARAM_OSC3_PW))))) ((= osc3_wave 3) (tri3 1.0000000000000000000 (+ (* tune3 frq) (* adsr4_val (aref mods PARAM_OSC3_FRQ))))) ((= osc3_wave 4) (AudioBuffer_read_interp_pw wt3 (+ (* tune3 frq) (* adsr4_val (aref mods PARAM_OSC3_FRQ))) 0 (+ pw3 (* adsr4_val (aref mods PARAM_OSC3_PW))))) (else zero)))) (set! osc3_out 0.00000000000000000000)) (if (> osc4_amp 0.0010000000000000000208) (set! osc4_out (* (+ osc4_amp (* adsr4_val (aref mods PARAM_OSC4_AMP))) (cond ((= osc4_wave 0) (sin4 1.0000000000000000000 (+ (* tune4 frq) (* adsr4_val (aref mods PARAM_OSC4_FRQ))))) ((= osc4_wave 1) (saw4 1.0000000000000000000 (+ (* tune4 frq) (* adsr4_val (aref mods PARAM_OSC4_FRQ))))) ((= osc4_wave 2) (pulse4 1.0000000000000000000 (+ (* tune4 frq) (* adsr4_val (aref mods PARAM_OSC4_FRQ))) (+ pw4 (* adsr4_val (aref mods PARAM_OSC4_PW))))) ((= osc4_wave 3) (tri4 1.0000000000000000000 (+ (* tune4 frq) (* adsr4_val (aref mods PARAM_OSC4_FRQ))))) ((= osc4_wave 4) (AudioBuffer_read_interp_pw wt4 (+ (* tune4 frq) (* adsr4_val (aref mods PARAM_OSC4_FRQ))) 0 (+ pw4 (* adsr4_val (aref mods PARAM_OSC4_PW))))) (else zero)))) (set! osc4_out 0.00000000000000000000)) (if (> sub_amp 0.0010000000000000000208) (set! sub_out (* sub_amp (subosc 1.0000000000000000000 (* frq 0.25000000000000000000)))) (set! sub_out 0.00000000000000000000)) (if (> noise_amp 0.0010000000000000000208) (if (= noise PARAM_WHITE) (set! noise_out (* 0.50000000000000000000 (+ noise_amp (* adsr4_val (aref mods PARAM_NOISE_AMP))) (white))) (set! noise_out (* 0.50000000000000000000 (+ noise_amp (* adsr4_val (aref mods PARAM_NOISE_AMP))) (pink)))) (set! noise_out 0.00000000000000000000)) (set! main_out (* amp (filter (+ osc1_out osc2_out osc3_out osc4_out sub_out noise_out) cof reso))))) main_out))))))) analogue_note_adhoc_235))
(bind-poly analogue_note analogue_note_adhoc_W1tbZmxvYXQsaTY0LGk2NF0qLE5vdGVEYXRhKixpNjQsZmxvYXQqXSpd "")
(register-lib-func xtminstruments analogue_fx_adhoc_W1tmbG9hdCxmbG9hdCxpNjQsaTY0LGZsb2F0Kl0qXQ [[float,float,i64,i64,float*]*]* 0 "" '(let ((analogue_fx_adhoc_236 (let ((MILLISEC (* 0.0010000000000000000208 SRf)) (CHANSF (i32tof CHANNELS))) (lambda () (let ((notekernel:NOTE_KERNEL null) (mod_amp:|4,SAMPLE|* (array_ref 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000)) (mod_frq:|4,SAMPLE|* (array_ref 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000)) (mod_attack:|4,SAMPLE|* (array_ref 10.000000000000000000 10.000000000000000000 10.000000000000000000 10.000000000000000000)) (mod_decay:|4,SAMPLE|* (array_ref 10.000000000000000000 10.000000000000000000 10.000000000000000000 10.000000000000000000)) (mod_attack_slope:|4,SAMPLE|* (array_ref 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000)) (mod_decay_slope:|4,SAMPLE|* (array_ref 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000)) (mods:|32,SAMPLE|* null) (mod_matrix:|4,|32,SAMPLE||* (alloc)) (tmpmod:|32,SAMPLE|* null) (lfos:|4,|8,[SAMPLE,i64,i64]*||* (alloc)) (lfo_types:|4,i32|* (alloc)) (hpf (hpf_c)) (hpfR (hpf_c)) (hpf_frq 20001.000000000000000) (dly (comb_mc_c (i32toi64 CHANNELS) (* SR 120))) (delay_time_left 50.000000000000000000) (delay_time_right 50.000000000000000000) (delay_in 1.0000000000000000000) (delay_mix 0.00000000000000000000) (delay_fb 0.50000000000000000000) (delay_frq:SAMPLE 12000.000000000000000) (delay_res:SAMPLE 0.00000000000000000000) (rev (reverb_st_c)) (reverb_mix 0.00000000000000000000) (reverb_predelay 40.000000000000000000) (reverb_size 0.29999999999999998890) (reverb_absorb 0.45000000000000001110) (pan (pan_c (i32toi64 CHANNELS))) (pan_pos 0.50000000000000000000) (pan_width 1.0000000000000000000) (flanger (flanger_st_c)) (flanger_low 0.10000000000000000555) (flanger_high 4.0000000000000000000) (flanger_rate 0.12728700000000001125) (flanger_fb 0.25000000000000000000) (flanger_mix 0.00000000000000000000) (overdrive (overdrive_c)) (overdrive_amt 0.50000000000000000000) (out:SAMPLE 0.00000000000000000000) (i:i64 0) (j:i64 0) (tmp 0.00000000000000000000) (fxout 0.00000000000000000000) (gain 2.0000000000000000000)) (dotimes (i 4) (aset! lfo_types i PARAM_SINE) (aset! lfos i (array (let ((osc (osc_c 0.00000000000000000000))) (lambda (chan:i64 idx:i64) (osc (aref mod_amp idx) (aref mod_frq idx)))) (let ((osc (saw_c 0.00000000000000000000))) (lambda (chan:i64 idx:i64) (osc (aref mod_amp idx) (aref mod_frq idx)))) (let ((osc (pulse_c 0.00000000000000000000))) (lambda (chan:i64 idx:i64) (osc (aref mod_amp idx) (aref mod_frq idx) 0.50000000000000000000))) (let ((osc (tri_c 0.00000000000000000000))) (lambda (chan:i64 idx:i64) (osc (aref mod_amp idx) (aref mod_frq idx)))) (let ((osc (ad_c))) (cset! osc cycle #t i1) (lambda (chan:i64 idx:i64) (osc chan 1.0000000000000000000 (aref mod_attack idx) (aref mod_decay idx) (aref mod_attack_slope idx) (aref mod_decay_slope idx)))) (lambda (chan:i64 idx:i64) (aref mod_amp idx)) (lambda (chan:i64 idx:i64) (aref mod_amp idx)) (let ((cnt 0) (rem:float (* (aref mod_amp i) (random)))) (lambda (chan:i64 idx:i64) (if (and (= chan 0) (= (% cnt (ftoi64 (/ SRf (aref mod_frq idx)))) 0)) (begin (set! cnt (+ cnt 1)) (set! rem (* (aref mod_amp idx) (random))))) rem))))) (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*) (begin (if (= mods null) (set! mods (notekernel.mods:|32,SAMPLE|*))) (memset (cast mods i8*) 0 128) (dotimes (i 4) (set! tmp ((aref (aref-ptr lfos i) (aref lfo_types i)) chan i)) (set! tmpmod (aref-ptr mod_matrix i)) (dotimes (j 32) (aset! mods j (+ (aref mods j) (* tmp (aref tmpmod j))))) void)) (set! out in) (set! out (overdrive out overdrive_amt)) (if (< hpf_frq 20000.000000000000000) (set! out (hpf out hpf_frq 0.00000000000000000000))) (set! tmp (+ pan_pos (aref mods PARAM_PAN_POS))) (if (> tmp CHANSF) (set! tmp (- tmp CHANSF))) (set! fxout (pan chan out (+ pan_width (aref mods PARAM_PAN_WIDTH)) tmp)) (if (> flanger_mix 0.0010000000000000000208) (set! fxout (flanger chan fxout 1.0000000000000000000 flanger_mix (+ flanger_low 0.00000000000000000000) (+ flanger_high 0.00000000000000000000) (+ flanger_rate 0.00000000000000000000) (+ flanger_fb 0.00000000000000000000)))) (if (> delay_mix 0.0010000000000000000208) (set! fxout (dly chan fxout (if (= chan 0) (* MILLISEC (+ delay_time_left (aref mods PARAM_DELAY_TIME_LEFT))) (* MILLISEC (+ delay_time_right (aref mods PARAM_DELAY_TIME_RIGHT)))) delay_in delay_mix (+ delay_fb (aref mods PARAM_DELAY_FB))))) (if (> reverb_mix 0.0010000000000000000208) (set! fxout (rev chan fxout (+ reverb_size (aref mods PARAM_REVERB_SIZE)) (+ reverb_predelay (aref mods PARAM_REVERB_PREDELAY)) (+ reverb_absorb (aref mods PARAM_REVERB_ABSORB)) (+ reverb_mix (aref mods PARAM_REVERB_MIX))))) (* gain fxout))))))) analogue_fx_adhoc_236))
(bind-poly analogue_fx analogue_fx_adhoc_W1tmbG9hdCxmbG9hdCxpNjQsaTY0LGZsb2F0Kl0qXQ "")
(register-lib-func xtminstruments analogueVec_note_adhoc_W1tbZmxvYXQsaTY0LGk2NF0qLE5vdGVEYXRhKixpNjQsZmxvYXQqXSpd [[[float,i64,i64]*,NoteData*,i64,float*]*]* 0 "" '(let ((analogueVec_note_adhoc_237 (lambda () (let ((MILLISEC (* 0.0010000000000000000208 SRs)) (amp_env:|4,SAMPLE| (array 0.0:f 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000)) (filter_env:|4,SAMPLE| (array 0.0:f 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000)) (pitch_env:|2,SAMPLE| (array 0.0:f 0.00000000000000000000)) (mod_env:|4,SAMPLE| (array 0.0:f 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000)) (oldfreq 440.0:f) (tune1:SAMPLE 1.0000000000000000000) (tune2:SAMPLE 1.0000000000000000000) (tune3:SAMPLE 1.0000000000000000000) (tune4:SAMPLE 1.0000000000000000000) (osc1_wave:enum PARAM_SAW) (osc2_wave:enum PARAM_SAW) (osc3_wave:enum PARAM_SAW) (osc4_wave:enum PARAM_SAW) (pw1:SAMPLE 0.50000000000000000000) (pw2:SAMPLE 0.50000000000000000000) (pw3:SAMPLE 0.50000000000000000000) (pw4:SAMPLE 0.50000000000000000000) (noise:enum PARAM_WHITE) (noise_amp:SAMPLE 0.00000000000000000000) (osc1_amp:SAMPLE 0.40000000000000002220) (osc2_amp:SAMPLE 0.00000000000000000000) (osc3_amp:SAMPLE 0.00000000000000000000) (osc4_amp:SAMPLE 0.00000000000000000000) (osc_slop:SAMPLE 0.00000000000000000000) (sub_amp:SAMPLE 0.00000000000000000000) (mods:|32,SAMPLE|* (alloc)) (noise_amp_mod:SAMPLE 0.00000000000000000000) (filter_type:i64 2) (follow_frq 0.00000000000000000000) (follow_amp 0.00000000000000000000) (legato #f) (filter_frq:SAMPLE 15000.000000000000000) (filter_env_amt:SAMPLE 0.00000000000000000000) (filter_saturation:SAMPLE 1.0000000000000000000) (pitch_env_amt:SAMPLE 0.00000000000000000000) (portamento:SAMPLE 2.0000000000000000000) (res:SAMPLE 0.00000000000000000000) (reso:SAMPLE 0.00000000000000000000)) (lambda (data:NoteData* nargs:i64 dargs:SAMPLE*) (let ((starttime:i64 (note_starttime data)) (frequency:SAMPLE (+ (note_frequency data) (* (- (random) 0.50000000000000000000) (note_frequency data) osc_slop 0.050000000000000002776))) (target_frq:SAMPLE frequency) (amplitude:SAMPLE (note_amplitude data)) (target_amp:SAMPLE amplitude) (newampinc:SAMPLE 0.00000000000000000000) (duration:i64 (note_duration data)) (glideinc:SAMPLE 0.00000000000000000000) (midifrq:SAMPLE 0.00000000000000000000) (new_note_timer:i64 0) (frq 0.00000000000000000000) (osc_pws_v (vector pw1 pw2 pw3 pw4)) (osc_tunes_v (vector tune1 tune2 tune3 tune4)) (osc_modamps_v (vector (aref mods PARAM_OSC1_AMP) (aref mods PARAM_OSC2_AMP) (aref mods PARAM_OSC3_AMP) (aref mods PARAM_OSC4_AMP))) (osc_modfrqs_v (vector (aref mods PARAM_OSC1_FRQ) (aref mods PARAM_OSC2_FRQ) (aref mods PARAM_OSC3_FRQ) (aref mods PARAM_OSC4_FRQ))) (osc_modpws_v (vector (aref mods PARAM_OSC1_PW) (aref mods PARAM_OSC2_PW) (aref mods PARAM_OSC3_PW) (aref mods PARAM_OSC4_PW))) (osc_amps_v (vector osc1_amp osc2_amp osc3_amp osc4_amp)) (osc_amp_v (vector 1.0:f 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000)) (osc_frq_v (vector 1.0:f 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000)) (osc_tune_v (vector 1.0:f 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000)) (osc_pw_v (vector 1.0:f 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000)) (osc_tmp_v (vector 1.0:f 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000)) (osc_out_v (vector 1.0:f 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000)) (adsr4_v (vector 1.0:f 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000)) (adsr1 (adsr_c)) (adsr2 (adsr_c)) (adsr3 (adsr_c)) (adsr4 (adsr_c)) (adsr1_val 0.00000000000000000000) (adsr2_val 0.00000000000000000000) (adsr3_val 0.00000000000000000000) (adsr4_val 0.00000000000000000000) (amp:SAMPLE 0.00000000000000000000) (cof:SAMPLE 0.00000000000000000000) (amp_attack (aref amp_env 0)) (amp_decay (aref amp_env 1)) (amp_sustain (aref amp_env 2)) (amp_release (+ 3.0000000000000000000 (aref amp_env 3))) (amp_release_samples (convert (* SRs (/ amp_release 1000.0000000000000000)) i64)) (reltime:i64 0) (filter_attack (aref filter_env 0)) (filter_decay (aref filter_env 1)) (filter_sustain (aref filter_env 2)) (filter_release (aref filter_env 3)) (pitch_attack (aref pitch_env 0)) (pitch_decay (aref pitch_env 1)) (mod_attack (aref mod_env 0)) (mod_decay (aref mod_env 1)) (mod_sustain (aref mod_env 2)) (mod_release (aref mod_env 3)) (filter:[SAMPLE,SAMPLE,SAMPLE,SAMPLE]* (moog_ladder_inlined (i64toi32 filter_type))) (osc1 (cond ((= osc1_wave 1) (blsawXAnalogue_c (* 0.025000000000000001388 (random)) #f #f)) ((= osc1_wave 2) (blpulse_c 1.0000000000000000000 #f)) ((= osc1_wave 3) (bltriXAnalogue_c 1.0000000000000000000)) ((= osc1_wave 0) (oscXAnalogue_c (* 0.025000000000000001388 (random)))) (else (oscXAnalogue_c (* 0.025000000000000001388 (random)))))) (osc2 (cond ((= osc1_wave 1) (blsawXAnalogue_c (* 0.025000000000000001388 (random)) #f #f)) ((= osc1_wave 2) (blpulse_c 1.0000000000000000000 #f)) ((= osc1_wave 3) (bltriXAnalogue_c 1.0000000000000000000)) ((= osc1_wave 0) (oscXAnalogue_c (* 0.025000000000000001388 (random)))) (else (oscXAnalogue_c (* 0.025000000000000001388 (random)))))) (osc3 (cond ((= osc1_wave 1) (blsawXAnalogue_c (* 0.025000000000000001388 (random)) #f #f)) ((= osc1_wave 2) (blpulse_c 1.0000000000000000000 #f)) ((= osc1_wave 3) (bltriXAnalogue_c 1.0000000000000000000)) ((= osc1_wave 0) (oscXAnalogue_c (* 0.025000000000000001388 (random)))) (else (oscXAnalogue_c (* 0.025000000000000001388 (random)))))) (osc4 (cond ((= osc1_wave 1) (blsawXAnalogue_c (* 0.025000000000000001388 (random)) #f #f)) ((= osc1_wave 2) (blpulse_c 1.0000000000000000000 #f)) ((= osc1_wave 3) (bltriXAnalogue_c 1.0000000000000000000)) ((= osc1_wave 0) (oscXAnalogue_c (* 0.025000000000000001388 (random)))) (else (oscXAnalogue_c (* 0.025000000000000001388 (random)))))) (osc1_out:SAMPLE 0.00000000000000000000) (osc2_out:SAMPLE 0.00000000000000000000) (osc3_out:SAMPLE 0.00000000000000000000) (osc4_out:SAMPLE 0.00000000000000000000) (zero:SAMPLE 0.00000000000000000000) (white (white_c)) (pink (pink_c)) (sub_out 0.00000000000000000000) (noise_out 0.00000000000000000000) (subosc (osc_c 0.00000000000000000000)) (main_out 0.0:f)) (filter.saturation (clamp filter_saturation 1.0:f 3.0:f)) (lambda (time:i64 chan:i64) (if (= chan 0) (begin (if (<> starttime (tref data 1)) (begin (println "steeling voice:" (convert (frq2midi frequency) i64)) (set! starttime (note_starttime data)) (set! frequency (note_frequency data)) (set! duration (note_duration data)))) (if (and (> (note_gate data) 0.50000000000000000000) (> (- time starttime) duration)) (note_gate data 0.00000000000000000000)) (set! adsr1_val (adsr1 chan (note_gate data) amp_attack amp_decay amp_sustain amp_release)) (set! adsr2_val (adsr2 chan (note_gate data) filter_attack filter_decay filter_sustain filter_release)) (set! adsr3_val (adsr3 chan (note_gate data) pitch_attack pitch_decay 0.00000000000000000000 0.00000000000000000000)) (set! adsr4_val (adsr4 chan (note_gate data) mod_attack mod_decay mod_sustain mod_release)) (set! amp (* amplitude adsr1_val)) (set! cof (clamp (+ filter_frq (* follow_frq 8.0000000000000000000 frequency) (* follow_amp amplitude 12000.000000000000000) (* adsr4_val (aref mods PARAM_FILTER_FRQ)) (* filter_env_amt adsr2_val)) 0.00000000000000000000 22000.000000000000000)) (set! res (+ reso (* adsr4_val (aref mods PARAM_FILTER_RES)))) (set! frq (+ frequency (* pitch_env_amt frequency adsr3_val) 0.00000000000000000000)) (if (< frq 10.000000000000000000) (set! frq 10.000000000000000000)) (if (< (note_gate data) 0.10000000000000000555) (set! reltime (+ reltime 1))) (if (> reltime amp_release_samples) (begin (note_active data #f))) (set! adsr4_v (vector adsr4_val adsr4_val adsr4_val adsr4_val)) (set! osc_amp_v (+ osc_amps_v (* adsr4_v osc_modamps_v))) (set! osc_frq_v (+ (* (vector frq frq frq frq) osc_tunes_v) (* adsr4_v osc_modfrqs_v))) (set! osc_pw_v (+ osc_pws_v (* adsr4_v osc_modpws_v))) (set! osc_out_v (* osc_amp_v (vector (if (> osc1_amp 0.0010000000000000000208) (osc1 1.0000000000000000000 (vref osc_frq_v 0) (vref osc_pw_v 0)) 0.00000000000000000000) (if (> osc2_amp 0.0010000000000000000208) (osc2 1.0000000000000000000 (vref osc_frq_v 1) (vref osc_pw_v 1)) 0.00000000000000000000) (if (> osc3_amp 0.0010000000000000000208) (osc3 1.0000000000000000000 (vref osc_frq_v 2) (vref osc_pw_v 2)) 0.00000000000000000000) (if (> osc1_amp 0.0010000000000000000208) (osc4 1.0000000000000000000 (vref osc_frq_v 3) (vref osc_pw_v 3)) 0.00000000000000000000)))) (if (> sub_amp 0.0010000000000000000208) (set! sub_out (* sub_amp (subosc 1.0000000000000000000 (* frq 0.25000000000000000000)))) (set! sub_out 0.00000000000000000000)) (if (> noise_amp 0.0010000000000000000208) (if (= noise PARAM_WHITE) (set! noise_out (* 0.50000000000000000000 (+ noise_amp (* adsr4_val (aref mods PARAM_NOISE_AMP))) (white))) (set! noise_out (* 0.50000000000000000000 (+ noise_amp (* adsr4_val (aref mods PARAM_NOISE_AMP))) (pink)))) (set! noise_out 0.00000000000000000000)) (set! main_out (* amp (filter (+ (vref osc_out_v 0) (vref osc_out_v 1) (vref osc_out_v 2) (vref osc_out_v 3) sub_out noise_out) cof reso))))) main_out))))))) analogueVec_note_adhoc_237))
(bind-poly analogueVec_note analogueVec_note_adhoc_W1tbZmxvYXQsaTY0LGk2NF0qLE5vdGVEYXRhKixpNjQsZmxvYXQqXSpd "")
(register-lib-func xtminstruments analogueVec_fx_adhoc_W1tmbG9hdCxmbG9hdCxpNjQsaTY0LGZsb2F0Kl0qXQ [[float,float,i64,i64,float*]*]* 0 "" '(let ((analogueVec_fx_adhoc_238 (lambda () (analogue_fx)))) analogueVec_fx_adhoc_238))
(bind-poly analogueVec_fx analogueVec_fx_adhoc_W1tmbG9hdCxmbG9hdCxpNjQsaTY0LGZsb2F0Kl0qXQ "")
(register-lib-func xtminstruments analogue_reset_adhoc_W3ZvaWQsaTgqXQ [void,i8*]* 0 "" '(let ((analogue_reset_adhoc_239 (let ((i 0) (j 0)) (lambda (inst:i8*) (set_osc1_amp inst 0.50000000000000000000) (set_osc1_wave inst PARAM_SAW) (set_osc1_tune inst 1.0000000000000000000) (set_osc1_pw inst 0.50000000000000000000) (set_osc1_phase inst 0.00000000000000000000) (set_osc2_amp inst 0.00000000000000000000) (set_osc2_wave inst PARAM_SAW) (set_osc2_tune inst 1.0000000000000000000) (set_osc2_pw inst 0.50000000000000000000) (set_osc2_phase inst 0.00000000000000000000) (set_osc3_amp inst 0.00000000000000000000) (set_osc3_wave inst PARAM_SAW) (set_osc3_tune inst 1.0000000000000000000) (set_osc3_pw inst 0.50000000000000000000) (set_osc3_phase inst 0.00000000000000000000) (set_osc4_amp inst 0.00000000000000000000) (set_osc4_wave inst PARAM_SAW) (set_osc4_tune inst 1.0000000000000000000) (set_osc4_pw inst 0.50000000000000000000) (set_osc4_phase inst 0.00000000000000000000) (set_sub_amp inst 0.00000000000000000000) (set_noise_type inst PARAM_WHITE) (set_noise_amp inst 0.00000000000000000000) (set_filter_frq inst 15000.000000000000000) (set_filter_res inst 0.00000000000000000000) (set_hpf_frq inst 20001.000000000000000) (set_amp_env inst 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000) (set_filter_env inst 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000) (set_filter_env_amt inst 0.00000000000000000000) (set_filter_env_follow_frq inst 0.00000000000000000000) (set_filter_env_follow_amp inst 0.00000000000000000000) (set_pitch_env inst 0.00000000000000000000 0.00000000000000000000) (set_pitch_env_amt inst 0.00000000000000000000) (set_delay_time_left inst 0.00000000000000000000) (set_delay_time_right inst 0.00000000000000000000) (set_delay_mix inst 0.00000000000000000000) (set_delay_fb inst 0.00000000000000000000) (set_delay_frq inst 12000.000000000000000) (set_delay_res inst 0.00000000000000000000) (set_reverb_mix inst 0.00000000000000000000) (set_reverb_size inst 0.40000000000000002220) (set_reverb_predelay inst 40.000000000000000000) (set_reverb_absorb inst 0.45000000000000001110) (set_flanger_mix inst 0.00000000000000000000) (set_flanger_low inst 0.10000000000000000555) (set_flanger_high inst 4.0000000000000000000) (set_flanger_rate inst 0.12728700000000001125) (set_flanger_fb inst 0.25000000000000000000) (set_pan_pos inst 0.50000000000000000000) (set_pan_width inst 1.0000000000000000000) (set_gain inst 2.0000000000000000000) (set_portamento inst 0.00000000000000000000) (set_polyphonic inst) (set_lfo_ad inst PARAM_LFO1 10.000000000000000000 10.000000000000000000 0.00000000000000000000 0.00000000000000000000) (set_lfo_ad inst PARAM_LFO2 10.000000000000000000 10.000000000000000000 0.00000000000000000000 0.00000000000000000000) (set_lfo_ad inst PARAM_LFO3 10.000000000000000000 10.000000000000000000 0.00000000000000000000 0.00000000000000000000) (set_lfo_ad inst PARAM_LFO4 10.000000000000000000 10.000000000000000000 0.00000000000000000000 0.00000000000000000000) (set_lfo inst PARAM_LFO1 1.0000000000000000000 1.0000000000000000000) (set_lfo inst PARAM_LFO2 1.0000000000000000000 1.0000000000000000000) (set_lfo inst PARAM_LFO3 1.0000000000000000000 1.0000000000000000000) (set_lfo inst PARAM_LFO4 1.0000000000000000000 1.0000000000000000000) (set_lfo_type inst PARAM_LFO1 PARAM_SINE) (set_lfo_type inst PARAM_LFO2 PARAM_SINE) (set_lfo_type inst PARAM_LFO3 PARAM_SINE) (set_lfo_type inst PARAM_LFO4 PARAM_SINE) (dotimes (i 4) (doloop (j 32) (set_mod_matrix inst i j 0.00000000000000000000))) (set_mod_env inst 0.00000000000000000000 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000) (set_filter_drive inst 0.00000000000000000000) (set_osc_slop inst 0.00000000000000000000) (set_osc_phase_slop inst 0.10000000000000000555) (println "Analogue Synthesizer Reset!") void)))) analogue_reset_adhoc_239))
(bind-poly analogue_reset analogue_reset_adhoc_W3ZvaWQsaTgqXQ "")
(sys:load "libs/core/instruments/analogue_fileio-scm.xtm")
(register-lib-val xtminstruments DL_NOFILTER i64 "")
(register-lib-val xtminstruments DL_LPF i64 "")
(register-lib-val xtminstruments DL_BPF i64 "")
(register-lib-val xtminstruments DL_HPF i64 "")
(register-lib-val xtminstruments DL_NOTCH i64 "")
(register-lib-val xtminstruments DL_PEAK i64 "")
(register-lib-val xtminstruments DL_AP i64 "")
(register-lib-type xtminstruments DLOGUE_PART <float,float,float,float,float,float,float,float,float,float,float,float,i64,float,float,i64,float,float,float,float,float,float,float,float,float,float> "")
(register-lib-func xtminstruments DLOGUE_PART_z_adhoc_W0RMT0dVRV9QQVJUKixmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxpNjQsZmxvYXQsZmxvYXQsaTY0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ [DLOGUE_PART*,float,float,float,float,float,float,float,float,float,float,float,float,i64,float,float,i64,float,float,float,float,float,float,float,float,float,float]* 0 "" '(let ((DLOGUE_PART_z_adhoc_240 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9 arg_10 arg_11 arg_12 arg_13 arg_14 arg_15 arg_16 arg_17 arg_18 arg_19 arg_20 arg_21 arg_22 arg_23 arg_24 arg_25) (let ((obj (zalloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) (tset! obj 7 arg_7) (tset! obj 8 arg_8) (tset! obj 9 arg_9) (tset! obj 10 arg_10) (tset! obj 11 arg_11) (tset! obj 12 arg_12) (tset! obj 13 arg_13) (tset! obj 14 arg_14) (tset! obj 15 arg_15) (tset! obj 16 arg_16) (tset! obj 17 arg_17) (tset! obj 18 arg_18) (tset! obj 19 arg_19) (tset! obj 20 arg_20) (tset! obj 21 arg_21) (tset! obj 22 arg_22) (tset! obj 23 arg_23) (tset! obj 24 arg_24) (tset! obj 25 arg_25) obj)))) DLOGUE_PART_z_adhoc_240))
(bind-poly DLOGUE_PART_z DLOGUE_PART_z_adhoc_W0RMT0dVRV9QQVJUKixmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxpNjQsZmxvYXQsZmxvYXQsaTY0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtminstruments DLOGUE_PART_h_adhoc_W0RMT0dVRV9QQVJUKixmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxpNjQsZmxvYXQsZmxvYXQsaTY0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ [DLOGUE_PART*,float,float,float,float,float,float,float,float,float,float,float,float,i64,float,float,i64,float,float,float,float,float,float,float,float,float,float]* 0 "" '(let ((DLOGUE_PART_h_adhoc_241 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9 arg_10 arg_11 arg_12 arg_13 arg_14 arg_15 arg_16 arg_17 arg_18 arg_19 arg_20 arg_21 arg_22 arg_23 arg_24 arg_25) (let ((obj (halloc))) (tset! obj 0 arg_0) (tset! obj 1 arg_1) (tset! obj 2 arg_2) (tset! obj 3 arg_3) (tset! obj 4 arg_4) (tset! obj 5 arg_5) (tset! obj 6 arg_6) (tset! obj 7 arg_7) (tset! obj 8 arg_8) (tset! obj 9 arg_9) (tset! obj 10 arg_10) (tset! obj 11 arg_11) (tset! obj 12 arg_12) (tset! obj 13 arg_13) (tset! obj 14 arg_14) (tset! obj 15 arg_15) (tset! obj 16 arg_16) (tset! obj 17 arg_17) (tset! obj 18 arg_18) (tset! obj 19 arg_19) (tset! obj 20 arg_20) (tset! obj 21 arg_21) (tset! obj 22 arg_22) (tset! obj 23 arg_23) (tset! obj 24 arg_24) (tset! obj 25 arg_25) obj)))) DLOGUE_PART_h_adhoc_241))
(bind-poly DLOGUE_PART_h DLOGUE_PART_h_adhoc_W0RMT0dVRV9QQVJUKixmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxpNjQsZmxvYXQsZmxvYXQsaTY0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtminstruments DLOGUE_PART_val_adhoc_W0RMT0dVRV9QQVJULGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGk2NCxmbG9hdCxmbG9hdCxpNjQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXRd [DLOGUE_PART,float,float,float,float,float,float,float,float,float,float,float,float,i64,float,float,i64,float,float,float,float,float,float,float,float,float,float]* 0 "" '(let ((DLOGUE_PART_val_adhoc_242 (lambda (arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9 arg_10 arg_11 arg_12 arg_13 arg_14 arg_15 arg_16 arg_17 arg_18 arg_19 arg_20 arg_21 arg_22 arg_23 arg_24 arg_25) (let ((obj:DLOGUE_PART* (salloc))) (tfill! obj arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9 arg_10 arg_11 arg_12 arg_13 arg_14 arg_15 arg_16 arg_17 arg_18 arg_19 arg_20 arg_21 arg_22 arg_23 arg_24 arg_25) (pref obj 0))))) DLOGUE_PART_val_adhoc_242))
(bind-poly DLOGUE_PART_val DLOGUE_PART_val_adhoc_W0RMT0dVRV9QQVJULGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGZsb2F0LGk2NCxmbG9hdCxmbG9hdCxpNjQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXRd "")
(register-lib-func xtminstruments hcopy_adhoc_W0RMT0dVRV9QQVJUKixETE9HVUVfUEFSVCpd [DLOGUE_PART*,DLOGUE_PART*]* 0 "" '(let ((hcopy_adhoc_243 (lambda (x:DLOGUE_PART*) (let ((obj (halloc))) (tset! obj 0 (tref x 0)) (tset! obj 1 (tref x 1)) (tset! obj 2 (tref x 2)) (tset! obj 3 (tref x 3)) (tset! obj 4 (tref x 4)) (tset! obj 5 (tref x 5)) (tset! obj 6 (tref x 6)) (tset! obj 7 (tref x 7)) (tset! obj 8 (tref x 8)) (tset! obj 9 (tref x 9)) (tset! obj 10 (tref x 10)) (tset! obj 11 (tref x 11)) (tset! obj 12 (tref x 12)) (tset! obj 13 (tref x 13)) (tset! obj 14 (tref x 14)) (tset! obj 15 (tref x 15)) (tset! obj 16 (tref x 16)) (tset! obj 17 (tref x 17)) (tset! obj 18 (tref x 18)) (tset! obj 19 (tref x 19)) (tset! obj 20 (tref x 20)) (tset! obj 21 (tref x 21)) (tset! obj 22 (tref x 22)) (tset! obj 23 (tref x 23)) (tset! obj 24 (tref x 24)) (tset! obj 25 (tref x 25)) obj)))) hcopy_adhoc_243))
(bind-poly hcopy hcopy_adhoc_W0RMT0dVRV9QQVJUKixETE9HVUVfUEFSVCpd "")
(register-lib-func xtminstruments hfree_adhoc_W3ZvaWQsRExPR1VFX1BBUlQqXQ [void,DLOGUE_PART*]* 0 "" '(let ((hfree_adhoc_244 (lambda (x:DLOGUE_PART*) () () () () () () () () () () () () () () () () () () () () () () () () () () (free x) void))) hfree_adhoc_244))
(bind-poly hfree hfree_adhoc_W3ZvaWQsRExPR1VFX1BBUlQqXQ "")
(register-lib-func xtminstruments zcopy_adhoc_W0RMT0dVRV9QQVJUKixETE9HVUVfUEFSVCosbXpvbmUqLG16b25lKl0 [DLOGUE_PART*,DLOGUE_PART*,mzone*,mzone*]* 0 "" '(let ((zcopy_adhoc_245 (lambda (x:DLOGUE_PART* fromz toz) (if (llvm_ptr_in_zone fromz (cast x i8*)) (begin (push_zone toz) (let ((obj (zalloc))) (begin (tset! obj 0 (tref x 0))) (begin (tset! obj 1 (tref x 1))) (begin (tset! obj 2 (tref x 2))) (begin (tset! obj 3 (tref x 3))) (begin (tset! obj 4 (tref x 4))) (begin (tset! obj 5 (tref x 5))) (begin (tset! obj 6 (tref x 6))) (begin (tset! obj 7 (tref x 7))) (begin (tset! obj 8 (tref x 8))) (begin (tset! obj 9 (tref x 9))) (begin (tset! obj 10 (tref x 10))) (begin (tset! obj 11 (tref x 11))) (begin (tset! obj 12 (tref x 12))) (begin (tset! obj 13 (tref x 13))) (begin (tset! obj 14 (tref x 14))) (begin (tset! obj 15 (tref x 15))) (begin (tset! obj 16 (tref x 16))) (begin (tset! obj 17 (tref x 17))) (begin (tset! obj 18 (tref x 18))) (begin (tset! obj 19 (tref x 19))) (begin (tset! obj 20 (tref x 20))) (begin (tset! obj 21 (tref x 21))) (begin (tset! obj 22 (tref x 22))) (begin (tset! obj 23 (tref x 23))) (begin (tset! obj 24 (tref x 24))) (begin (tset! obj 25 (tref x 25))) (pop_zone) obj)) x)))) zcopy_adhoc_245))
(bind-poly zcopy zcopy_adhoc_W0RMT0dVRV9QQVJUKixETE9HVUVfUEFSVCosbXpvbmUqLG16b25lKl0 "")
(register-lib-func xtminstruments dl_osc1_pitch_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_osc1_pitch_adhoc_246 (lambda (x:DLOGUE_PART*) (tref x 0)))) dl_osc1_pitch_adhoc_246))
(bind-poly dl_osc1_pitch dl_osc1_pitch_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_osc1_pitch_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_osc1_pitch_adhoc_247 (lambda (x:DLOGUE_PART* v:float) (tset! x 0 v)))) dl_osc1_pitch_adhoc_247))
(bind-poly dl_osc1_pitch dl_osc1_pitch_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_osc1_amp_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_osc1_amp_adhoc_248 (lambda (x:DLOGUE_PART*) (tref x 1)))) dl_osc1_amp_adhoc_248))
(bind-poly dl_osc1_amp dl_osc1_amp_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_osc1_amp_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_osc1_amp_adhoc_249 (lambda (x:DLOGUE_PART* v:float) (tset! x 1 v)))) dl_osc1_amp_adhoc_249))
(bind-poly dl_osc1_amp dl_osc1_amp_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_osc1_phase_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_osc1_phase_adhoc_250 (lambda (x:DLOGUE_PART*) (tref x 2)))) dl_osc1_phase_adhoc_250))
(bind-poly dl_osc1_phase dl_osc1_phase_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_osc1_phase_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_osc1_phase_adhoc_251 (lambda (x:DLOGUE_PART* v:float) (tset! x 2 v)))) dl_osc1_phase_adhoc_251))
(bind-poly dl_osc1_phase dl_osc1_phase_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_osc1_pw_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_osc1_pw_adhoc_252 (lambda (x:DLOGUE_PART*) (tref x 3)))) dl_osc1_pw_adhoc_252))
(bind-poly dl_osc1_pw dl_osc1_pw_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_osc1_pw_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_osc1_pw_adhoc_253 (lambda (x:DLOGUE_PART* v:float) (tset! x 3 v)))) dl_osc1_pw_adhoc_253))
(bind-poly dl_osc1_pw dl_osc1_pw_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_osc2_pitch_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_osc2_pitch_adhoc_254 (lambda (x:DLOGUE_PART*) (tref x 4)))) dl_osc2_pitch_adhoc_254))
(bind-poly dl_osc2_pitch dl_osc2_pitch_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_osc2_pitch_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_osc2_pitch_adhoc_255 (lambda (x:DLOGUE_PART* v:float) (tset! x 4 v)))) dl_osc2_pitch_adhoc_255))
(bind-poly dl_osc2_pitch dl_osc2_pitch_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_osc2_amp_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_osc2_amp_adhoc_256 (lambda (x:DLOGUE_PART*) (tref x 5)))) dl_osc2_amp_adhoc_256))
(bind-poly dl_osc2_amp dl_osc2_amp_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_osc2_amp_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_osc2_amp_adhoc_257 (lambda (x:DLOGUE_PART* v:float) (tset! x 5 v)))) dl_osc2_amp_adhoc_257))
(bind-poly dl_osc2_amp dl_osc2_amp_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_osc2_phase_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_osc2_phase_adhoc_258 (lambda (x:DLOGUE_PART*) (tref x 6)))) dl_osc2_phase_adhoc_258))
(bind-poly dl_osc2_phase dl_osc2_phase_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_osc2_phase_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_osc2_phase_adhoc_259 (lambda (x:DLOGUE_PART* v:float) (tset! x 6 v)))) dl_osc2_phase_adhoc_259))
(bind-poly dl_osc2_phase dl_osc2_phase_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_osc2_pw_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_osc2_pw_adhoc_260 (lambda (x:DLOGUE_PART*) (tref x 7)))) dl_osc2_pw_adhoc_260))
(bind-poly dl_osc2_pw dl_osc2_pw_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_osc2_pw_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_osc2_pw_adhoc_261 (lambda (x:DLOGUE_PART* v:float) (tset! x 7 v)))) dl_osc2_pw_adhoc_261))
(bind-poly dl_osc2_pw dl_osc2_pw_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_amp_decay_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_amp_decay_adhoc_262 (lambda (x:DLOGUE_PART*) (tref x 8)))) dl_amp_decay_adhoc_262))
(bind-poly dl_amp_decay dl_amp_decay_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_amp_decay_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_amp_decay_adhoc_263 (lambda (x:DLOGUE_PART* v:float) (tset! x 8 v)))) dl_amp_decay_adhoc_263))
(bind-poly dl_amp_decay dl_amp_decay_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_amp_decay_dur_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_amp_decay_dur_adhoc_264 (lambda (x:DLOGUE_PART*) (tref x 22)))) dl_amp_decay_dur_adhoc_264))
(bind-poly dl_amp_decay_dur dl_amp_decay_dur_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_amp_decay_dur_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_amp_decay_dur_adhoc_265 (lambda (x:DLOGUE_PART* v:float) (tset! x 22 v)))) dl_amp_decay_dur_adhoc_265))
(bind-poly dl_amp_decay_dur dl_amp_decay_dur_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_pitch_decay_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_pitch_decay_adhoc_266 (lambda (x:DLOGUE_PART*) (tref x 9)))) dl_pitch_decay_adhoc_266))
(bind-poly dl_pitch_decay dl_pitch_decay_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_pitch_decay_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_pitch_decay_adhoc_267 (lambda (x:DLOGUE_PART* v:float) (tset! x 9 v)))) dl_pitch_decay_adhoc_267))
(bind-poly dl_pitch_decay dl_pitch_decay_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_pitch_amt_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_pitch_amt_adhoc_268 (lambda (x:DLOGUE_PART*) (tref x 10)))) dl_pitch_amt_adhoc_268))
(bind-poly dl_pitch_amt dl_pitch_amt_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_pitch_amt_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_pitch_amt_adhoc_269 (lambda (x:DLOGUE_PART* v:float) (tset! x 10 v)))) dl_pitch_amt_adhoc_269))
(bind-poly dl_pitch_amt dl_pitch_amt_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_noise_amp_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_noise_amp_adhoc_270 (lambda (x:DLOGUE_PART*) (tref x 11)))) dl_noise_amp_adhoc_270))
(bind-poly dl_noise_amp dl_noise_amp_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_noise_amp_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_noise_amp_adhoc_271 (lambda (x:DLOGUE_PART* v:float) (tset! x 11 v)))) dl_noise_amp_adhoc_271))
(bind-poly dl_noise_amp dl_noise_amp_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_filter1_type_adhoc_W2k2NCxETE9HVUVfUEFSVCpd [i64,DLOGUE_PART*]* 0 "" '(let ((dl_filter1_type_adhoc_272 (lambda (x:DLOGUE_PART*) (tref x 12)))) dl_filter1_type_adhoc_272))
(bind-poly dl_filter1_type dl_filter1_type_adhoc_W2k2NCxETE9HVUVfUEFSVCpd "")
(register-lib-func xtminstruments dl_filter1_type_adhoc_W2k2NCxETE9HVUVfUEFSVCosaTY0XQ [i64,DLOGUE_PART*,i64]* 0 "" '(let ((dl_filter1_type_adhoc_273 (lambda (x:DLOGUE_PART* v:i64) (tset! x 12 v)))) dl_filter1_type_adhoc_273))
(bind-poly dl_filter1_type dl_filter1_type_adhoc_W2k2NCxETE9HVUVfUEFSVCosaTY0XQ "")
(register-lib-func xtminstruments dl_filter1_frq_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_filter1_frq_adhoc_274 (lambda (x:DLOGUE_PART*) (tref x 13)))) dl_filter1_frq_adhoc_274))
(bind-poly dl_filter1_frq dl_filter1_frq_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_filter1_frq_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_filter1_frq_adhoc_275 (lambda (x:DLOGUE_PART* v:float) (tset! x 13 v)))) dl_filter1_frq_adhoc_275))
(bind-poly dl_filter1_frq dl_filter1_frq_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_filter1_frq_scale_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_filter1_frq_scale_adhoc_276 (lambda (x:DLOGUE_PART*) (tref x 23)))) dl_filter1_frq_scale_adhoc_276))
(bind-poly dl_filter1_frq_scale dl_filter1_frq_scale_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_filter1_frq_scale_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_filter1_frq_scale_adhoc_277 (lambda (x:DLOGUE_PART* v:float) (tset! x 23 v)))) dl_filter1_frq_scale_adhoc_277))
(bind-poly dl_filter1_frq_scale dl_filter1_frq_scale_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_filter1_res_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_filter1_res_adhoc_278 (lambda (x:DLOGUE_PART*) (tref x 14)))) dl_filter1_res_adhoc_278))
(bind-poly dl_filter1_res dl_filter1_res_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_filter1_res_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_filter1_res_adhoc_279 (lambda (x:DLOGUE_PART* v:float) (tset! x 14 v)))) dl_filter1_res_adhoc_279))
(bind-poly dl_filter1_res dl_filter1_res_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_filter2_type_adhoc_W2k2NCxETE9HVUVfUEFSVCpd [i64,DLOGUE_PART*]* 0 "" '(let ((dl_filter2_type_adhoc_280 (lambda (x:DLOGUE_PART*) (tref x 15)))) dl_filter2_type_adhoc_280))
(bind-poly dl_filter2_type dl_filter2_type_adhoc_W2k2NCxETE9HVUVfUEFSVCpd "")
(register-lib-func xtminstruments dl_filter2_type_adhoc_W2k2NCxETE9HVUVfUEFSVCosaTY0XQ [i64,DLOGUE_PART*,i64]* 0 "" '(let ((dl_filter2_type_adhoc_281 (lambda (x:DLOGUE_PART* v:i64) (tset! x 15 v)))) dl_filter2_type_adhoc_281))
(bind-poly dl_filter2_type dl_filter2_type_adhoc_W2k2NCxETE9HVUVfUEFSVCosaTY0XQ "")
(register-lib-func xtminstruments dl_filter2_frq_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_filter2_frq_adhoc_282 (lambda (x:DLOGUE_PART*) (tref x 16)))) dl_filter2_frq_adhoc_282))
(bind-poly dl_filter2_frq dl_filter2_frq_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_filter2_frq_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_filter2_frq_adhoc_283 (lambda (x:DLOGUE_PART* v:float) (tset! x 16 v)))) dl_filter2_frq_adhoc_283))
(bind-poly dl_filter2_frq dl_filter2_frq_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_filter2_frq_scale_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_filter2_frq_scale_adhoc_284 (lambda (x:DLOGUE_PART*) (tref x 24)))) dl_filter2_frq_scale_adhoc_284))
(bind-poly dl_filter2_frq_scale dl_filter2_frq_scale_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_filter2_frq_scale_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_filter2_frq_scale_adhoc_285 (lambda (x:DLOGUE_PART* v:float) (tset! x 24 v)))) dl_filter2_frq_scale_adhoc_285))
(bind-poly dl_filter2_frq_scale dl_filter2_frq_scale_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_filter2_res_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_filter2_res_adhoc_286 (lambda (x:DLOGUE_PART*) (tref x 17)))) dl_filter2_res_adhoc_286))
(bind-poly dl_filter2_res dl_filter2_res_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_filter2_res_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_filter2_res_adhoc_287 (lambda (x:DLOGUE_PART* v:float) (tset! x 17 v)))) dl_filter2_res_adhoc_287))
(bind-poly dl_filter2_res dl_filter2_res_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_part_amp_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_part_amp_adhoc_288 (lambda (x:DLOGUE_PART*) (tref x 18)))) dl_part_amp_adhoc_288))
(bind-poly dl_part_amp dl_part_amp_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_part_amp_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_part_amp_adhoc_289 (lambda (x:DLOGUE_PART* v:float) (tset! x 18 v)))) dl_part_amp_adhoc_289))
(bind-poly dl_part_amp dl_part_amp_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_base_frq_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_base_frq_adhoc_290 (lambda (x:DLOGUE_PART*) (tref x 19)))) dl_base_frq_adhoc_290))
(bind-poly dl_base_frq dl_base_frq_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_base_frq_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_base_frq_adhoc_291 (lambda (x:DLOGUE_PART* v:float) (tset! x 19 v)))) dl_base_frq_adhoc_291))
(bind-poly dl_base_frq dl_base_frq_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_base_frq_scale_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_base_frq_scale_adhoc_292 (lambda (x:DLOGUE_PART*) (tref x 20)))) dl_base_frq_scale_adhoc_292))
(bind-poly dl_base_frq_scale dl_base_frq_scale_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_base_frq_scale_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_base_frq_scale_adhoc_293 (lambda (x:DLOGUE_PART* v:float) (tset! x 20 v)))) dl_base_frq_scale_adhoc_293))
(bind-poly dl_base_frq_scale dl_base_frq_scale_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_fm_h_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_fm_h_adhoc_294 (lambda (x:DLOGUE_PART*) (tref x 20)))) dl_fm_h_adhoc_294))
(bind-poly dl_fm_h dl_fm_h_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_fm_h_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_fm_h_adhoc_295 (lambda (x:DLOGUE_PART* v:float) (tset! x 20 v)))) dl_fm_h_adhoc_295))
(bind-poly dl_fm_h dl_fm_h_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments dl_fm_idx_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 [float,DLOGUE_PART*]* 0 "" '(let ((dl_fm_idx_adhoc_296 (lambda (x:DLOGUE_PART*) (tref x 21)))) dl_fm_idx_adhoc_296))
(bind-poly dl_fm_idx dl_fm_idx_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKl0 "")
(register-lib-func xtminstruments dl_fm_idx_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 [float,DLOGUE_PART*,float]* 0 "" '(let ((dl_fm_idx_adhoc_297 (lambda (x:DLOGUE_PART* v:float) (tset! x 21 v)))) dl_fm_idx_adhoc_297))
(bind-poly dl_fm_idx dl_fm_idx_adhoc_W2Zsb2F0LERMT0dVRV9QQVJUKixmbG9hdF0 "")
(register-lib-func xtminstruments default_drum_adhoc_W3ZvaWQsRExPR1VFX1BBUlQqLGZsb2F0XQ [void,DLOGUE_PART*,float]* 0 "" '(let ((default_drum_adhoc_298 (lambda (part:DLOGUE_PART* frq) (dl_osc1_pitch part 1.0000000000000000000) (dl_osc1_amp part 0.50000000000000000000) (dl_osc1_phase part 0.00000000000000000000) (dl_osc1_pw part 0.00000000000000000000) (dl_osc2_pitch part 1.1182000000000000828) (dl_osc2_amp part 0.50000000000000000000) (dl_osc2_phase part 0.00000000000000000000) (dl_osc2_pw part 0.00000000000000000000) (dl_amp_decay part 500.00000000000000000) (dl_amp_decay_dur part 0.00000000000000000000) (dl_pitch_decay part 1.0000000000000000000) (dl_pitch_amt part 10.000000000000000000) (dl_noise_amp part 0.00000000000000000000) (dl_filter1_type part DL_NOFILTER) (dl_filter1_frq part 0.00000000000000000000) (dl_filter1_frq_scale part 0.00000000000000000000) (dl_filter1_res part 0.00000000000000000000) (dl_filter2_type part DL_NOFILTER) (dl_filter2_frq part 0.00000000000000000000) (dl_filter2_frq_scale part 0.00000000000000000000) (dl_filter2_res part 0.00000000000000000000) (dl_part_amp part 2.0000000000000000000) (dl_base_frq part frq) (dl_base_frq_scale part 2.0000000000000000000) (dl_fm_h part 0.00000000000000000000) (dl_fm_idx part 0.00000000000000000000) void))) default_drum_adhoc_298))
(bind-poly default_drum default_drum_adhoc_W3ZvaWQsRExPR1VFX1BBUlQqLGZsb2F0XQ "")
(register-lib-func xtminstruments default_snare_adhoc_W3ZvaWQsRExPR1VFX1BBUlQqLGZsb2F0XQ [void,DLOGUE_PART*,float]* 0 "" '(let ((default_snare_adhoc_299 (lambda (part:DLOGUE_PART* frq) (dl_osc1_pitch part 1.9399999999999999467) (dl_osc1_amp part 0.50000000000000000000) (dl_osc1_phase part 0.00000000000000000000) (dl_osc1_pw part 0.00000000000000000000) (dl_osc2_pitch part 1.9299999999999999378) (dl_osc2_amp part 0.50000000000000000000) (dl_osc2_phase part 0.00000000000000000000) (dl_osc2_pw part 0.00000000000000000000) (dl_amp_decay part 400.00000000000000000) (dl_amp_decay_dur part 0.00000000000000000000) (dl_pitch_decay part 10.000000000000000000) (dl_pitch_amt part 3.5000000000000000000) (dl_noise_amp part 0.29999999999999998890) (dl_filter1_type part DL_NOFILTER) (dl_filter1_frq part 0.00000000000000000000) (dl_filter1_frq_scale part 0.00000000000000000000) (dl_filter1_res part 0.00000000000000000000) (dl_filter2_type part DL_NOFILTER) (dl_filter2_frq part 0.00000000000000000000) (dl_filter2_frq_scale part 0.00000000000000000000) (dl_filter2_res part 0.00000000000000000000) (dl_part_amp part 2.0000000000000000000) (dl_base_frq part frq) (dl_base_frq_scale part 2.0000000000000000000) (dl_fm_h part 0.00000000000000000000) (dl_fm_idx part 0.00000000000000000000) void))) default_snare_adhoc_299))
(bind-poly default_snare default_snare_adhoc_W3ZvaWQsRExPR1VFX1BBUlQqLGZsb2F0XQ "")
(register-lib-func xtminstruments default_cym_adhoc_W3ZvaWQsRExPR1VFX1BBUlQqLGZsb2F0XQ [void,DLOGUE_PART*,float]* 0 "" '(let ((default_cym_adhoc_300 (lambda (part:DLOGUE_PART* decay) (dl_osc1_pitch part 1.1899999999999999467) (dl_osc1_amp part 0.50000000000000000000) (dl_osc1_phase part 0.34999999999999997780) (dl_osc1_pw part 0.11000000000000000056) (dl_osc2_pitch part 1.5000000000000000000) (dl_osc2_amp part 0.50000000000000000000) (dl_osc2_phase part 0.13000000000000000444) (dl_osc2_pw part 0.00000000000000000000) (dl_amp_decay part decay) (dl_amp_decay_dur part 0.00000000000000000000) (dl_pitch_decay part 10.000000000000000000) (dl_pitch_amt part 5.0000000000000000000) (dl_noise_amp part 0.20000000000000001110) (dl_filter1_type part DL_LPF) (dl_filter1_frq part 7500.0000000000000000) (dl_filter1_frq_scale part 0.00000000000000000000) (dl_filter1_res part 0.20000000000000001110) (dl_filter2_type part DL_BPF) (dl_filter2_frq part 7900.0000000000000000) (dl_filter2_frq_scale part 0.00000000000000000000) (dl_filter2_res part 0.90000000000000002220) (dl_part_amp part 2.0000000000000000000) (dl_base_frq part 200.00000000000000000) (dl_base_frq_scale part 2.0000000000000000000) (dl_fm_h part 0.00000000000000000000) (dl_fm_idx part 0.00000000000000000000) void))) default_cym_adhoc_300))
(bind-poly default_cym default_cym_adhoc_W3ZvaWQsRExPR1VFX1BBUlQqLGZsb2F0XQ "")
(register-lib-func xtminstruments dlogue_note_adhoc_W1tbZmxvYXQsaTY0LGk2NF0qLE5vdGVEYXRhKixpNjQsZmxvYXQqXSpd [[[float,i64,i64]*,NoteData*,i64,float*]*]* 0 "" '(let ((dlogue_note_adhoc_301 (lambda () (let ((MILLISEC (* 0.0010000000000000000208 SRs)) (KIT_CONFIGS:|12,DLOGUE_PART|* (alloc))) (default_drum (aref-ptr KIT_CONFIGS 0) 70.000000000000000000) (default_drum (aref-ptr KIT_CONFIGS 1) 70.000000000000000000) (default_snare (aref-ptr KIT_CONFIGS 2) 130.00000000000000000) (default_cym (aref-ptr KIT_CONFIGS 3) 300.00000000000000000) (default_cym (aref-ptr KIT_CONFIGS 4) 800.00000000000000000) (default_drum (aref-ptr KIT_CONFIGS 5) 120.00000000000000000) (default_drum (aref-ptr KIT_CONFIGS 6) 170.00000000000000000) (default_drum (aref-ptr KIT_CONFIGS 7) 210.00000000000000000) (lambda (data:NoteData* nargs:i64 dargs:SAMPLE*) (let ((starttime:i64 (note_starttime data)) (midifrq:SAMPLE (frq2midi (note_frequency data))) (partnum:i64 (ftoi64 (/ midifrq 12.000000000000000000))) (config:DLOGUE_PART* (aref-ptr KIT_CONFIGS partnum)) (notetime:i64 starttime) (frequency:SAMPLE (+ (dl_base_frq config) (* (dl_base_frq config) (dl_base_frq_scale config) (/ (% midifrq 12.000000000000000000) 12.000000000000000000)))) (amplitude:SAMPLE (note_amplitude data)) (gate:SAMPLE (note_gate data)) (target_amp:SAMPLE amplitude) (newampinc:SAMPLE 0.00000000000000000000) (duration:i64 (note_duration data)) (new_note_timer:i64 0) (FM_H:SAMPLE (dl_fm_h config)) (FM_I:SAMPLE (dl_fm_idx config)) (FM:i1 (if (or (> FM_H 0.00000000000000000000) (> FM_I 0.00000000000000000000)) #t #f)) (amp_env:|4,SAMPLE| (array 0.0:f (+ (dl_amp_decay config) (* (dl_amp_decay_dur config) MILLISEC (i64tof duration))) 0.00000000000000000000 0.00000000000000000000)) (pitch_env:|2,SAMPLE| (array 0.0:f (dl_pitch_decay config))) (pitch_env_amt:SAMPLE (dl_pitch_amt config)) (oldfreq 440.0:f) (tune1:SAMPLE (dl_osc1_pitch config)) (tune2:SAMPLE (dl_osc2_pitch config)) (pw1:SAMPLE (dl_osc1_pw config)) (pw2:SAMPLE (dl_osc2_pw config)) (osc1_wave:enum (if (> pw1 0.00000000000000000000) PARAM_PULSE PARAM_SINE)) (osc2_wave:enum (if (> pw2 0.00000000000000000000) PARAM_PULSE PARAM_SINE)) (noise:enum PARAM_WHITE) (noise_amp:SAMPLE (dl_noise_amp config)) (osc1_amp:SAMPLE 0.50000000000000000000) (osc2_amp:SAMPLE 0.50000000000000000000) (osc_phase_slop 0.010000000000000000208) (osc1_phase:SAMPLE (* osc_phase_slop 0.10000000000000000555 (random))) (osc2_phase:SAMPLE (* osc_phase_slop 0.10000000000000000555 (random))) (filter1_type:i64 (dl_filter1_type config)) (filter2_type:i64 (dl_filter2_type config)) (filter1_frq:SAMPLE (+ (dl_filter1_frq config) (* (dl_filter1_frq config) (dl_filter1_frq_scale config) (/ (% midifrq 12.000000000000000000) 12.000000000000000000)))) (filter2_frq:SAMPLE (+ (dl_filter2_frq config) (* (dl_filter2_frq config) (dl_filter2_frq_scale config) (/ (% midifrq 12.000000000000000000) 12.000000000000000000)))) (filter1_res:SAMPLE (dl_filter1_res config)) (filter2_res:SAMPLE (dl_filter2_res config)) (frq 0.00000000000000000000) (adsr1 (adsr_c)) (adsr3 (adsr_c)) (adsr1_val 0.00000000000000000000) (adsr3_val 0.00000000000000000000) (amp:SAMPLE 0.00000000000000000000) (cof:SAMPLE 0.00000000000000000000) (amp_attack (aref amp_env 0)) (amp_decay (aref amp_env 1)) (amp_sustain (aref amp_env 2)) (amp_release (+ 3.0000000000000000000 (aref amp_env 3))) (amp_release_samples (convert (* SRs (/ amp_release 1000.0000000000000000)) i64)) (reltime:i64 0) (pitch_attack (aref pitch_env 0)) (pitch_decay (aref pitch_env 1)) (f1 (svf_c)) (f2 (svf_c)) (f_out:|6,SAMPLE|* (alloc)) (_osc1_phase (+ osc1_phase (* osc_phase_slop 0.10000000000000000555 (random)))) (_osc2_phase (+ osc2_phase (* osc_phase_slop 0.10000000000000000555 (random)))) (sin1 (osc_c _osc1_phase)) (sin2 (osc_c _osc2_phase)) (pulse1 (blpulse_c _osc1_phase #f)) (pulse2 (blpulse_c _osc2_phase #f)) (osc1_out:SAMPLE 0.00000000000000000000) (osc2_out:SAMPLE 0.00000000000000000000) (zero:SAMPLE 0.00000000000000000000) (white (white_c)) (pink (pink_c)) (noise_out 0.00000000000000000000) (main_out 0.0:f)) (lambda (time:i64 chan:i64) (if (= chan 0) (begin (set! notetime (tref data 7)) (if (and (<> starttime notetime) (>= time notetime)) (begin (set! amplitude (note_amplitude data)) (retrigger_adsr adsr1) (retrigger_adsr adsr3) (set! starttime (tref data 7)) (set! reltime 0) (set! gate 1.0000000000000000000) (set! duration (note_duration data)))) (if (and (> gate 0.50000000000000000000) (> (- time starttime) duration)) (set! gate 0.00000000000000000000)) (set! adsr1_val (adsr1 chan gate amp_attack amp_decay amp_sustain amp_release)) (set! adsr3_val (adsr3 chan gate pitch_attack pitch_decay 0.00000000000000000000 0.00000000000000000000)) (set! amp (* amplitude (dl_part_amp config) adsr1_val)) (set! frq (+ frequency (* pitch_env_amt frequency adsr3_val) 0.00000000000000000000)) (if (< frq 10.000000000000000000) (set! frq 10.000000000000000000)) (if (< gate 0.10000000000000000555) (set! reltime (+ reltime 1))) (if (> reltime amp_release_samples) (begin (note_active data #f))) (if (FM) (begin (set! osc2_out 0.00000000000000000000) (set! osc1_out (sin1 (* (/ 5.0000000000000000000 (log frq)) osc1_amp) (+ frq (sin2 (* (* FM_H frq) FM_I) (* FM_H frq)))))) (begin (if (> osc1_amp 0.0010000000000000000208) (set! osc1_out (* osc1_amp (cond ((= osc1_wave PARAM_SINE) (sin1 1.0000000000000000000 (* tune1 frq))) ((= osc1_wave PARAM_PULSE) (pulse1 1.0000000000000000000 (* tune1 frq) pw1)) (else zero)))) (set! osc1_out 0.00000000000000000000)) (if (> osc2_amp 0.0010000000000000000208) (set! osc2_out (* osc2_amp (cond ((= osc2_wave PARAM_SINE) (sin2 1.0000000000000000000 (* tune2 frq))) ((= osc2_wave PARAM_PULSE) (pulse2 1.0000000000000000000 (* tune2 frq) pw1)) (else zero)))) (set! osc2_out 0.00000000000000000000)))) (if (> noise_amp 0.0010000000000000000208) (if (= noise PARAM_WHITE) (set! noise_out (* noise_amp (white))) (set! noise_out (* noise_amp (pink)))) (set! noise_out 0.00000000000000000000)) (set! main_out (+ osc1_out osc2_out noise_out)) (if (> filter1_type DL_NOFILTER) (begin (f1 main_out filter1_frq filter1_res f_out) (set! main_out (aref f_out filter1_type)))) (if (> filter2_type DL_NOFILTER) (begin (f2 main_out filter2_frq filter2_res f_out) (set! main_out (aref f_out filter2_type)))) (set! main_out (* amp main_out)))) main_out))))))) dlogue_note_adhoc_301))
(bind-poly dlogue_note dlogue_note_adhoc_W1tbZmxvYXQsaTY0LGk2NF0qLE5vdGVEYXRhKixpNjQsZmxvYXQqXSpd "")
(register-lib-func xtminstruments dlogue_fx_adhoc_W1tmbG9hdCxmbG9hdCxpNjQsaTY0LGZsb2F0Kl0qXQ [[float,float,i64,i64,float*]*]* 0 "" '(let ((dlogue_fx_adhoc_302 (let ((MILLISEC (* 0.0010000000000000000208 SRf)) (CHANSF (i32tof CHANNELS))) (lambda () (let ((notekernel:NOTE_KERNEL null) (mod_amp:|4,SAMPLE|* (array_ref 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000)) (mod_frq:|4,SAMPLE|* (array_ref 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000 1.0000000000000000000)) (mod_attack:|4,SAMPLE|* (array_ref 10.000000000000000000 10.000000000000000000 10.000000000000000000 10.000000000000000000)) (mod_decay:|4,SAMPLE|* (array_ref 10.000000000000000000 10.000000000000000000 10.000000000000000000 10.000000000000000000)) (mod_attack_slope:|4,SAMPLE|* (array_ref 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000)) (mod_decay_slope:|4,SAMPLE|* (array_ref 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000)) (mods:|32,SAMPLE|* (alloc)) (mod_matrix:|4,|32,SAMPLE||* (alloc)) (tmpmod:|32,SAMPLE|* null) (lfos:|4,|7,[SAMPLE,i64,i64]*||* (alloc)) (lfo_types:|4,i32|* (alloc)) (hpf (hpf_c)) (hpfR (hpf_c)) (hpf_frq 20001.000000000000000) (dly (comb_mc_c (i32toi64 CHANNELS) (* SR 120))) (delay_time_left 50.000000000000000000) (delay_time_right 50.000000000000000000) (delay_in 1.0000000000000000000) (delay_mix 0.00000000000000000000) (delay_fb 0.50000000000000000000) (delay_frq:SAMPLE 12000.000000000000000) (delay_res:SAMPLE 0.00000000000000000000) (rev (reverb_st_c)) (reverb_mix 0.00000000000000000000) (reverb_predelay 40.000000000000000000) (reverb_size 0.29999999999999998890) (reverb_absorb 0.45000000000000001110) (pan (pan_c (i32toi64 CHANNELS))) (pan_pos 0.50000000000000000000) (pan_width 1.0000000000000000000) (flanger (flanger_st_c)) (flanger_low 0.10000000000000000555) (flanger_high 4.0000000000000000000) (flanger_rate 0.12728700000000001125) (flanger_fb 0.25000000000000000000) (flanger_mix 0.00000000000000000000) (overdrive (overdrive_c)) (overdrive_amt 0.50000000000000000000) (out:SAMPLE 0.00000000000000000000) (i:i64 0) (j:i64 0) (tmp 0.00000000000000000000) (fxout 0.00000000000000000000) (gain 2.0000000000000000000)) (dotimes (i 4) (aset! lfo_types i PARAM_SINE) (aset! lfos i (array (let ((osc (osc_c 0.00000000000000000000))) (lambda (chan:i64 idx:i64) (osc (aref mod_amp idx) (aref mod_frq idx)))) (let ((osc (saw_c 0.00000000000000000000))) (lambda (chan:i64 idx:i64) (osc (aref mod_amp idx) (aref mod_frq idx)))) (let ((osc (pulse_c 0.00000000000000000000))) (lambda (chan:i64 idx:i64) (osc (aref mod_amp idx) (aref mod_frq idx) 0.50000000000000000000))) (let ((osc (tri_c 0.00000000000000000000))) (lambda (chan:i64 idx:i64) (osc (aref mod_amp idx) (aref mod_frq idx)))) (let ((osc (ad_c))) (cset! osc cycle #t i1) (lambda (chan:i64 idx:i64) (osc chan 1.0000000000000000000 (aref mod_attack idx) (aref mod_decay idx) (aref mod_attack_slope idx) (aref mod_decay_slope idx)))) (lambda (chan:i64 idx:i64) (aref mod_amp idx)) (let ((cnt 0) (rem:float (* (aref mod_amp i) (random)))) (lambda (chan:i64 idx:i64) (if (and (= chan 0) (= (% cnt (ftoi64 (/ SRf (aref mod_frq idx)))) 0)) (begin (set! cnt (+ cnt 1)) (set! rem (* (aref mod_amp idx) (random))))) rem))))) (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*) (begin (memset (cast mods i8*) 0 128) (dotimes (i 4) (set! tmp ((aref (aref-ptr lfos i) (aref lfo_types i)) chan i)) (set! tmpmod (aref-ptr mod_matrix i)) (dotimes (j 32) (aset! mods j (+ (aref mods j) (* tmp (aref tmpmod j))))) void)) (set! out in) (set! out (overdrive out overdrive_amt)) (if (< hpf_frq 20000.000000000000000) (set! out (hpf out hpf_frq 0.00000000000000000000))) (set! tmp (+ pan_pos (aref mods PARAM_PAN_POS))) (if (> tmp CHANSF) (set! tmp (- tmp CHANSF))) (set! fxout (pan chan out (+ pan_width (aref mods PARAM_PAN_WIDTH)) tmp)) (if (> flanger_mix 0.0010000000000000000208) (set! fxout (flanger chan fxout 1.0000000000000000000 flanger_mix (+ flanger_low 0.00000000000000000000) (+ flanger_high 0.00000000000000000000) (+ flanger_rate 0.00000000000000000000) (+ flanger_fb 0.00000000000000000000)))) (if (> delay_mix 0.0010000000000000000208) (set! fxout (dly chan fxout (if (= chan 0) (* MILLISEC (+ delay_time_left (aref mods PARAM_DELAY_TIME_LEFT))) (* MILLISEC (+ delay_time_right (aref mods PARAM_DELAY_TIME_RIGHT)))) delay_in delay_mix (+ delay_fb (aref mods PARAM_DELAY_FB))))) (if (> reverb_mix 0.0010000000000000000208) (set! fxout (rev chan fxout (+ reverb_size (aref mods PARAM_REVERB_SIZE)) (+ reverb_predelay (aref mods PARAM_REVERB_PREDELAY)) (+ reverb_absorb (aref mods PARAM_REVERB_ABSORB)) (+ reverb_mix (aref mods PARAM_REVERB_MIX))))) (* gain fxout))))))) dlogue_fx_adhoc_302))
(bind-poly dlogue_fx dlogue_fx_adhoc_W1tmbG9hdCxmbG9hdCxpNjQsaTY0LGZsb2F0Kl0qXQ "")
(register-lib-func xtminstruments set_dl_osc_adhoc_W3ZvaWQsaTgqLGk2NCxpNjQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXRd [void,i8*,i64,i64,float,float,float,float]* 0 "" '(let ((set_dl_osc_adhoc_303 (lambda (inst:i8* part:i64 oscnum pitch amp phase pw) (let ((note (cref (cast inst [void]*) note_kernel [void]*)) (configs (cref note KIT_CONFIGS |12,DLOGUE_PART|*)) (config:DLOGUE_PART* (aref-ptr configs (clamp part 0 11)))) (if (= oscnum 1) (begin (dl_osc1_pitch config (clamp pitch 0.00000000000000000000 8.0000000000000000000)) (dl_osc1_amp config (clamp amp 0.00000000000000000000 3.0000000000000000000)) (dl_osc1_phase config phase) (dl_osc1_pw config (clamp pw 0.00000000000000000000 1.0000000000000000000))) (begin (dl_osc2_pitch config (clamp pitch 0.00000000000000000000 8.0000000000000000000)) (dl_osc2_amp config (clamp amp 0.00000000000000000000 3.0000000000000000000)) (dl_osc2_phase config phase) (dl_osc2_pw config (clamp pw 0.00000000000000000000 1.0000000000000000000)))) void)))) set_dl_osc_adhoc_303))
(bind-poly set_dl_osc set_dl_osc_adhoc_W3ZvaWQsaTgqLGk2NCxpNjQsZmxvYXQsZmxvYXQsZmxvYXQsZmxvYXRd "")
(register-lib-func xtminstruments set_dl_filter_adhoc_W3ZvaWQsaTgqLGk2NCxpNjQsaTY0LGZsb2F0LGZsb2F0LGZsb2F0XQ [void,i8*,i64,i64,i64,float,float,float]* 0 "" '(let ((set_dl_filter_adhoc_304 (lambda (inst:i8* part filter_num type frq res scale) (let ((note (cref (cast inst [void]*) note_kernel [void]*)) (configs (cref note KIT_CONFIGS |12,DLOGUE_PART|*)) (config (aref-ptr configs (clamp part 0 11)))) (if (= filter_num 2) (begin (dl_filter2_type config (clamp type -1 5)) (dl_filter2_frq config (clamp frq 0.00000000000000000000 18000.000000000000000)) (dl_filter2_frq_scale config scale) (dl_filter2_res config (clamp res 0.00000000000000000000 1.0000000000000000000))) (begin (dl_filter1_type config (clamp type -1 5)) (dl_filter1_frq config (clamp frq 0.00000000000000000000 18000.000000000000000)) (dl_filter1_frq_scale config scale) (dl_filter1_res config (clamp res 0.00000000000000000000 1.0000000000000000000)))) void)))) set_dl_filter_adhoc_304))
(bind-poly set_dl_filter set_dl_filter_adhoc_W3ZvaWQsaTgqLGk2NCxpNjQsaTY0LGZsb2F0LGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtminstruments set_dl_envs_adhoc_W3ZvaWQsaTgqLGk2NCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0 [void,i8*,i64,float,float,float,float]* 0 "" '(let ((set_dl_envs_adhoc_305 (lambda (inst:i8* part decay decay_dur pitch_decay pitch_decay_amt) (let ((note (cref (cast inst [void]*) note_kernel [void]*)) (configs (cref note KIT_CONFIGS |12,DLOGUE_PART|*)) (config (aref-ptr configs (clamp part 0 11)))) (dl_amp_decay config decay) (dl_amp_decay_dur config decay_dur) (dl_pitch_decay config pitch_decay) (dl_pitch_amt config pitch_decay_amt) void)))) set_dl_envs_adhoc_305))
(bind-poly set_dl_envs set_dl_envs_adhoc_W3ZvaWQsaTgqLGk2NCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0 "")
(register-lib-func xtminstruments set_dl_core_adhoc_W3ZvaWQsaTgqLGk2NCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0 [void,i8*,i64,float,float,float,float]* 0 "" '(let ((set_dl_core_adhoc_306 (lambda (inst:i8* part amp noise frq frqscale) (let ((note (cref (cast inst [void]*) note_kernel [void]*)) (configs (cref note KIT_CONFIGS |12,DLOGUE_PART|*)) (config (aref-ptr configs (clamp part 0 11)))) (dl_part_amp config (clamp amp 0.00000000000000000000 4.0000000000000000000)) (dl_noise_amp config (clamp noise 0.00000000000000000000 2.0000000000000000000)) (dl_base_frq config (clamp frq 0.00000000000000000000 12000.000000000000000)) (dl_base_frq_scale config frqscale) void)))) set_dl_core_adhoc_306))
(bind-poly set_dl_core set_dl_core_adhoc_W3ZvaWQsaTgqLGk2NCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0 "")
(register-lib-func xtminstruments set_dl_fm_adhoc_W3ZvaWQsaTgqLGk2NCxmbG9hdCxmbG9hdF0 [void,i8*,i64,float,float]* 0 "" '(let ((set_dl_fm_adhoc_307 (lambda (inst:i8* part fm_h fm_idx) (let ((note (cref (cast inst [void]*) note_kernel [void]*)) (configs (cref note KIT_CONFIGS |12,DLOGUE_PART|*)) (config (aref-ptr configs (clamp part 0 11)))) (dl_fm_h config fm_h) (dl_fm_idx config fm_idx) void)))) set_dl_fm_adhoc_307))
(bind-poly set_dl_fm set_dl_fm_adhoc_W3ZvaWQsaTgqLGk2NCxmbG9hdCxmbG9hdF0 "")
(register-lib-func xtminstruments set_dl_main_adhoc_W3ZvaWQsaTgqLGZsb2F0LGZsb2F0XQ [void,i8*,float,float]* 0 "" '(let ((set_dl_main_adhoc_308 (lambda (inst:i8* gain:float pan:float) (let ((effect (cref (cast inst [void]*) effect_kernel [void]*))) (cset! effect gain (clamp gain 0.00000000000000000000 5.0000000000000000000) float) (cset! effect pan_pos pan float) void)))) set_dl_main_adhoc_308))
(bind-poly set_dl_main set_dl_main_adhoc_W3ZvaWQsaTgqLGZsb2F0LGZsb2F0XQ "")
(register-lib-func xtminstruments set_dl_drum_adhoc_W3ZvaWQsaTgqLGk2NCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0 [void,i8*,i64,float,float,float,float,float,float]* 0 "" '(let ((set_dl_drum_adhoc_309 (lambda (inst:i8* part decay frq tune noise pitchamt pitchdecay) (let ((note (cref (cast inst [void]*) note_kernel [void]*)) (configs (cref note KIT_CONFIGS |12,DLOGUE_PART|*)) (config (aref-ptr configs (clamp part 0 11)))) (dl_amp_decay config decay) (dl_base_frq config (clamp frq 0.00000000000000000000 12000.000000000000000)) (dl_noise_amp config (clamp noise 0.00000000000000000000 2.0000000000000000000)) (dl_osc2_pitch config (clamp tune 0.00000000000000000000 8.0000000000000000000)) (dl_pitch_amt config pitchamt) (dl_pitch_decay config pitchdecay) void)))) set_dl_drum_adhoc_309))
(bind-poly set_dl_drum set_dl_drum_adhoc_W3ZvaWQsaTgqLGk2NCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdCxmbG9hdF0 "")
(register-lib-func xtminstruments get_waveform_adhoc_W2kzMixpMzJd [i32,i32]* 0 "" '(let ((get_waveform_adhoc_310 (lambda (value:i32) (cond ((= value 0) PARAM_SINE) ((= value 1) PARAM_SAW) ((= value 2) PARAM_PULSE) ((= value 3) PARAM_TRI) ((= value 4) PARAM_WT) (else PARAM_SINE))))) get_waveform_adhoc_310))
(bind-poly get_waveform get_waveform_adhoc_W2kzMixpMzJd "")
(register-lib-func xtminstruments get_lfo_waveform_adhoc_W2kzMixpMzJd [i32,i32]* 0 "" '(let ((get_lfo_waveform_adhoc_311 (lambda (value:i32) (cond ((= value 0) PARAM_SINE) ((= value 1) PARAM_SAW) ((= value 2) PARAM_PULSE) ((= value 3) PARAM_TRI) ((= value 4) PARAM_WT) ((= value 5) PARAM_AD) ((= value 6) PARAM_CONST) ((= value 7) PARAM_RANDOM) (else PARAM_SINE))))) get_lfo_waveform_adhoc_311))
(bind-poly get_lfo_waveform get_lfo_waveform_adhoc_W2kzMixpMzJd "")
(register-lib-func xtminstruments get_noisetype_adhoc_W2kzMixpMzJd [i32,i32]* 0 "" '(let ((get_noisetype_adhoc_312 (lambda (value:i32) (cond ((= value 0) PARAM_WHITE) ((= value 1) PARAM_PINK) (else PARAM_PINK))))) get_noisetype_adhoc_312))
(bind-poly get_noisetype get_noisetype_adhoc_W2kzMixpMzJd "")
(register-lib-func xtminstruments get_filtertype_adhoc_W2kzMixpMzJd [i32,i32]* 0 "" '(let ((get_filtertype_adhoc_313 (lambda (value:i32) (cond ((= value 0) 1:i32) ((= value 1) 2:i32) (else 2:i32))))) get_filtertype_adhoc_313))
(bind-poly get_filtertype get_filtertype_adhoc_W2kzMixpMzJd "")
(register-lib-func xtminstruments frq_from_val_adhoc_W2Zsb2F0LGZsb2F0XQ [float,float]* 0 "" '(let ((frq_from_val_adhoc_314 (lambda (val:float) (clamp (dtof (pow 32.000000000000000000 (+ (* (ftod val) 2.0000000000000000000) 1.0000000000000000000))) 0.00000000000000000000 22000.000000000000000)))) frq_from_val_adhoc_314))
(bind-poly frq_from_val frq_from_val_adhoc_W2Zsb2F0LGZsb2F0XQ "")
(register-lib-func xtminstruments octave_from_val_adhoc_W2Zsb2F0LGZsb2F0XQ [float,float]* 0 "" '(let ((octave_from_val_adhoc_315 (lambda (val:float) (dtof (pow 2.0000000000000000000 (- (* (ftod val) 4.0000000000000000000) 1.0000000000000000000)))))) octave_from_val_adhoc_315))
(bind-poly octave_from_val octave_from_val_adhoc_W2Zsb2F0LGZsb2F0XQ "")
(register-lib-func xtminstruments logRamp_adhoc_W2Zsb2F0LGZsb2F0XQ [float,float]* 0 "" '(let ((logRamp_adhoc_316 (lambda (val:float) (clamp (/ (- (pow 8.0:f (* val 2.0000000000000000000)) 1.0000000000000000000) 63.000000000000000000) 0.00000000000000000000 1.0000000000000000000)))) logRamp_adhoc_316))
(bind-poly logRamp logRamp_adhoc_W2Zsb2F0LGZsb2F0XQ "")
(register-lib-func xtminstruments osc1_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ [[void,i8*,i32,i32,i32]*]* 0 "" '(let ((osc1_cc_adhoc_317 (lambda () (let ((val 0.0:f) (osc-octave 0) (osc-tune 1.0000000000000000000) (osc-octave-value 1.0000000000000000000)) (lambda (inst offset:i32 cc:i32 value:i32) (set! val (/ (i32tof value) 127.00000000000000000)) (cond ((= cc (+ offset 0)) (set_osc1_amp inst val)) ((= cc (+ offset 1)) (set_osc1_wave inst (get_waveform value))) ((= cc (+ offset 2)) (set_osc1_pw inst val)) ((= cc (+ offset 3)) (set! osc-tune (+ 1.0000000000000000000 (+ -0.14999999999999999445 (* val 0.29999999999999998890)))) (set_osc1_tune inst (* osc-octave-value osc-tune))) ((= cc (+ offset 4)) (set! osc-octave (- (clamp value 61 70) 64)) (set! osc-octave-value (octave_from_val val)) (set_osc1_tune inst (* osc-octave-value osc-tune)) void) ((= cc (+ offset 5)) (set_osc1_phase inst val)))))))) osc1_cc_adhoc_317))
(bind-poly osc1_cc osc1_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ "")
(register-lib-func xtminstruments osc2_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ [[void,i8*,i32,i32,i32]*]* 0 "" '(let ((osc2_cc_adhoc_318 (lambda () (let ((val 0.0:f) (osc-octave 0) (osc-tune 1.0000000000000000000) (osc-octave-value 1.0000000000000000000)) (lambda (inst offset:i32 cc:i32 value:i32) (set! val (/ (i32tof value) 127.00000000000000000)) (cond ((= cc (+ offset 0)) (set_osc2_amp inst val)) ((= cc (+ offset 1)) (set_osc2_wave inst (get_waveform value))) ((= cc (+ offset 2)) (set_osc2_pw inst val)) ((= cc (+ offset 3)) (set! osc-tune (+ 1.0000000000000000000 (+ -0.20000000000000001110 (* val 0.40000000000000002220)))) (set_osc2_tune inst (* osc-octave-value osc-tune))) ((= cc (+ offset 4)) (set! osc-octave (- (clamp value 61 70) 64)) (set! osc-octave-value (octave_from_val val)) (set_osc2_tune inst (* osc-octave-value osc-tune)) void) ((= cc (+ offset 5)) (set_osc2_phase inst val)))))))) osc2_cc_adhoc_318))
(bind-poly osc2_cc osc2_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ "")
(register-lib-func xtminstruments osc3_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ [[void,i8*,i32,i32,i32]*]* 0 "" '(let ((osc3_cc_adhoc_319 (lambda () (let ((val 0.0:f) (osc-octave 0) (osc-tune 1.0000000000000000000) (osc-octave-value 1.0000000000000000000)) (lambda (inst offset:i32 cc:i32 value:i32) (set! val (/ (i32tof value) 127.00000000000000000)) (cond ((= cc (+ offset 0)) (set_osc3_amp inst val)) ((= cc (+ offset 1)) (set_osc3_wave inst (get_waveform value))) ((= cc (+ offset 2)) (set_osc3_pw inst val)) ((= cc (+ offset 3)) (set! osc-tune (+ 1.0000000000000000000 (+ -0.20000000000000001110 (* val 0.40000000000000002220)))) (set_osc3_tune inst (* osc-octave-value osc-tune))) ((= cc (+ offset 4)) (set! osc-octave (- (clamp value 61 70) 64)) (set! osc-octave-value (octave_from_val val)) (set_osc3_tune inst (* osc-octave-value osc-tune)) void) ((= cc (+ offset 5)) (set_osc3_phase inst val)))))))) osc3_cc_adhoc_319))
(bind-poly osc3_cc osc3_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ "")
(register-lib-func xtminstruments osc4_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ [[void,i8*,i32,i32,i32]*]* 0 "" '(let ((osc4_cc_adhoc_320 (lambda () (let ((val 0.0:f) (osc-octave 0) (osc-tune 1.0000000000000000000) (osc-octave-value 1.0000000000000000000)) (lambda (inst offset:i32 cc:i32 value:i32) (set! val (/ (i32tof value) 127.00000000000000000)) (cond ((= cc (+ offset 0)) (set_osc4_amp inst val)) ((= cc (+ offset 1)) (set_osc4_wave inst (get_waveform value))) ((= cc (+ offset 2)) (set_osc4_pw inst val)) ((= cc (+ offset 3)) (set! osc-tune (+ 1.0000000000000000000 (+ -0.20000000000000001110 (* val 0.40000000000000002220)))) (set_osc4_tune inst (* osc-octave-value osc-tune))) ((= cc (+ offset 4)) (set! osc-octave (- (clamp value 61 70) 64)) (set! osc-octave-value (octave_from_val val)) (set_osc4_tune inst (* osc-octave-value osc-tune)) void) ((= cc (+ offset 5)) (set_osc4_phase inst val)))))))) osc4_cc_adhoc_320))
(bind-poly osc4_cc osc4_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ "")
(register-lib-func xtminstruments sub_noise_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ [[void,i8*,i32,i32,i32]*]* 0 "" '(let ((sub_noise_cc_adhoc_321 (lambda () (let ((val 0.0:f)) (lambda (inst offset:i32 cc:i32 value:i32) (set! val (/ (i32tof value) 127.00000000000000000)) (cond ((= cc (+ offset 0)) (set_sub_amp inst (* 2.0000000000000000000 val))) ((= cc (+ offset 1)) (set_noise_amp inst (* 2.0000000000000000000 val))) ((= cc (+ offset 2)) (set_noise_type inst (get_noisetype value))) ((= cc (+ offset 3)) (set_filter_type inst (get_filtertype value))))))))) sub_noise_cc_adhoc_321))
(bind-poly sub_noise_cc sub_noise_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ "")
(register-lib-func xtminstruments filter_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ [[void,i8*,i32,i32,i32]*]* 0 "" '(let ((filter_cc_adhoc_322 (lambda () (let ((val 0.0:f)) (lambda (inst offset:i32 cc:i32 value:i32) (set! val (/ (i32tof value) 127.00000000000000000)) (cond ((= cc (+ offset 0)) (set_filter_frq inst (frq_from_val val))) ((= cc (+ offset 1)) (set_filter_res inst (logRamp val))) ((= cc (+ offset 2)) (set_hpf_frq inst (frq_from_val val))) ((= cc (+ offset 3)) (set_filter_drive inst (+ 1.0000000000000000000 (* 3.0000000000000000000 val)))))))))) filter_cc_adhoc_322))
(bind-poly filter_cc filter_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ "")
(register-lib-func xtminstruments amp_pitch_env_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ [[void,i8*,i32,i32,i32]*]* 0 "" '(let ((amp_pitch_env_cc_adhoc_323 (lambda () (let ((val 0.0:f) (envlgth 1.0:f) (ampenv (vector_ref 0.0:f 0.0:f 1.0:f 0.0:f)) (penv (vector_ref 0.0:f 0.0:f))) (lambda (inst offset:i32 cc:i32 value:i32) (set! val (/ (i32tof value) 127.00000000000000000)) (cond ((= cc (+ offset 0)) (vset! ampenv 0 (* val 127.00000000000000000)) (set_amp_env inst (* envlgth (vref ampenv 0)) (* envlgth (vref ampenv 1)) (vref ampenv 2) (* envlgth (vref ampenv 3)))) ((= cc (+ offset 1)) (vset! ampenv 1 (* val 127.00000000000000000 10.000000000000000000)) (set_amp_env inst (* envlgth (vref ampenv 0)) (* envlgth (vref ampenv 1)) (vref ampenv 2) (* envlgth (vref ampenv 3)))) ((= cc (+ offset 2)) (vset! ampenv 2 val) (set_amp_env inst (* envlgth (vref ampenv 0)) (* envlgth (vref ampenv 1)) (vref ampenv 2) (* envlgth (vref ampenv 3)))) ((= cc (+ offset 3)) (vset! ampenv 3 (* val 127.00000000000000000 50.000000000000000000)) (set_amp_env inst (* envlgth (vref ampenv 0)) (* envlgth (vref ampenv 1)) (vref ampenv 2) (* envlgth (vref ampenv 3)))) ((= cc (+ offset 4)) (set! envlgth (* 127.00000000000000000 val)) (set_amp_env inst (* envlgth (vref ampenv 0)) (* envlgth (vref ampenv 1)) (vref ampenv 2) (* envlgth (vref ampenv 3)))) ((= cc (+ offset 5)) (vset! penv 0 (* val 1000.0000000000000000)) (set_pitch_env inst (vref penv 0) (vref penv 1))) ((= cc (+ offset 6)) (vset! penv 1 (* val 1000.0000000000000000)) (set_pitch_env inst (vref penv 0) (vref penv 1))) ((= cc (+ offset 7)) (set_pitch_env_amt inst (- (* 2.0000000000000000000 val) 1.0000000000000000000))))))))) amp_pitch_env_cc_adhoc_323))
(bind-poly amp_pitch_env_cc amp_pitch_env_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ "")
(register-lib-func xtminstruments filter_env_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ [[void,i8*,i32,i32,i32]*]* 0 "" '(let ((filter_env_cc_adhoc_324 (lambda () (let ((val 0.0:f) (envlgth 1.0:f) (fenv (vector_ref 0.0:f 0.00000000000000000000 1.0000000000000000000 0.00000000000000000000))) (lambda (inst offset:i32 cc:i32 value:i32) (set! val (/ (i32tof value) 127.00000000000000000)) (cond ((= cc (+ offset 0)) (vset! fenv 0 (* val 127.00000000000000000)) (set_filter_env inst (* envlgth (vref fenv 0)) (* envlgth (vref fenv 1)) (vref fenv 2) (* envlgth (vref fenv 3)))) ((= cc (+ offset 1)) (vset! fenv 1 (* val 127.00000000000000000 10.000000000000000000)) (set_filter_env inst (* envlgth (vref fenv 0)) (* envlgth (vref fenv 1)) (vref fenv 2) (* envlgth (vref fenv 3)))) ((= cc (+ offset 2)) (vset! fenv 2 val) (set_filter_env inst (* envlgth (vref fenv 0)) (* envlgth (vref fenv 1)) (vref fenv 2) (* envlgth (vref fenv 3)))) ((= cc (+ offset 3)) (vset! fenv 3 (* val 127.00000000000000000 50.000000000000000000)) (set_filter_env inst (* envlgth (vref fenv 0)) (* envlgth (vref fenv 1)) (vref fenv 2) (* envlgth (vref fenv 3)))) ((= cc (+ offset 4)) (set! envlgth (* 127.00000000000000000 val)) (set_filter_env inst (* envlgth (vref fenv 0)) (* envlgth (vref fenv 1)) (vref fenv 2) (* envlgth (vref fenv 3)))) ((= cc (+ offset 5)) (set_filter_env_amt inst (frq_from_val val))) ((= cc (+ offset 6)) (set_filter_env_follow_frq inst val)) ((= cc (+ offset 7)) (set_filter_env_follow_amp inst val)))))))) filter_env_cc_adhoc_324))
(bind-poly filter_env_cc filter_env_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ "")
(register-lib-func xtminstruments delay_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ [[void,i8*,i32,i32,i32]*]* 0 "" '(let ((delay_cc_adhoc_325 (lambda () (let ((val 0.0:f)) (lambda (inst offset:i32 cc:i32 value:i32) (set! val (/ (i32tof value) 127.00000000000000000)) (cond ((= cc (+ offset 0)) (set_delay_time_left inst (* val 2000.0000000000000000))) ((= cc (+ offset 1)) (set_delay_time_right inst (* val 2000.0000000000000000))) ((= cc (+ offset 2)) (set_delay_mix inst val)) ((= cc (+ offset 3)) (set_delay_fb inst val)))))))) delay_cc_adhoc_325))
(bind-poly delay_cc delay_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ "")
(register-lib-func xtminstruments reverb_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ [[void,i8*,i32,i32,i32]*]* 0 "" '(let ((reverb_cc_adhoc_326 (lambda () (let ((val 0.0:f)) (lambda (inst offset:i32 cc:i32 value:i32) (set! val (/ (i32tof value) 127.00000000000000000)) (cond ((= cc (+ offset 0)) (set_reverb_mix inst val)) ((= cc (+ offset 1)) (set_reverb_size inst val)) ((= cc (+ offset 2)) (set_reverb_predelay inst (* val 500.00000000000000000))) ((= cc (+ offset 3)) (set_reverb_absorb inst (+ 0.50000000000000000000 (* 0.50000000000000000000 val)))))))))) reverb_cc_adhoc_326))
(bind-poly reverb_cc reverb_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ "")
(register-lib-func xtminstruments flanger_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ [[void,i8*,i32,i32,i32]*]* 0 "" '(let ((flanger_cc_adhoc_327 (lambda () (let ((val 0.0:f) (delay_fine 10.000000000000000000) (range_fine 0.00000000000000000000) (delay_course 300.00000000000000000) (range_course 0.00000000000000000000)) (lambda (inst offset:i32 cc:i32 value:i32) (set! val (/ (i32tof value) 127.00000000000000000)) (cond ((= cc (+ offset 0)) (set_flanger_mix inst val)) ((= cc (+ offset 1)) (set! delay_fine (* 10.000000000000000000 val)) (set_flanger_low inst (+ delay_course delay_fine))) ((= cc (+ offset 2)) (set! delay_course (* val 100.00000000000000000)) (set_flanger_low inst (+ delay_course delay_fine))) ((= cc (+ offset 3)) (set! range_fine (* 20.000000000000000000 val)) (set_flanger_high inst (+ range_course range_fine))) ((= cc (+ offset 4)) (set! range_course (* val 200.00000000000000000)) (set_flanger_high inst (+ range_course range_fine))) ((= cc (+ offset 5)) (set_flanger_rate inst (* 0.25000000000000000000 val))) ((= cc (+ offset 6)) (set_flanger_fb inst (* 0.99899999999999999911 val))))))))) flanger_cc_adhoc_327))
(bind-poly flanger_cc flanger_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ "")
(register-lib-func xtminstruments lfo1_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ [[void,i8*,i32,i32,i32]*]* 0 "" '(let ((lfo1_cc_adhoc_328 (lambda () (let ((val 0.0:f) (amp 1.0000000000000000000) (frq 1.0000000000000000000) (envlgth 2.0000000000000000000) (lfoenv (vector_ref 10.0:f 10.000000000000000000 0.00000000000000000000 0.00000000000000000000))) (lambda (inst offset:i32 cc:i32 value:i32) (set! val (/ (i32tof value) 127.00000000000000000)) (cond ((= cc (+ offset 0)) (vset! lfoenv 0 (* val 1000.0000000000000000)) (set_lfo_ad inst PARAM_LFO1 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 1)) (vset! lfoenv 1 (* val 1000.0000000000000000)) (set_lfo_ad inst PARAM_LFO1 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 2)) (vset! lfoenv 2 (- (* val 2.0000000000000000000) 1.0000000000000000000)) (set_lfo_ad inst PARAM_LFO1 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 3)) (vset! lfoenv 3 (- (* val 2.0000000000000000000) 1.0000000000000000000)) (set_lfo_ad inst PARAM_LFO1 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 4)) (set! envlgth (* val 8.0000000000000000000)) (set_lfo inst PARAM_LFO1 amp (* envlgth frq)) (set_lfo_ad inst PARAM_LFO1 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 5)) (set! amp val) (set_lfo inst PARAM_LFO1 amp frq)) ((= cc (+ offset 6)) (set! frq (clamp (* val 10.000000000000000000) 0.050000000000000002776 20.000000000000000000)) (set_lfo inst PARAM_LFO1 amp (* envlgth frq))) ((= cc (+ offset 7)) (set_lfo_type inst PARAM_LFO1 (get_lfo_waveform value))))))))) lfo1_cc_adhoc_328))
(bind-poly lfo1_cc lfo1_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ "")
(register-lib-func xtminstruments lfo2_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ [[void,i8*,i32,i32,i32]*]* 0 "" '(let ((lfo2_cc_adhoc_329 (lambda () (let ((val 0.0:f) (amp 1.0000000000000000000) (frq 1.0000000000000000000) (envlgth 2.0000000000000000000) (lfoenv (vector_ref 10.0:f 10.000000000000000000 0.00000000000000000000 0.00000000000000000000))) (lambda (inst offset:i32 cc:i32 value:i32) (set! val (/ (i32tof value) 127.00000000000000000)) (cond ((= cc (+ offset 0)) (vset! lfoenv 0 (* val 1000.0000000000000000)) (set_lfo_ad inst PARAM_LFO2 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 1)) (vset! lfoenv 1 (* val 1000.0000000000000000)) (set_lfo_ad inst PARAM_LFO2 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 2)) (vset! lfoenv 2 (- (* val 2.0000000000000000000) 1.0000000000000000000)) (set_lfo_ad inst PARAM_LFO2 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 3)) (vset! lfoenv 3 (- (* val 2.0000000000000000000) 1.0000000000000000000)) (set_lfo_ad inst PARAM_LFO2 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 4)) (set! envlgth (* val 8.0000000000000000000)) (set_lfo inst PARAM_LFO2 amp (* envlgth frq)) (set_lfo_ad inst PARAM_LFO2 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 5)) (set! amp val) (set_lfo inst PARAM_LFO2 amp frq)) ((= cc (+ offset 6)) (set! frq (clamp (* val 10.000000000000000000) 0.050000000000000002776 20.000000000000000000)) (set_lfo inst PARAM_LFO2 amp (* envlgth frq))) ((= cc (+ offset 7)) (set_lfo_type inst PARAM_LFO2 (get_lfo_waveform value))))))))) lfo2_cc_adhoc_329))
(bind-poly lfo2_cc lfo2_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ "")
(register-lib-func xtminstruments lfo3_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ [[void,i8*,i32,i32,i32]*]* 0 "" '(let ((lfo3_cc_adhoc_330 (lambda () (let ((val 0.0:f) (amp 1.0000000000000000000) (frq 1.0000000000000000000) (envlgth 2.0000000000000000000) (lfoenv (vector_ref 10.0:f 10.000000000000000000 0.00000000000000000000 0.00000000000000000000))) (lambda (inst offset:i32 cc:i32 value:i32) (set! val (/ (i32tof value) 127.00000000000000000)) (cond ((= cc (+ offset 0)) (vset! lfoenv 0 (* val 1000.0000000000000000)) (set_lfo_ad inst PARAM_LFO3 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 1)) (vset! lfoenv 1 (* val 1000.0000000000000000)) (set_lfo_ad inst PARAM_LFO3 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 2)) (vset! lfoenv 2 (- (* val 2.0000000000000000000) 1.0000000000000000000)) (set_lfo_ad inst PARAM_LFO3 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 3)) (vset! lfoenv 3 (- (* val 2.0000000000000000000) 1.0000000000000000000)) (set_lfo_ad inst PARAM_LFO3 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 4)) (set! envlgth (* val 8.0000000000000000000)) (set_lfo inst PARAM_LFO3 amp (* envlgth frq)) (set_lfo_ad inst PARAM_LFO3 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 5)) (set! amp val) (set_lfo inst PARAM_LFO3 amp frq)) ((= cc (+ offset 6)) (set! frq (clamp (* val 10.000000000000000000) 0.050000000000000002776 20.000000000000000000)) (set_lfo inst PARAM_LFO3 amp (* envlgth frq))) ((= cc (+ offset 7)) (set_lfo_type inst PARAM_LFO3 (get_lfo_waveform value))))))))) lfo3_cc_adhoc_330))
(bind-poly lfo3_cc lfo3_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ "")
(register-lib-func xtminstruments lfo4_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ [[void,i8*,i32,i32,i32]*]* 0 "" '(let ((lfo4_cc_adhoc_331 (lambda () (let ((val 0.0:f) (amp 1.0000000000000000000) (frq 1.0000000000000000000) (envlgth 2.0000000000000000000) (lfoenv (vector_ref 10.0:f 10.000000000000000000 0.00000000000000000000 0.00000000000000000000))) (lambda (inst offset:i32 cc:i32 value:i32) (set! val (/ (i32tof value) 127.00000000000000000)) (cond ((= cc (+ offset 0)) (vset! lfoenv 0 (* val 1000.0000000000000000)) (set_lfo_ad inst PARAM_LFO4 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 1)) (vset! lfoenv 1 (* val 1000.0000000000000000)) (set_lfo_ad inst PARAM_LFO4 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 2)) (vset! lfoenv 2 (- (* val 2.0000000000000000000) 1.0000000000000000000)) (set_lfo_ad inst PARAM_LFO4 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 3)) (vset! lfoenv 3 (- (* val 2.0000000000000000000) 1.0000000000000000000)) (set_lfo_ad inst PARAM_LFO4 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 4)) (set! envlgth (* val 8.0000000000000000000)) (set_lfo inst PARAM_LFO4 amp (* envlgth frq)) (set_lfo_ad inst PARAM_LFO4 (* envlgth (vref lfoenv 0)) (* envlgth (vref lfoenv 1)) (vref lfoenv 2) (vref lfoenv 3))) ((= cc (+ offset 5)) (set! amp val) (set_lfo inst PARAM_LFO4 amp frq)) ((= cc (+ offset 6)) (set! frq (clamp (* val 10.000000000000000000) 0.050000000000000002776 20.000000000000000000)) (set_lfo inst PARAM_LFO4 amp (* envlgth frq))) ((= cc (+ offset 7)) (set_lfo_type inst PARAM_LFO4 (get_lfo_waveform value))))))))) lfo4_cc_adhoc_331))
(bind-poly lfo4_cc lfo4_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ "")
(register-lib-func xtminstruments matrix_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ [[void,i8*,i32,i32,i32]*]* 0 "" '(let ((matrix_cc_adhoc_332 (lambda () (let ((val 0.0:f) (source 0) (target 0)) (lambda (inst offset:i32 cc:i32 value:i32) (set! val (/ (i32tof value) 127.00000000000000000)) (cond ((= cc (+ offset 0)) (set! source value) void) ((= cc (+ offset 1)) (set! target value) void) ((= cc (+ offset 2)) (set_mod_matrix inst (% source 4) (% target 32) val) void))))))) matrix_cc_adhoc_332))
(bind-poly matrix_cc matrix_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ "")
(register-lib-func xtminstruments main_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ [[void,i8*,i32,i32,i32]*]* 0 "" '(let ((main_cc_adhoc_333 (lambda () (let ((val 0.0:f)) (lambda (inst offset:i32 cc:i32 value:i32) (set! val (/ (i32tof value) 127.00000000000000000)) (cond ((= cc (+ offset 0)) (set_pan_pos inst val)) ((= cc (+ offset 1)) (set_gain inst (* val 4.0000000000000000000))) ((= cc (+ offset 2)) (set_portamento inst (* val 100.00000000000000000))) ((= cc (+ offset 3)) (if (= value 127) (analogue_reset inst)) void))))))) main_cc_adhoc_333))
(bind-poly main_cc main_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ "")
(register-lib-func xtminstruments extras_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ [[void,i8*,i32,i32,i32]*]* 0 "" '(let ((extras_cc_adhoc_334 (lambda () (let ((val 0.0:f)) (lambda (inst:i8* offset:i32 cc:i32 value:i32) (set! val (/ (i32tof value) 127.00000000000000000)) void))))) extras_cc_adhoc_334))
(bind-poly extras_cc extras_cc_adhoc_W1t2b2lkLGk4KixpMzIsaTMyLGkzMl0qXQ "")
(register-lib-func xtminstruments analogue_cc_adhoc_W3ZvaWQsaTgqLGkzMixpMzIsaTMyXQ [void,i8*,i32,i32,i32]* 0 "" '(let ((analogue_cc_adhoc_335 (let ((osc1 0) (osc1l 8:i32) (osc2 (+ osc1 osc1l)) (osc2l 8:i32) (osc3 (+ osc2 osc2l)) (osc3l 8:i32) (osc4 (+ osc3 osc3l)) (osc4l 8:i32) (subnoise (+ osc4 osc4l)) (subnoisel 4:i32) (filter (+ subnoise subnoisel)) (filterl 4:i32) (amp_pitch_env (+ filter filterl)) (amp_pitch_envl 8:i32) (filter_env (+ amp_pitch_env amp_pitch_envl)) (filter_envl 8:i32) (delay (+ filter_env filter_envl)) (delayl 4:i32) (reverb (+ delay delayl)) (reverbl 4:i32) (flanger (+ reverb reverbl)) (flangerl 8:i32) (main (+ flanger flangerl)) (mainl 4:i32) (matrix (+ main mainl)) (matrixl 4:i32) (lfo1 (+ matrix matrixl)) (lfo1l 8:i32) (extras (+ lfo1 lfo1l)) (osc1_ccs:|16,[void,i8*,i32,i32,i32]*|* (alloc)) (osc2_ccs:|16,[void,i8*,i32,i32,i32]*|* (alloc)) (osc3_ccs:|16,[void,i8*,i32,i32,i32]*|* (alloc)) (osc4_ccs:|16,[void,i8*,i32,i32,i32]*|* (alloc)) (sub_noise_ccs:|16,[void,i8*,i32,i32,i32]*|* (alloc)) (filter_ccs:|16,[void,i8*,i32,i32,i32]*|* (alloc)) (amp_pitch_env_ccs:|16,[void,i8*,i32,i32,i32]*|* (alloc)) (filter_env_ccs:|16,[void,i8*,i32,i32,i32]*|* (alloc)) (delay_ccs:|16,[void,i8*,i32,i32,i32]*|* (alloc)) (reverb_ccs:|16,[void,i8*,i32,i32,i32]*|* (alloc)) (flanger_ccs:|16,[void,i8*,i32,i32,i32]*|* (alloc)) (main_ccs:|16,[void,i8*,i32,i32,i32]*|* (alloc)) (matrix_ccs:|16,[void,i8*,i32,i32,i32]*|* (alloc)) (lfo1_ccs:|16,[void,i8*,i32,i32,i32]*|* (alloc)) (extras_ccs:|16,[void,i8*,i32,i32,i32]*|* (alloc)) (i:i64 0) (print_offsets (lambda () (println 'cc_offsets------------------) (println 'osc1: osc1) (println 'osc2: osc2) (println 'osc3: osc3) (println 'osc4: osc4) (println 'subnoise: subnoise) (println 'filter: filter) (println 'amp_pitch_env amp_pitch_env) (println 'filter_env: filter_env) (println 'delay: delay) (println 'reverb: reverb) (println 'flanger: flanger) (println 'main: main) (println 'matrix: matrix) (println 'lfo1: lfo1) (println 'extras: extras) void))) (dotimes (i 16) (aset! osc1_ccs i (osc1_cc)) (aset! osc2_ccs i (osc2_cc)) (aset! osc3_ccs i (osc3_cc)) (aset! osc4_ccs i (osc4_cc)) (aset! sub_noise_ccs i (sub_noise_cc)) (aset! filter_ccs i (filter_cc)) (aset! amp_pitch_env_ccs i (amp_pitch_env_cc)) (aset! filter_env_ccs i (filter_env_cc)) (aset! delay_ccs i (delay_cc)) (aset! reverb_ccs i (reverb_cc)) (aset! flanger_ccs i (flanger_cc)) (aset! main_ccs i (main_cc)) (aset! matrix_ccs i (matrix_cc)) (aset! lfo1_ccs i (lfo1_cc)) (aset! extras_ccs i (extras_cc)) void) (lambda (inst chan:i32 cc:i32 value:i32) (let ((val:float (/ (i32tof value) 127.00000000000000000))) (cond ((< cc osc2) ((aref osc1_ccs chan) inst osc1 cc value)) ((< cc osc3) ((aref osc2_ccs chan) inst osc2 cc value)) ((< cc osc4) ((aref osc3_ccs chan) inst osc3 cc value)) ((< cc subnoise) ((aref osc4_ccs chan) inst osc4 cc value)) ((< cc filter) ((aref sub_noise_ccs chan) inst subnoise cc value)) ((< cc amp_pitch_env) ((aref filter_ccs chan) inst filter cc value)) ((< cc filter_env) ((aref amp_pitch_env_ccs chan) inst amp_pitch_env cc value)) ((< cc delay) ((aref filter_env_ccs chan) inst filter_env cc value)) ((< cc reverb) ((aref delay_ccs chan) inst delay cc value)) ((< cc flanger) ((aref reverb_ccs chan) inst reverb cc value)) ((< cc main) ((aref flanger_ccs chan) inst flanger cc value)) ((< cc matrix) ((aref main_ccs chan) inst main cc value)) ((< cc lfo1) ((aref matrix_ccs chan) inst matrix cc value)) ((< cc extras) ((aref lfo1_ccs chan) inst lfo1 cc value)) (else ((aref extras_ccs chan) inst extras cc value)))))))) analogue_cc_adhoc_335))
(bind-poly analogue_cc analogue_cc_adhoc_W3ZvaWQsaTgqLGkzMixpMzIsaTMyXQ "")
(register-lib-func xtminstruments print_cc_offsets_adhoc_W3ZvaWRd [void]* 0 "" '(let ((print_cc_offsets_adhoc_336 (lambda () ((analogue_cc.print_offsets:[void]*))))) print_cc_offsets_adhoc_336))
(bind-poly print_cc_offsets print_cc_offsets_adhoc_W3ZvaWRd "")
(print-with-colors 'green 'default #t (print "done"))(print " in" (- (clock:clock) *xtmlib-instruments-loaded-timer*) "seconds\n")
(define *xtmlib-instruments-loaded-timer* (clock:clock))
(set! *impc:compiler:message:level* *impc:aot:prev-compiler-message-level*)
