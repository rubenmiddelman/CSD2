(sys:load "libs/external/glfw3.xtm")
(sys:load "libs/external/nanovg.xtm")
(sys:load "libs/contrib/libchipmunk.xtm")

(bind-val space cpSpace* (cpSpaceNew))
(bind-val ground cpShape* (cpSegmentShapeNew (cpSpaceGetStaticBody space) (cpVect_val -75. 10.) (cpVect_val 75.0 -10.0) 0.0))
(bind-val wall cpShape* (cpSegmentShapeNew (cpSpaceGetStaticBody space) (cpVect_val 75. -10.) (cpVect_val 75.0 20.0) 0.0))
(bind-val mass cpFloat 1.0)
(bind-val radius cpFloat 5.0)
(bind-val moment cpFloat (cpMomentForCircle mass 0.0 radius (cpVect_val 0.0 0.0)))
(bind-val ballBody cpBody* (cpSpaceAddBody space (cpBodyNew mass moment)))
(bind-val ballShape cpShape* (cpSpaceAddShape space (cpCircleShapeNew ballBody radius (cpVect_val 0.0 0.0))))

(bind-val width float 1024.)
(bind-val height float 768.)

(bind-val window GLFWwindow*
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_window (convert width) (convert height))))

(nvg_init)
(bind-val vg NVGcontext* (nvg_create_context))
(bind-val pixel_ratio float (glfw_get_pixel_ratio window))

($
  (begin
    (cpSpaceSetGravity space (cpVect_val 0.0 -100.0))
    (cpShapeSetFriction ground 1.0)
    (cpShapeSetElasticity ground 1.0)
    (cpShapeSetElasticity ballShape 0.75)
    (cpSpaceAddShape space ground)
    (cpSpaceAddShape space wall)
    (cpShapeSetElasticity wall 1.0)
    (cpBodySetPosition ballBody (cpVect_val 0. 100.)))
    (cpShapeSetFriction ballShape 0.7))

($ (glfwSwapInterval 0))

(bind-func draw_seg
  (lambda (shape)
    (let ((a (cpSegmentShapeGetA shape)) (b (cpSegmentShapeGetB shape)))
      (nvgMoveTo vg (convert (tref a 0)) (convert (tref a 1)))
      (nvgLineTo vg (convert (tref b 0)) (convert (tref b 1))))))

(bind-func draw_frame
  (let (
      (fill (NVGcolor 1.0 0.0 0.0 1.0))
      (stroke (NVGcolor 1.0 1.0 1.0 0.5))
      (rad (cpCircleShapeGetRadius ballShape)))
    (lambda (delta_t:double)
      (let ((pos (cpBodyGetPosition ballBody)))
        (nvgBeginFrame vg (convert width) (convert height) pixel_ratio)
        (nvgTransform vg (/ width (/ 200. pixel_ratio)) 0. 0. (/ height -200.) (/ width 2.) (* 3. (/ height 4.)))
        (nvgStrokeColor vg stroke)
        (nvgFillColor vg fill)
        (nvgStrokeWidth vg 0.25)
        (nvgBeginPath vg)
        (nvgCircle vg (convert (tref pos 0)) (convert (tref pos 1)) (convert rad))
        (draw_seg wall)
        (draw_seg ground)
        (nvgStroke vg)
        (nvgFill vg)
        (nvgEndFrame vg)
        (if (or
            (< (cpvlengthsq (cpBodyGetVelocity ballBody)) 0.1)
            (< (tref pos 1) -100.))
          (begin
            (cpBodySetPosition ballBody (cpVect_val (* (imp_randd) 50.) 100.))
            (cpBodySetVelocity ballBody (cpVect_val (* (- (imp_randd) 0.5) 5.) 0.))))
        (cpSpaceStep space delta_t)))))

(bind-func nvg_draw_loop
  (lambda (time:i64 delta_t:double)
    (nvg_clear)
    (draw_frame delta_t)
    (glfwPollEvents)
    (glfwSwapBuffers window)
    (let ((next_time (+ time (convert (* SRd delta_t)))))
      (callback next_time nvg_draw_loop next_time delta_t))))

(nvg_draw_loop (now) (/ 1. 60.))
