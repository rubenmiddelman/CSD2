;;; gstreamer.xtm -- Simple GStreamer playbin example

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: gstreamer

;;; Commentary:

;; A simple gstreamer example
;; plays back a single video file
;;
;; This is about as simple an example as
;; possible that still uses the standard
;; extempore rendering pipeline
;;; Code:

(sys:load "libs/external/glfw3.xtm")

(bind-val width i32 600)
(bind-val height i32 400)

(bind-val window GLFWwindow*
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_window width height)))

(sys:load "libs/external/gl/gl-objects.xtm")
(sys:load "libs/external/gstreamer.xtm")

(bind-val vao VAO* (VAO_create_ss_quad))
(bind-val tex Texture (Texture_create))
(bind-val sp ShaderProgram
  (ShaderProgram_create
   (sys_slurp_file "examples/external/shader-tutorials/texture.vert")
   (sys_slurp_file "examples/external/shader-tutorials/texture.frag")))

(bind-func xtm_frame_data_to_tex
  (lambda (tex data)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D tex)
    (glTexImage2D GL_TEXTURE_2D
                  0
                  GL_RGB
                  width height
                  0
                  GL_RGB
                  GL_UNSIGNED_BYTE
                  data)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_NEAREST)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_NEAREST)
    (gl_print_error "in xtm_frame_data_to_tex")))

(bind-val vplay1 i1 0)
(bind-val sampledata1 i8*)
(bind-val sampledata1dirty i1 0)
(bind-val texid1 i32 0)

(bind-type userdata <i32,GstElement*>)

(bind-func init_sample_data
  (lambda ()
    (set! vplay1 #f)
    (set! sampledata1dirty #f)
    (set! sampledata1 (malloc (* 3 600 400)))
    void))

(bind-func gl_load_movie_textures
  (lambda ()
    (if sampledata1dirty
        (xtm_frame_data_to_tex tex sampledata1))
    void))

(bind-func playbin_bus_call:[void,GstElement*,GstMessage*,userdata*]*
  (lambda (bus msg data)
    (let ((playz (tref (cast data userdata*) 1))
          (msgtype (tref msg 1))
          (time (tref msg 2))
          (seq (tref msg 4)))
      (cond ((<> (& GST_MESSAGE_EOS msgtype) 0)
             (printf "END OF STREAM!\n")
             (gst_element_set_state playz GST_STATE_NULL)
             (gst_object_unref (cast playz gpointer)) ;; does playz release sink?
             (free data)
             1))
      void)))

(bind-func new_preroll
  (lambda (sink:GstAppSink* data:gpointer)
    (let ((sample (gst_app_sink_pull_preroll (cast sink i8*)))
          (caps (gst_sample_get_caps sample))
          (st (gst_caps_get_structure caps 0))
          (gv (gst_structure_get_value st "framerate"))
          (num (gst_value_get_fraction_numerator gv))
          (denom (gst_value_get_fraction_denominator gv))
          (playz (tref (cast data userdata*) 1))
          (quad (tref (cast data userdata*) 0)))
      (cond ((= quad 1) (set! vplay1 #t)))
      ;;(printf "Preroll[%d]: %s\n" quad (gst_caps_to_string caps))
      GST_FLOW_OK)))

(bind-func new_sample
  (lambda (sink:GstAppSink* data:gpointer)
    (let ((sample (gst_app_sink_pull_sample (cast sink i8*)))
          (caps (gst_sample_get_caps sample))
          (buffer (gst_sample_get_buffer sample))
          (dat:i8* null)
          (xsize:gsize 0)
          (quad (tref (cast data userdata*) 0)))
      ;;(printf "Playing back on quad:%d\n" quad)
      (set! dat sampledata1)
      (set! xsize (gst_buffer_extract buffer 0 dat (* 3 600 400)))
      (if (= xsize (* 3 600 400))
          (cond ((= quad 1) (set! sampledata1dirty #t))
                )
          (cond ((= quad 1) (set! sampledata1dirty #f))
                ))
      GST_FLOW_OK)))

(bind-func eos
  (lambda (sink:GstAppSink* data:gpointer)
    (let ((quad (tref (cast data userdata*) 0))
          (playz (tref (cast data userdata*) 1)))
      (cond ((= quad 1) (set! vplay1 #f) (set! sampledata1dirty #f)))
      (printf "Finished Decoding[%d]!\n" quad)
      void)))

;; path must be a valid URI to media

(bind-func xtm_play
  (lambda (path)
    (if vplay1
        (println "Wait to finish the running video first!\n")
        (let ((gstErr:GError* (halloc))
              (playz (gst_parse_launch (cstring (replace "playbin uri=*" "*" path))
                                       gstErr))
              (filter (gst_parse_launch "videoflip method=5" gstErr))
              (sinkz (gst_parse_launch "appsink caps=video/x-raw,format=RGB,width=600,height=400" gstErr))
              (bus (gst_pipeline_get_bus (cast playz GstPipeline*)))
              (appBin:GstElement* (gst_bin_new "app_bin"))
              (data:userdata* (halloc))
              (callbacks:GstAppSinkCallbacks* (halloc))
              (gv:GValue* (halloc)))
          (gst_bus_add_watch bus (cast (get_native_fptr playbin_bus_call) GstBusFunc) (cast data gpointer))
          (println "filter:" (not (null? filter)))
          (println "sinkz:" (not (null? sinkz)))
          (println "playz"  (not (null? playz)))
          (gst_object_unref bus)
          (tfill! callbacks
                  (get_native_fptr eos)
                  (get_native_fptr new_preroll)
                  (get_native_fptr new_sample))
          (tset! data 0 1)
          (tset! data 1 (cast playz GstElement*))
          (gst_app_sink_set_callbacks (cast sinkz i8*) callbacks (cast data gpointer) null)

          ;; Add videoflip filter to line up gstreamer w/ opengl representation.
          (g_value_init gv G_TYPE_OBJECT)
          (g_value_set_object gv (cast filter gpointer))
          (g_object_set_property (cast playz GObject*) "video-filter" gv)

          ;; Replace the default window sink with appsink,
          (g_value_unset gv)
          (g_value_init gv G_TYPE_OBJECT)
          (g_value_set_object gv (cast sinkz gpointer))
          (g_object_set_property (cast playz GObject*) "video-sink" gv)

          ;; start decoding the media!
          (let ((res (gst_element_set_state playz GST_STATE_PLAYING)))
            (if (or (= res 1) (= res 2))
                (begin (printf "Start Decoding[%d]\n" (tref data 0)) #t)
                (begin (printf "Failed To Open[%d]\n" (tref data 0))
                       (gst_element_set_state playz GST_STATE_NULL)
                       (gst_object_unref (cast playz i8*))
                       (free data)
                       #f)))
          void))))

(bind-func _glib_main_loop_call
  (lambda ()
    (g_main_context_iteration null 0)))

(bind-func gl_draw_loop
  (lambda (time:i64 delta_t:double)
    ;; step glib event loop
    ;; draw texture
    (gl_load_movie_textures)
    (glClear GL_COLOR_BUFFER_BIT)

    ;; draw the world
    (let ((texloc (glGetUniformLocation sp "tex")))
      (glUseProgram sp)
      (glUniform1i texloc 0))
    (VAO_bind_and_draw_arrays vao GL_TRIANGLE_STRIP 0 4)
    (glfwSwapBuffers window)

    (let ((next_time (+ time (convert (* 44100. delta_t)))))
      (callback next_time gl_draw_loop next_time delta_t))))

(bind-func glib_main_loop
  (lambda ()
    (_glib_main_loop_call)
    (callback (+ (now) 2000) glib_main_loop)))

;; start your movies here!
;; ($ (begin
;;      (glib_main_loop)
;;      (init_sample_data)
;;      (gst_init_check null null null)
;;      (gl_draw_loop (now) (/ 1. 60.))
;;      (xtm_play "http://docs.gstreamer.com/media/sintel_trailer-480p.webm")))
